{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lourdes12587-Week06-DeepWiki","text":""},{"location":"#content-index","title":"Content Index","text":"<ul> <li>Overview</li> <li>Getting-Started</li> <li>Architecture-Overview</li> <li>Technology-Stack</li> <li>Application-Entry-Point</li> <li>Database-Architecture</li> <li>Routing-System</li> <li>Authentication-&amp;-Authorization</li> <li>User-Registration</li> <li>User-Login</li> <li>Role-Based-Access-Control</li> <li>Session-Management</li> <li>Course-Management-System</li> <li>Creating-Courses</li> <li>Editing-&amp;-Deleting-Courses</li> <li>Course-Listing-&amp;-Visibility</li> <li>Course-Enrollment</li> <li>User-Profiles</li> <li>User-Profile-Page</li> <li>Administrator-Dashboard</li> <li>Frontend-Architecture</li> <li>Template-System-&amp;-Partials</li> <li>Landing-Page</li> <li>Authentication-Views</li> <li>Styling-System</li> <li>API-Reference</li> <li>Authentication-Endpoints</li> <li>Course-Management-Endpoints</li> <li>Profile-Endpoints</li> <li>Development-Guide</li> <li>Project-Structure</li> <li>Adding-New-Routes</li> <li>Database-Operations</li> <li>Security-Considerations</li> </ul>"},{"location":"API-Reference/","title":"API Reference","text":"<p>Relevant source files * routes/auth.js * routes/courses.js * routes/index.js</p> <p>This document provides a comprehensive reference for all HTTP endpoints available in the course management system. It details the request methods, URL patterns, authentication requirements, role-based access restrictions, request parameters, and response formats for each endpoint.</p> <p>For information about authentication mechanisms and middleware implementation, see Authentication &amp; Authorization. For details about the underlying database operations, see Database Architecture. For route implementation patterns and middleware chains, see Routing System.</p>"},{"location":"API-Reference/#endpoint-organization","title":"Endpoint Organization","text":"<p>The application exposes HTTP endpoints organized into four functional groups: authentication operations, course management, enrollment operations, and user profiles. All endpoints follow RESTful conventions where applicable, though some operations use form-based POST requests with redirects rather than JSON APIs.</p>"},{"location":"API-Reference/#endpoint-overview-diagram","title":"Endpoint Overview Diagram","text":"<p>Sources: routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p> <p>routes/index.js L1-L18</p>"},{"location":"API-Reference/#endpoint-summary-table","title":"Endpoint Summary Table","text":"Endpoint Method Auth Required Role Required Controller/Handler Purpose <code>/</code> GET No None routes/index.js L6 Landing page <code>/login</code> GET No None routes/auth.js L8 Display login form <code>/register</code> GET No None routes/auth.js L12 Display registration form <code>/register</code> POST No None routes/auth.js L17-L72 Process user registration <code>/auth</code> POST No None routes/auth.js L75-L131 Authenticate user login <code>/logout</code> POST Yes Any routes/auth.js L134-L136 Destroy session and logout <code>/courses</code> GET No None routes/courses.js L35-L62 List courses (filtered by role) <code>/create</code> GET Yes <code>admin</code> routes/courses.js L64-L67 Display course creation form <code>/save</code> POST Yes <code>admin</code> routes/courses.js L70 Save new course via <code>crud.save</code> <code>/edit/:id</code> GET Yes <code>admin</code> routes/courses.js L73-L84 Display course edit form <code>/update</code> POST Yes <code>admin</code> routes/courses.js L103 Update course via <code>crud.update</code> <code>/delete/:id</code> GET Yes <code>admin</code> routes/courses.js L87-L98 Delete course <code>/inscribir/:id</code> GET Yes <code>registrado</code> routes/courses.js L106-L114 Display enrollment confirmation <code>/inscribir/:id</code> POST Yes <code>registrado</code> routes/courses.js L117-L149 Process course enrollment <code>/perfil</code> GET Yes <code>registrado</code> routes/courses.js L152-L169 Display user profile <code>/admin/perfil</code> GET Yes <code>admin</code> routes/courses.js L172-L185 Display admin dashboard <p>Sources: routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p> <p>routes/index.js L1-L18</p>"},{"location":"API-Reference/#authentication-requirements","title":"Authentication Requirements","text":""},{"location":"API-Reference/#middleware-chain-diagram","title":"Middleware Chain Diagram","text":"<p>Sources: routes/courses.js L8-L33</p> <p>app.js</p>"},{"location":"API-Reference/#session-structure","title":"Session Structure","text":"<p>When a user authenticates successfully via <code>POST /auth</code>, the following session properties are set:</p> Session Property Type Description Set At <code>req.session.loggedin</code> <code>boolean</code> Authentication status flag routes/auth.js L102 <code>req.session.usuario</code> <code>object</code> Complete user record from database routes/auth.js L103 <code>req.session.rol</code> <code>string</code> User role: <code>'publico'</code>, <code>'registrado'</code>, or <code>'admin'</code> routes/auth.js L104 <p>Sources: routes/auth.js L98-L116</p>"},{"location":"API-Reference/#authentication-endpoints","title":"Authentication Endpoints","text":""},{"location":"API-Reference/#get-login","title":"GET /login","text":"<p>Renders the login form interface.</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Not required</li> <li>Parameters: None</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/login.ejs</code></li> <li>Status: <code>200 OK</code></li> </ul> <p>Implementation: routes/auth.js L8-L10</p>"},{"location":"API-Reference/#post-auth","title":"POST /auth","text":"<p>Authenticates user credentials and establishes a session.</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Content-Type: <code>application/x-www-form-urlencoded</code></li> <li>Authentication: Not required</li> </ul> <p>Request Body:</p> Field Type Required Description <code>email</code> <code>string</code> Yes User email address <code>password</code> <code>string</code> Yes Plain-text password <p>Process Flow:</p> <ol> <li>Extract email and password from request body routes/auth.js L77-L78</li> <li>Query database for user by email routes/auth.js L81-L84</li> <li>Compare password hash using <code>bcrypt.compare()</code> routes/auth.js L86</li> <li>If valid, set session properties routes/auth.js L102-L104</li> <li>Render response with SweetAlert2 configuration</li> </ol> <p>Success Response:</p> <ul> <li>Template: <code>views/login.ejs</code></li> <li>Alert configuration: * <code>alertTitle</code>: \"Conexion exitosa\" * <code>alertIcon</code>: \"success\" * <code>timer</code>: 1500ms * <code>ruta</code>: \"\" (redirects to home)</li> </ul> <p>Error Response (Invalid Credentials):</p> <ul> <li>Template: <code>views/login.ejs</code></li> <li>Alert configuration: * <code>alertTitle</code>: \"Error\" * <code>alertMessage</code>: \"Usuario y/o contrase\u00f1a incorrectos\" * <code>alertIcon</code>: \"error\" * Implemented at routes/auth.js L88-L97</li> </ul> <p>Error Response (Missing Fields):</p> <ul> <li>Alert configuration: * <code>alertTitle</code>: \"Advertencia\" * <code>alertMessage</code>: \"Ingrese el usuario y/o contrase\u00f1a\" * Implemented at routes/auth.js L119-L130</li> </ul> <p>Implementation: routes/auth.js L75-L131</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/auth.js L75-L131</p> <p>config/db.js</p>"},{"location":"API-Reference/#get-register","title":"GET /register","text":"<p>Renders the user registration form.</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Not required</li> <li>Parameters: None</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/register.ejs</code></li> <li>Template Variables: <code>{ register: true }</code></li> </ul> <p>Implementation: routes/auth.js L12-L14</p>"},{"location":"API-Reference/#post-register","title":"POST /register","text":"<p>Creates a new user account with validation.</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Content-Type: <code>application/x-www-form-urlencoded</code></li> <li>Authentication: Not required</li> </ul> <p>Request Body:</p> Field Type Required Validation Rules <code>nombre</code> <code>string</code> Yes Minimum 3 characters <code>email</code> <code>string</code> Yes Valid email format <code>password</code> <code>string</code> Yes Minimum 4 characters <code>rol</code> <code>string</code> No Defaults to <code>'registrado'</code> <p>Validation Configuration: routes/auth.js L18-L33</p> <p>Process Flow:</p> <ol> <li>Validate input using <code>express-validator</code> routes/auth.js L35-L40</li> <li>If validation fails, re-render form with errors</li> <li>Hash password using <code>bcrypt.hash()</code> with salt rounds = 8 routes/auth.js L44</li> <li>Insert user into <code>usuarios</code> table routes/auth.js L46-L53</li> <li>Render success response</li> </ol> <p>Success Response:</p> <ul> <li>Template: <code>views/register.ejs</code></li> <li>Alert configuration: * <code>alertTitle</code>: \"Registro exitoso\" * <code>alertMessage</code>: \"Tu cuenta fue creada\" * <code>alertIcon</code>: \"success\" * <code>timer</code>: 2500ms * <code>ruta</code>: \"login\"</li> </ul> <p>Validation Error Response:</p> <ul> <li>Template: <code>views/register.ejs</code></li> <li>Template Variables: * <code>validaciones</code>: Array of validation errors * <code>valores</code>: Original request body</li> </ul> <p>Implementation: routes/auth.js L17-L72</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/auth.js L17-L72</p> <p>config/db.js</p>"},{"location":"API-Reference/#post-logout","title":"POST /logout","text":"<p>Destroys the user session and logs out.</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Authentication: Required (any authenticated user)</li> <li>Parameters: None</li> </ul> <p>Response:</p> <ul> <li>Type: HTTP Redirect</li> <li>Location: <code>/</code> (home page)</li> <li>Status: <code>302 Found</code></li> </ul> <p>Implementation: routes/auth.js L134-L136</p> <p>Sources: routes/auth.js L134-L136</p>"},{"location":"API-Reference/#course-management-endpoints","title":"Course Management Endpoints","text":""},{"location":"API-Reference/#get-courses","title":"GET /courses","text":"<p>Lists courses with visibility filtering based on user role.</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Not required</li> <li>Parameters: None</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/courses.ejs</code></li> </ul> <p>Template Variables:</p> Variable Type Description <code>cursos</code> <code>Array&lt;Object&gt;</code> Course records from database <code>login</code> <code>boolean</code> Authentication status <code>rol</code> <code>string</code> User role or <code>'publico'</code> <p>Role-Based Filtering:</p> User Role SQL Query Behavior <code>publico</code> (not logged in) <code>SELECT * FROM cursos WHERE visibilidad='publico'</code> Shows only public courses <code>registrado</code> <code>SELECT * FROM cursos</code> Shows all courses <code>admin</code> <code>SELECT * FROM cursos</code> Shows all courses <p>Filtering Logic: routes/courses.js L36-L42</p> <p>Implementation: routes/courses.js L35-L62</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L35-L62</p> <p>config/db.js</p>"},{"location":"API-Reference/#get-create","title":"GET /create","text":"<p>Displays the course creation form (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L64</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/create.ejs</code></li> </ul> <p>Authorization Failure:</p> <ul> <li>Redirects to <code>/login</code> if not authenticated or not admin</li> </ul> <p>Implementation: routes/courses.js L64-L67</p> <p>Sources: routes/courses.js L64-L67</p>"},{"location":"API-Reference/#post-save","title":"POST /save","text":"<p>Creates a new course record (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Content-Type: <code>application/x-www-form-urlencoded</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L70</li> </ul> <p>Request Body:</p> Field Type Required Description <code>titulo</code> <code>string</code> Yes Course title <code>descripcion</code> <code>string</code> Yes Course description <code>categoria</code> <code>string</code> Yes Course category <code>visibilidad</code> <code>string</code> Yes <code>'publico'</code> or <code>'privado'</code> <p>Response:</p> <ul> <li>Type: HTTP Redirect</li> <li>Delegates to: <code>crud.save</code> controller src/controller.js</li> <li>Typically redirects to <code>/courses</code> after successful creation</li> </ul> <p>Implementation: routes/courses.js L70</p> <p>Database Query (via controller):</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L70</p> <p>src/controller.js</p>"},{"location":"API-Reference/#get-editid","title":"GET /edit/:id","text":"<p>Displays the course edit form pre-populated with existing data (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L73</li> </ul> <p>URL Parameters:</p> Parameter Type Description <code>id</code> <code>integer</code> Course ID to edit <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/edit.ejs</code></li> <li>Template Variables: <code>{ curso: &lt;course_object&gt; }</code></li> </ul> <p>Process:</p> <ol> <li>Extract course ID from URL parameters routes/courses.js L75</li> <li>Query database for course record routes/courses.js L77</li> <li>Render edit form with course data routes/courses.js L81</li> </ol> <p>Implementation: routes/courses.js L73-L84</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L73-L84</p> <p>config/db.js</p>"},{"location":"API-Reference/#post-update","title":"POST /update","text":"<p>Updates an existing course record (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Content-Type: <code>application/x-www-form-urlencoded</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L103</li> </ul> <p>Request Body:</p> Field Type Required Description <code>id</code> <code>integer</code> Yes Course ID to update <code>titulo</code> <code>string</code> Yes Updated course title <code>descripcion</code> <code>string</code> Yes Updated description <code>categoria</code> <code>string</code> Yes Updated category <code>visibilidad</code> <code>string</code> Yes Updated visibility <p>Response:</p> <ul> <li>Type: HTTP Redirect</li> <li>Delegates to: <code>crud.update</code> controller src/controller.js</li> <li>Typically redirects to <code>/courses</code> after successful update</li> </ul> <p>Implementation: routes/courses.js L103</p> <p>Database Query (via controller):</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L103</p> <p>src/controller.js</p>"},{"location":"API-Reference/#get-deleteid","title":"GET /delete/:id","text":"<p>Deletes a course record (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L87</li> </ul> <p>URL Parameters:</p> Parameter Type Description <code>id</code> <code>integer</code> Course ID to delete <p>Response:</p> <ul> <li>Type: HTTP Redirect</li> <li>Location: <code>/courses</code></li> <li>Status: <code>302 Found</code></li> </ul> <p>Process:</p> <ol> <li>Extract course ID from URL parameters routes/courses.js L89</li> <li>Execute DELETE query routes/courses.js L91</li> <li>Redirect to course listing routes/courses.js L95</li> </ol> <p>Implementation: routes/courses.js L87-L98</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Note: This operation may cascade to related <code>inscripciones</code> records depending on database foreign key constraints.</p> <p>Sources: routes/courses.js L87-L98</p> <p>config/db.js</p>"},{"location":"API-Reference/#enrollment-endpoints","title":"Enrollment Endpoints","text":""},{"location":"API-Reference/#enrollment-flow-diagram","title":"Enrollment Flow Diagram","text":"<p>Sources: routes/courses.js L106-L149</p>"},{"location":"API-Reference/#get-inscribirid","title":"GET /inscribir/:id","text":"<p>Displays enrollment confirmation page for a specific course (registrado only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>registrado</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isRegistrado</code> routes/courses.js L106</li> </ul> <p>URL Parameters:</p> Parameter Type Description <code>id</code> <code>integer</code> Course ID to enroll in <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/confirmInscripcion.ejs</code></li> </ul> <p>Template Variables:</p> Variable Type Description <code>curso</code> <code>object</code> Course record with details <code>login</code> <code>boolean</code> Always <code>true</code> (authenticated) <code>rol</code> <code>string</code> Always <code>'registrado'</code> <p>Process:</p> <ol> <li>Extract course ID routes/courses.js L107</li> <li>Query course details routes/courses.js L109</li> <li>If course not found, redirect to <code>/courses</code> routes/courses.js L110</li> <li>Otherwise render confirmation page routes/courses.js L112</li> </ol> <p>Implementation: routes/courses.js L106-L114</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L106-L114</p> <p>config/db.js</p>"},{"location":"API-Reference/#post-inscribirid","title":"POST /inscribir/:id","text":"<p>Processes course enrollment with duplicate prevention (registrado only).</p> <p>Request:</p> <ul> <li>Method: <code>POST</code></li> <li>Authentication: Required</li> <li>Role: <code>registrado</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isRegistrado</code> routes/courses.js L117</li> </ul> <p>URL Parameters:</p> Parameter Type Description <code>id</code> <code>integer</code> Course ID to enroll in <p>Response:</p> <ul> <li>Type: HTTP Redirect</li> <li>Location: <code>/perfil</code></li> <li>Status: <code>302 Found</code></li> </ul> <p>Process Flow:</p> <ol> <li>Extract course ID and user ID routes/courses.js L118-L119</li> <li>Check for existing enrollment routes/courses.js L121-L128</li> <li>If already enrolled, redirect to profile immediately routes/courses.js L132</li> <li>If not enrolled, insert enrollment record routes/courses.js L135-L146</li> <li>Redirect to profile to view enrolled courses routes/courses.js L144</li> </ol> <p>Duplicate Prevention: The endpoint checks the <code>inscripciones</code> table before inserting to prevent duplicate enrollments routes/courses.js L121-L133</p> <p>Implementation: routes/courses.js L117-L149</p> <p>Database Queries:</p> <pre><code>\n</code></pre> <p>Error Handling:</p> <ul> <li>Database errors redirect to <code>/courses</code> routes/courses.js L127</li> <li>Duplicate enrollments silently redirect to profile (idempotent behavior)</li> </ul> <p>Sources: routes/courses.js L117-L149</p> <p>config/db.js</p>"},{"location":"API-Reference/#profile-endpoints","title":"Profile Endpoints","text":""},{"location":"API-Reference/#get-perfil","title":"GET /perfil","text":"<p>Displays user profile with enrolled courses (registrado only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>registrado</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isRegistrado</code> routes/courses.js L152</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/perfil.ejs</code></li> </ul> <p>Template Variables:</p> Variable Type Description <code>cursos</code> <code>Array&lt;Object&gt;</code> Enrolled courses with full details <code>usuario</code> <code>object</code> User record from session <code>rol</code> <code>string</code> Always <code>'registrado'</code> <code>msg</code> <code>string</code> Optional query parameter message <p>Process:</p> <ol> <li>Extract user ID from session routes/courses.js L154</li> <li>Execute JOIN query to retrieve enrolled courses routes/courses.js L155-L160</li> <li>Render profile template with results routes/courses.js L162-L168</li> </ol> <p>Implementation: routes/courses.js L152-L169</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>This query returns all course details for courses the user has enrolled in through the <code>inscripciones</code> junction table.</p> <p>Sources: routes/courses.js L152-L169</p> <p>config/db.js</p>"},{"location":"API-Reference/#get-adminperfil","title":"GET /admin/perfil","text":"<p>Displays administrator dashboard with system statistics (admin only).</p> <p>Request:</p> <ul> <li>Method: <code>GET</code></li> <li>Authentication: Required</li> <li>Role: <code>admin</code></li> <li>Middleware: <code>estaAutenticado</code>, <code>isAdmin</code> routes/courses.js L172</li> </ul> <p>Response:</p> <ul> <li>Type: HTML (EJS template)</li> <li>Template: <code>views/adminPerfil.ejs</code></li> </ul> <p>Template Variables:</p> Variable Type Description <code>usuario</code> <code>object</code> Admin user record from session <code>totalCursos</code> <code>integer</code> Total count of courses in system <p>Process:</p> <ol> <li>Extract user from session routes/courses.js L173</li> <li>Query total course count routes/courses.js L176</li> <li>Render admin dashboard routes/courses.js L183</li> </ol> <p>Error Handling: If database query fails, renders template with <code>totalCursos: 0</code> routes/courses.js L179</p> <p>Implementation: routes/courses.js L172-L185</p> <p>Database Query:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L172-L185</p> <p>config/db.js</p>"},{"location":"API-Reference/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"API-Reference/#common-error-responses","title":"Common Error Responses","text":"Scenario HTTP Method Response Type Behavior Unauthenticated access to protected route Any Redirect <code>302</code> to <code>/login</code> Invalid role for route Any Redirect <code>302</code> to <code>/login</code> Database query error GET HTML Renders template with empty data Database query error POST Redirect <code>302</code> to appropriate page Validation errors POST HTML Re-renders form with error messages Missing required fields POST HTML Renders alert with error message <p>Sources: routes/courses.js L8-L33</p> <p>routes/auth.js L35-L40</p>"},{"location":"API-Reference/#middleware-reference","title":"Middleware Reference","text":""},{"location":"API-Reference/#estaautenticado","title":"estaAutenticado","text":"<p>Verifies user has an active session.</p> <p>Implementation: routes/courses.js L8-L14</p> <p>Logic:</p> <p>Sources: routes/courses.js L8-L14</p>"},{"location":"API-Reference/#isadmin","title":"isAdmin","text":"<p>Verifies user has <code>admin</code> role.</p> <p>Implementation: routes/courses.js L16-L24</p> <p>Logic:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L16-L24</p>"},{"location":"API-Reference/#isregistrado","title":"isRegistrado","text":"<p>Verifies user has <code>registrado</code> role.</p> <p>Implementation: routes/courses.js L26-L33</p> <p>Logic:</p> <pre><code>\n</code></pre> <p>Sources: routes/courses.js L26-L33</p>"},{"location":"API-Reference/#database-table-reference","title":"Database Table Reference","text":""},{"location":"API-Reference/#usuarios-table","title":"usuarios Table","text":"<p>Stores user accounts and authentication data.</p> Column Type Description <code>id</code> <code>integer</code> Primary key <code>nombre</code> <code>string</code> User's display name <code>email</code> <code>string</code> User email (unique) <code>password</code> <code>string</code> bcrypt hash of password <code>rol</code> <code>enum</code> <code>'publico'</code>, <code>'registrado'</code>, or <code>'admin'</code> <p>Sources: routes/auth.js L46-L53</p>"},{"location":"API-Reference/#cursos-table","title":"cursos Table","text":"<p>Stores course information.</p> Column Type Description <code>id</code> <code>integer</code> Primary key <code>titulo</code> <code>string</code> Course title <code>descripcion</code> <code>string</code> Course description <code>categoria</code> <code>string</code> Course category <code>visibilidad</code> <code>string</code> <code>'publico'</code> or <code>'privado'</code> <p>Sources: routes/courses.js L77</p>"},{"location":"API-Reference/#inscripciones-table","title":"inscripciones Table","text":"<p>Junction table tracking course enrollments.</p> Column Type Description <code>id_usuario</code> <code>integer</code> Foreign key to <code>usuarios.id</code> <code>id_curso</code> <code>integer</code> Foreign key to <code>cursos.id</code> <p>Sources: routes/courses.js L122</p> <p>routes/courses.js L136</p> <p>routes/courses.js L158</p>"},{"location":"Adding-New-Routes/","title":"Adding New Routes","text":"<p>Relevant source files * app.js * routes/courses.js * src/controller.js</p> <p>This document provides a step-by-step guide for extending the application with new routes. It covers route file creation, middleware application, controller integration, view rendering, and router mounting in the Express application.</p> <p>For information about existing route endpoints and their specifications, see API Reference. For database operation patterns used in route handlers, see Database Operations. For security considerations when implementing routes, see Security Considerations.</p>"},{"location":"Adding-New-Routes/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This page covers the technical process of adding new HTTP endpoints to the application. You will learn how to create route modules, apply authentication/authorization middleware, integrate database operations through controllers, and properly mount routes in the Express server. The examples reference the existing routing patterns found in <code>routes/courses.js</code> and <code>routes/auth.js</code>.</p> <p>Sources: routes/courses.js L1-L187</p> <p>app.js L1-L41</p>"},{"location":"Adding-New-Routes/#route-creation-workflow","title":"Route Creation Workflow","text":"<p>The following diagram illustrates the complete workflow for adding a new route to the system:</p> <pre><code>flowchart TD\n\nStart[\"Start: Define New Feature\"]\nCreateFile[\"Create route file in routes/\"]\nImportDeps[\"Import dependencies:&lt;br&gt;express, db, controllers\"]\nCreateRouter[\"Create express.Router() instance\"]\nDefineMiddleware[\"Define middleware functions:&lt;br&gt;estaAutenticado, isAdmin, isRegistrado\"]\nImplRoutes[\"Implement route handlers:&lt;br&gt;GET, POST, etc.\"]\nControllerCheck[\"Need complex&lt;br&gt;business logic?\"]\nCreateController[\"Create controller in src/\"]\nDirectDB[\"Use direct db.query()\"]\nConnectView[\"Connect to EJS view\"]\nExportRouter[\"Export router with module.exports\"]\nMountApp[\"Mount in app.js with app.use()\"]\nTestRoute[\"Test route in browser\"]\nEnd[\"Complete\"]\n\nStart --&gt; CreateFile\nCreateFile --&gt; ImportDeps\nImportDeps --&gt; CreateRouter\nCreateRouter --&gt; DefineMiddleware\nDefineMiddleware --&gt; ImplRoutes\nImplRoutes --&gt; ControllerCheck\nControllerCheck --&gt; CreateController\nControllerCheck --&gt; DirectDB\nCreateController --&gt; ConnectView\nDirectDB --&gt; ConnectView\nConnectView --&gt; ExportRouter\nExportRouter --&gt; MountApp\nMountApp --&gt; TestRoute\nTestRoute --&gt; End</code></pre> <p>Workflow Stages:</p> <ol> <li>File Creation: Create a new <code>.js</code> file in the <code>routes/</code> directory</li> <li>Dependency Setup: Import required modules (<code>express</code>, database connection, controllers)</li> <li>Router Initialization: Create an Express router instance</li> <li>Middleware Definition: Implement or reuse authentication/authorization functions</li> <li>Route Implementation: Define HTTP method handlers with appropriate logic</li> <li>Controller Integration: Create separate controller functions for complex operations</li> <li>View Connection: Link routes to EJS templates for rendering</li> <li>Router Mounting: Register the router in <code>app.js</code></li> </ol> <p>Sources: routes/courses.js L1-L187</p> <p>app.js L28-L31</p>"},{"location":"Adding-New-Routes/#step-1-create-a-route-file","title":"Step 1: Create a Route File","text":"<p>All route modules are stored in the <code>routes/</code> directory. Create a new file following this basic structure:</p>"},{"location":"Adding-New-Routes/#route-file-template-structure","title":"Route File Template Structure","text":""},{"location":"Adding-New-Routes/#key-components","title":"Key Components","text":"Component Purpose Example <code>express.Router()</code> Creates isolated routing instance <code>const router = express.Router();</code> <code>db</code> import Provides database connection <code>const db = require(\"../config/db\");</code> Controller import Accesses business logic functions <code>const controller = require(\"../src/controller\");</code> Middleware functions Implements access control <code>estaAutenticado</code>, <code>isAdmin</code>, <code>isRegistrado</code> Route handlers Defines endpoint behavior <code>router.get()</code>, <code>router.post()</code> Module export Makes router available to app <code>module.exports = router;</code> <p>Sources: routes/courses.js L1-L7</p> <p>routes/courses.js L187</p>"},{"location":"Adding-New-Routes/#step-2-define-middleware-functions","title":"Step 2: Define Middleware Functions","text":"<p>The system uses middleware functions for authentication and authorization. These can be defined locally in your route file or extracted to a shared middleware module.</p>"},{"location":"Adding-New-Routes/#authentication-middleware-pattern","title":"Authentication Middleware Pattern","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nSessionCheck[\"req.session.loggedin?\"]\nNextHandler[\"next()\"]\nRedirectLogin[\"res.redirect('/login')\"]\nRouteHandler[\"Route Handler Executes\"]\n\nRequest --&gt; SessionCheck\nSessionCheck --&gt; NextHandler\nSessionCheck --&gt; RedirectLogin\nNextHandler --&gt; RouteHandler</code></pre> <p>estaAutenticado Middleware: Verifies user is logged in</p> <p>Implementation pattern from routes/courses.js L8-L14</p> <p>:</p> <ul> <li>Checks <code>req.session.loggedin</code> property</li> <li>Calls <code>next()</code> if authenticated</li> <li>Redirects to <code>/login</code> if not authenticated</li> </ul> <p>isAdmin Middleware: Restricts access to administrators</p> <p>Implementation pattern from routes/courses.js L16-L24</p> <p>:</p> <ul> <li>Verifies <code>req.session.loggedin</code> is true</li> <li>Checks <code>req.session.rol === 'admin'</code></li> <li>Redirects to <code>/login</code> if unauthorized</li> </ul> <p>isRegistrado Middleware: Restricts access to registered users</p> <p>Implementation pattern from routes/courses.js L26-L33</p> <p>:</p> <ul> <li>Verifies <code>req.session.loggedin</code> is true</li> <li>Checks <code>req.session.rol === 'registrado'</code></li> <li>Redirects to <code>/login</code> if unauthorized</li> </ul>"},{"location":"Adding-New-Routes/#middleware-chain-application","title":"Middleware Chain Application","text":"<p>Middleware functions are applied as arguments before the route handler:</p> <p>The middleware chain executes left-to-right. Each must call <code>next()</code> for the chain to continue.</p> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L64</p> <p>routes/courses.js L70</p>"},{"location":"Adding-New-Routes/#step-3-implement-route-handlers","title":"Step 3: Implement Route Handlers","text":"<p>Route handlers process HTTP requests and generate responses. The system uses two primary patterns: inline handlers and controller functions.</p>"},{"location":"Adding-New-Routes/#inline-handler-pattern","title":"Inline Handler Pattern","text":"<p>Used for simple operations like rendering views or straightforward database queries:</p> <p>Example from routes/courses.js L73-L84</p> <p>Key aspects:</p> <ul> <li>Route parameters accessed via <code>req.params</code></li> <li>Query parameters via <code>req.query</code></li> <li>Request body via <code>req.body</code></li> <li>Database queries use parameterized statements (<code>?</code> placeholders)</li> <li>Views rendered with <code>res.render(viewName, dataObject)</code></li> </ul>"},{"location":"Adding-New-Routes/#controller-function-pattern","title":"Controller Function Pattern","text":"<p>Used for complex business logic or reusable operations:</p> <p>Examples from routes/courses.js L70</p> <p>routes/courses.js L103</p> <p>src/controller.js L4-L25</p>"},{"location":"Adding-New-Routes/#route-handler-response-types","title":"Route Handler Response Types","text":"Response Method Usage Example <code>res.render()</code> Render EJS template <code>res.render('courses', { cursos: results })</code> <code>res.redirect()</code> Redirect to another route <code>res.redirect('/courses')</code> <code>res.json()</code> Send JSON response <code>res.json({ success: true })</code> <code>res.status().send()</code> Send status with message <code>res.status(403).send('Access denied')</code> <p>Sources: routes/courses.js L35-L62</p> <p>routes/courses.js L87-L98</p> <p>src/controller.js L1-L53</p>"},{"location":"Adding-New-Routes/#step-4-mount-router-in-appjs","title":"Step 4: Mount Router in app.js","text":"<p>After creating your route file, register it with the Express application in <code>app.js</code>.</p>"},{"location":"Adding-New-Routes/#router-mounting-syntax","title":"Router Mounting Syntax","text":"<pre><code>flowchart TD\n\nAppJS[\"app.js\"]\nUseMethod[\"app.use()\"]\nPathPrefix[\"Path prefix&lt;br&gt;(optional)\"]\nRouterRequire[\"require('./routes/filename')\"]\nRouteFile[\"routes/filename.js\"]\nExportRouter[\"module.exports = router\"]\n\nAppJS --&gt; UseMethod\nUseMethod --&gt; PathPrefix\nUseMethod --&gt; RouterRequire\nRouterRequire --&gt; RouteFile\nRouteFile --&gt; ExportRouter</code></pre> <p>Current Route Mounting: app.js L28-L31</p> <pre><code>\n</code></pre>"},{"location":"Adding-New-Routes/#adding-a-new-router","title":"Adding a New Router","text":"<p>To add a new route module:</p> <ol> <li>Place it in the <code>routes/</code> directory: <code>routes/newfeature.js</code></li> <li>Add mounting statement in <code>app.js</code> after middleware setup but before server starts:</li> </ol> <pre><code>\n</code></pre>"},{"location":"Adding-New-Routes/#path-prefix-considerations","title":"Path Prefix Considerations","text":"<p>The first argument to <code>app.use()</code> defines a base path:</p> Mount Pattern Route in File Final URL <code>app.use(\"/\", router)</code> <code>router.get('/courses')</code> <code>/courses</code> <code>app.use(\"/api\", router)</code> <code>router.get('/courses')</code> <code>/api/courses</code> <code>app.use(\"/admin\", router)</code> <code>router.get('/dashboard')</code> <code>/admin/dashboard</code> <p>All routes in the current system use the root prefix <code>\"/\"</code> as shown in app.js L29-L31</p> <p>Sources: app.js L28-L31</p>"},{"location":"Adding-New-Routes/#step-5-connect-views","title":"Step 5: Connect Views","text":"<p>Route handlers typically render EJS templates located in the <code>views/</code> directory. The connection between routes and views follows specific patterns.</p>"},{"location":"Adding-New-Routes/#view-rendering-data-flow","title":"View Rendering Data Flow","text":""},{"location":"Adding-New-Routes/#rendering-pattern-examples","title":"Rendering Pattern Examples","text":"<p>List View with Data:</p> <p>From routes/courses.js L35-L62</p> <p>Form View with Pre-populated Data:</p> <p>From routes/courses.js L73-L84</p> <p>Simple View Render:</p> <p>From routes/courses.js L64-L66</p>"},{"location":"Adding-New-Routes/#common-data-passed-to-views","title":"Common Data Passed to Views","text":"Variable Purpose Source Example <code>login</code> Authentication status <code>req.session.loggedin</code> <code>true</code> or <code>false</code> <code>rol</code> User role <code>req.session.rol</code> <code>'publico'</code>, <code>'registrado'</code>, <code>'admin'</code> <code>usuario</code> User object <code>req.session.usuario</code> <code>{ id, nombre, email }</code> Data arrays Database results Query results <code>cursos: results</code> Single records Specific entity Query result <code>curso: results[0]</code> <p>Sources: routes/courses.js L44-L61</p> <p>routes/courses.js L73-L84</p> <p>routes/courses.js L152-L169</p>"},{"location":"Adding-New-Routes/#route-types-and-patterns","title":"Route Types and Patterns","text":"<p>The system implements several distinct route patterns based on functionality.</p>"},{"location":"Adding-New-Routes/#pattern-1-read-operations-get-routes","title":"Pattern 1: Read Operations (GET Routes)","text":"<p>Characteristics:</p> <ul> <li>Use <code>router.get()</code></li> <li>Query database for information</li> <li>Render EJS templates</li> <li>Pass data to views</li> </ul> <p>Examples: routes/courses.js L35-L62</p> <p>routes/courses.js L73-L84</p> <p>routes/courses.js L106-L114</p>"},{"location":"Adding-New-Routes/#pattern-2-write-operations-post-routes","title":"Pattern 2: Write Operations (POST Routes)","text":"<p>Characteristics:</p> <ul> <li>Use <code>router.post()</code></li> <li>Extract data from <code>req.body</code></li> <li>Perform database modifications</li> <li>Redirect after success (Post-Redirect-Get pattern)</li> </ul> <p>Examples: routes/courses.js L70</p> <p>routes/courses.js L103</p> <p>routes/courses.js L117-L149</p>"},{"location":"Adding-New-Routes/#pattern-3-two-step-confirmation","title":"Pattern 3: Two-Step Confirmation","text":"<p>Used for critical operations requiring user confirmation:</p> <p>From routes/courses.js L106-L149</p>"},{"location":"Adding-New-Routes/#pattern-4-delete-operations","title":"Pattern 4: Delete Operations","text":"<p>Simple GET routes for deletions with immediate redirection:</p> <p>From routes/courses.js L87-L98</p> <p>Sources: routes/courses.js L35-L187</p>"},{"location":"Adding-New-Routes/#best-practices-from-codebase","title":"Best Practices from Codebase","text":""},{"location":"Adding-New-Routes/#1-always-use-parameterized-queries","title":"1. Always Use Parameterized Queries","text":"<p>Correct (prevents SQL injection):</p> <p>From routes/courses.js L77</p> <p>src/controller.js L10</p>"},{"location":"Adding-New-Routes/#2-apply-middleware-in-correct-order","title":"2. Apply Middleware in Correct Order","text":"<p>The <code>estaAutenticado</code> middleware must execute before role-checking middleware because role-checking depends on session data.</p>"},{"location":"Adding-New-Routes/#3-handle-database-errors","title":"3. Handle Database Errors","text":"<p>From routes/courses.js L44-L54</p> <p>routes/courses.js L77-L83</p>"},{"location":"Adding-New-Routes/#4-use-post-redirect-get-pattern","title":"4. Use Post-Redirect-Get Pattern","text":"<p>After POST requests that modify data, redirect to a GET route:</p> <p>From src/controller.js L16-L23</p>"},{"location":"Adding-New-Routes/#5-extract-complex-logic-to-controllers","title":"5. Extract Complex Logic to Controllers","text":"<p>If a route handler exceeds 20 lines or contains reusable logic, move it to a controller:</p> <p>In route file:</p> <p>In controller file:</p> <p>From routes/courses.js L70</p> <p>src/controller.js L4-L25</p>"},{"location":"Adding-New-Routes/#6-consistent-session-data-access","title":"6. Consistent Session Data Access","text":"<p>From routes/courses.js L36</p> <p>routes/courses.js L49-L51</p> <p>Sources: routes/courses.js L1-L187</p> <p>src/controller.js L1-L53</p>"},{"location":"Adding-New-Routes/#complete-example-adding-a-new-feature","title":"Complete Example: Adding a New Feature","text":"<p>This example demonstrates adding a \"comments\" feature to the system.</p>"},{"location":"Adding-New-Routes/#step-by-step-implementation","title":"Step-by-Step Implementation","text":"<p>1. Create route file: <code>routes/comments.js</code></p> <pre><code>\n</code></pre> <p>2. Mount in app.js:</p> <pre><code>\n</code></pre> <p>3. Create view: <code>views/comentarios.ejs</code></p> <p>The view would display comments and include a form for authenticated users.</p>"},{"location":"Adding-New-Routes/#implementation-checklist","title":"Implementation Checklist","text":"Step Verification \u2713 Route file created in <code>routes/</code> File exists with proper structure \u2713 Dependencies imported <code>express</code>, <code>db</code>, controllers \u2713 Router instance created <code>const router = express.Router()</code> \u2713 Middleware defined Authentication/authorization functions \u2713 Routes implemented GET and POST handlers \u2713 Database queries use <code>?</code> placeholders SQL injection protection \u2713 Error handling included Check for errors in callbacks \u2713 Router exported <code>module.exports = router</code> \u2713 Mounted in app.js <code>app.use()</code> statement added \u2713 Views created EJS templates in <code>views/</code> \u2713 Routes tested Manual browser testing <p>Sources: routes/courses.js L1-L187</p> <p>app.js L28-L31</p>"},{"location":"Adding-New-Routes/#related-pages","title":"Related Pages","text":"<ul> <li>Routing System - Overview of the modular routing architecture</li> <li>API Reference - Complete endpoint documentation</li> <li>Database Operations - Database query patterns and best practices</li> <li>Security Considerations - Authentication and input validation</li> <li>Frontend Architecture - Creating and connecting EJS views</li> </ul>"},{"location":"Administrator-Dashboard/","title":"Administrator Dashboard","text":"<p>Relevant source files * routes/courses.js * views/adminperfil.ejs</p>"},{"location":"Administrator-Dashboard/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the administrator dashboard, a specialized profile page exclusive to users with the <code>admin</code> role. The dashboard provides system-wide statistics and quick navigation to course management functions.</p> <p>For information about the regular user profile page, see User Profile Page. For details on role-based access control implementation, see Role-Based Access Control.</p> <p>Sources: routes/courses.js L172-L185</p> <p>views/adminperfil.ejs L1-L29</p>"},{"location":"Administrator-Dashboard/#route-definition-and-access-control","title":"Route Definition and Access Control","text":"<p>The administrator dashboard is accessible at the <code>/admin/perfil</code> endpoint and is protected by a two-layer authentication middleware stack.</p>"},{"location":"Administrator-Dashboard/#endpoint-specification","title":"Endpoint Specification","text":"Property Value HTTP Method GET Route Path <code>/admin/perfil</code> Middleware Chain <code>estaAutenticado</code>, <code>isAdmin</code> Controller Function Inline handler View Template <code>adminPerfil.ejs</code>"},{"location":"Administrator-Dashboard/#middleware-stack","title":"Middleware Stack","text":"<p>The route employs two authentication middleware functions executed in sequence:</p> <ol> <li><code>estaAutenticado</code> routes/courses.js L8-L14  - Verifies that a user session exists and the user is logged in. Redirects to <code>/login</code> if authentication fails.</li> <li><code>isAdmin</code> routes/courses.js L16-L24  - Validates that the authenticated user has the <code>admin</code> role. Redirects to <code>/login</code> if the user does not have administrator privileges.</li> </ol> <p>Sources: routes/courses.js L172</p> <p>routes/courses.js L8-L24</p>"},{"location":"Administrator-Dashboard/#request-processing-flow","title":"Request Processing Flow","text":"<p>The following diagram illustrates the complete request flow from client browser to rendered dashboard, including middleware checks and database queries.</p>"},{"location":"Administrator-Dashboard/#diagram-administrator-dashboard-request-flow","title":"Diagram: Administrator Dashboard Request Flow","text":"<pre><code>sequenceDiagram\n  participant Client Browser\n  participant Express Router\n  participant estaAutenticado\n  participant middleware\n  participant isAdmin\n  participant Route Handler\n  participant /admin/perfil\n  participant MySQL Database\n  participant config/db\n  participant adminPerfil.ejs\n  participant Template\n\n  Client Browser-&gt;&gt;Express Router: \"GET /admin/perfil\"\n  Express Router-&gt;&gt;estaAutenticado: \"Check session\"\n  loop [\"Not Admin Role\"]\n    estaAutenticado-&gt;&gt;Client Browser: \"Redirect /login\"\n    estaAutenticado-&gt;&gt;isAdmin: \"Proceed\"\n    isAdmin-&gt;&gt;Client Browser: \"Redirect /login\"\n    isAdmin-&gt;&gt;Route Handler: \"Proceed\"\n    Route Handler-&gt;&gt;MySQL Database: \"SELECT COUNT(*) AS totalCursos\n    MySQL Database-&gt;&gt;Route Handler: FROM cursos\"\n    Route Handler-&gt;&gt;adminPerfil.ejs: \"results: [{totalCursos: N}]\"\n    adminPerfil.ejs-&gt;&gt;Client Browser: \"Render with data:\n  end</code></pre> <p>Sources: routes/courses.js L172-L185</p> <p>routes/courses.js L8-L24</p>"},{"location":"Administrator-Dashboard/#statistics-retrieval","title":"Statistics Retrieval","text":"<p>The dashboard executes a database query to retrieve system-wide course statistics for display to the administrator.</p>"},{"location":"Administrator-Dashboard/#query-execution","title":"Query Execution","text":"<p>The route handler executes the following SQL query:</p> <pre><code>SELECT COUNT(*) AS totalCursos FROM cursos\n</code></pre> <p>This query returns the total number of courses in the system, regardless of visibility status or enrollment count.</p>"},{"location":"Administrator-Dashboard/#database-operation-details","title":"Database Operation Details","text":"Aspect Implementation Query Type <code>SELECT COUNT(*)</code> aggregate function Table <code>cursos</code> Result Alias <code>totalCursos</code> Error Handling Logs error to console, renders with <code>totalCursos: 0</code> as fallback Connection Uses connection pool from <code>config/db</code> module <p>The query result is extracted from the first row of the results array: <code>results[0].totalCursos</code> routes/courses.js L182</p> <p>Sources: routes/courses.js L176-L182</p>"},{"location":"Administrator-Dashboard/#view-rendering-and-data-transfer","title":"View Rendering and Data Transfer","text":"<p>The dashboard view receives two data objects from the route handler.</p>"},{"location":"Administrator-Dashboard/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>flowchart TD\n\nUsuario[\"usuario:&lt;br&gt;{id, nombre, email, rol}\"]\nTotalCursos[\"totalCursos:&lt;br&gt;Integer count\"]\nSession[\"req.session&lt;br&gt;(Express Session)\"]\nHandler[\"Route Handler&lt;br&gt;routes/courses.js:172-185\"]\nDBQuery[\"db.query()&lt;br&gt;SELECT COUNT(*)\"]\nTemplate[\"adminPerfil.ejs&lt;br&gt;Template Rendering\"]\n\nSession --&gt; Handler\nDBQuery --&gt; Handler\n\nsubgraph ViewData [\"Data Passed to adminPerfil.ejs\"]\n    Usuario\n    TotalCursos\nend</code></pre>"},{"location":"Administrator-Dashboard/#template-data-object","title":"Template Data Object","text":"<p>The <code>res.render()</code> call passes the following data structure:</p> <pre><code>{\n  usuario: req.session.usuario,  // User object from session\n  totalCursos: results[0].totalCursos  // Course count from query\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>usuario</code> - Contains the administrator's user object from the session, including <code>id</code>, <code>nombre</code>, <code>email</code>, and <code>rol</code> properties</li> <li><code>totalCursos</code> - Integer representing the total number of courses in the database</li> </ul> <p>Sources: routes/courses.js L173-L183</p>"},{"location":"Administrator-Dashboard/#user-interface-components","title":"User Interface Components","text":"<p>The dashboard template renders a simple administrative interface with system statistics and navigation controls.</p>"},{"location":"Administrator-Dashboard/#template-structure","title":"Template Structure","text":"<p>The template follows the standard application layout pattern:</p> <ol> <li>Partial Includes views/adminperfil.ejs L1-L3  - Includes <code>partials/head</code> and <code>partials/header</code> for consistent page structure</li> <li>Welcome Section views/adminperfil.ejs L6  - Personalized greeting with administrator name</li> <li>Statistics Display views/adminperfil.ejs L8  - Course count metric</li> <li>Navigation Menu views/adminperfil.ejs L10-L21  - Primary navigation controls</li> </ol>"},{"location":"Administrator-Dashboard/#ui-element-reference","title":"UI Element Reference","text":"Element Location Description Page Title Line 6 Displays \"Bienvenido, {nombre} (Administrador)\" Course Count Line 8 Shows \"Total de cursos en el sistema: {totalCursos}\" Navigation Bar Lines 10-21 Contains logo and navigation links Hamburger Menu Lines 12-16 Mobile-responsive menu toggle button Course Management Link Line 18 Links to <code>/courses</code> for course administration Home Link Line 19 Links to <code>/</code> for application home page"},{"location":"Administrator-Dashboard/#responsive-navigation","title":"Responsive Navigation","text":"<p>The template includes JavaScript for mobile menu functionality views/adminperfil.ejs L23-L27</p> <p>:</p> <pre><code>function toggleMenu() {\n  document.getElementById('navLinks').classList.toggle('active');\n}\n</code></pre> <p>This function toggles the <code>active</code> class on the navigation links container, enabling responsive menu behavior on mobile devices.</p> <p>Sources: views/adminperfil.ejs L1-L29</p>"},{"location":"Administrator-Dashboard/#navigation-and-administrative-actions","title":"Navigation and Administrative Actions","text":"<p>The dashboard serves as a central hub for administrative tasks, providing direct navigation to key management interfaces.</p>"},{"location":"Administrator-Dashboard/#navigation-links","title":"Navigation Links","text":"Link Text Target URL Purpose Gestionar Cursos <code>/courses</code> Access course listing with admin privileges (create, edit, delete) Inicio <code>/</code> Return to application landing page"},{"location":"Administrator-Dashboard/#administrative-workflows","title":"Administrative Workflows","text":"<p>From the dashboard, administrators can navigate to the following management functions:</p> <ol> <li>Course Management routes/courses.js L35-L62  - View all courses in the system</li> <li>Course Creation routes/courses.js L64-L70  - Create new courses via <code>/create</code></li> <li>Course Editing routes/courses.js L73-L84  - Modify existing courses via <code>/edit/:id</code></li> <li>Course Deletion routes/courses.js L87-L98  - Remove courses via <code>/delete/:id</code></li> </ol> <p>All course management routes are protected by the same <code>estaAutenticado</code> and <code>isAdmin</code> middleware stack.</p> <p>Sources: views/adminperfil.ejs L18-L19</p> <p>routes/courses.js L64-L104</p>"},{"location":"Administrator-Dashboard/#comparison-with-regular-user-profile","title":"Comparison with Regular User Profile","text":"<p>The following table highlights the differences between the administrator dashboard and the regular user profile page:</p> Feature Administrator Dashboard User Profile Route <code>/admin/perfil</code> <code>/perfil</code> Role Requirement <code>admin</code> <code>registrado</code> Middleware <code>isAdmin</code> <code>isRegistrado</code> Primary Data System statistics Enrolled courses list Database Query <code>SELECT COUNT(*) FROM cursos</code> <code>SELECT c.* FROM cursos c JOIN inscripciones...</code> Navigation Links Course management Course enrollment Purpose System administration Personal enrollment tracking"},{"location":"Administrator-Dashboard/#route-middleware-comparison-diagram","title":"Route Middleware Comparison Diagram","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nAuth[\"estaAutenticado\"]\nAdminCheck[\"isAdmin&lt;br&gt;routes/courses.js:16-24\"]\nRegCheck[\"isRegistrado&lt;br&gt;routes/courses.js:26-33\"]\nAdminRoute[\"/admin/perfil&lt;br&gt;routes/courses.js:172\"]\nUserRoute[\"/perfil&lt;br&gt;routes/courses.js:152\"]\nAdminView[\"adminPerfil.ejs&lt;br&gt;Statistics View\"]\nUserView[\"perfil.ejs&lt;br&gt;Enrollment View\"]\n\nRequest --&gt; Auth\nAuth --&gt; AdminCheck\nAuth --&gt; RegCheck\nAdminCheck --&gt; AdminRoute\nRegCheck --&gt; UserRoute\nAdminRoute --&gt; AdminView\nUserRoute --&gt; UserView</code></pre> <p>Sources: routes/courses.js L152-L185</p> <p>routes/courses.js L16-L33</p>"},{"location":"Administrator-Dashboard/#error-handling","title":"Error Handling","text":"<p>The route implements basic error handling for database query failures.</p>"},{"location":"Administrator-Dashboard/#error-flow","title":"Error Flow","text":"<p>When the database query fails:</p> <ol> <li>Error is logged to console: <code>console.error(err)</code> routes/courses.js L178</li> <li>View is rendered with fallback data: <code>totalCursos: 0</code> routes/courses.js L179</li> <li>User sees dashboard with zero course count instead of application crash</li> </ol> <p>This graceful degradation ensures the administrator can still access the dashboard interface even if statistics cannot be retrieved.</p> <p>Sources: routes/courses.js L177-L180</p>"},{"location":"Administrator-Dashboard/#session-data-requirements","title":"Session Data Requirements","text":"<p>The dashboard relies on session data populated during the login process.</p>"},{"location":"Administrator-Dashboard/#required-session-properties","title":"Required Session Properties","text":"<p>The route handler expects the following session structure:</p> <pre><code>req.session = {\n  loggedin: true,\n  rol: 'admin',\n  usuario: {\n    id: Number,\n    nombre: String,\n    email: String,\n    rol: 'admin'\n  }\n}\n</code></pre> <p>These properties are set by the authentication system during login. See User Login for session initialization details.</p> <p>Sources: routes/courses.js L173</p> <p>routes/courses.js L8-L24</p>"},{"location":"Administrator-Dashboard/#integration-points","title":"Integration Points","text":"<p>The administrator dashboard integrates with the following system components:</p>"},{"location":"Administrator-Dashboard/#component-integration-map","title":"Component Integration Map","text":"<pre><code>flowchart TD\n\nDashboard[\"Administrator Dashboard&lt;br&gt;/admin/perfil\"]\nSession[\"express-session&lt;br&gt;Session Store\"]\nAuthMW[\"estaAutenticado&lt;br&gt;Middleware\"]\nRoleMW[\"isAdmin&lt;br&gt;Middleware\"]\nDBConfig[\"config/db.js&lt;br&gt;Connection Pool\"]\nCursosTable[\"cursos Table&lt;br&gt;MySQL\"]\nCoursesList[\"/courses&lt;br&gt;Course Listing\"]\nCreateCourse[\"/create&lt;br&gt;Course Creation\"]\nEditCourse[\"/edit/:id&lt;br&gt;Course Editing\"]\nDeleteCourse[\"/delete/:id&lt;br&gt;Course Deletion\"]\nTemplate[\"adminPerfil.ejs&lt;br&gt;Template\"]\nPartials[\"Shared Partials&lt;br&gt;head, header\"]\n\nRoleMW --&gt; Dashboard\nDashboard --&gt; DBConfig\nDashboard --&gt; Template\nDashboard --&gt; CoursesList\n\nsubgraph subGraph3 [\"View Layer\"]\n    Template\n    Partials\n    Template --&gt; Partials\nend\n\nsubgraph subGraph2 [\"Course Management\"]\n    CoursesList\n    CreateCourse\n    EditCourse\n    DeleteCourse\n    CoursesList --&gt; CreateCourse\n    CoursesList --&gt; EditCourse\n    CoursesList --&gt; DeleteCourse\nend\n\nsubgraph subGraph1 [\"Database Layer\"]\n    DBConfig\n    CursosTable\n    DBConfig --&gt; CursosTable\nend\n\nsubgraph subGraph0 [\"Authentication System\"]\n    Session\n    AuthMW\n    RoleMW\n    Session --&gt; AuthMW\n    AuthMW --&gt; RoleMW\nend</code></pre> <p>Sources: routes/courses.js L172-L185</p> <p>views/adminperfil.ejs L1-L29</p>"},{"location":"Application-Entry-Point/","title":"Application Entry Point","text":"<p>Relevant source files * app.js * package.json</p>"},{"location":"Application-Entry-Point/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes <code>app.js</code>, the main entry point and server initialization file for the course management application. It covers the Express application configuration, middleware pipeline setup, session management initialization, static file serving, view engine configuration, and route mounting.</p> <p>For detailed information about individual routes and their handlers, see Routing System. For authentication middleware implementation, see Authentication &amp; Authorization. For database connection setup, see Database Architecture.</p>"},{"location":"Application-Entry-Point/#overview","title":"Overview","text":"<p>The <code>app.js</code> file serves as the central configuration hub for the Express.js application. It initializes the Express server, configures the middleware pipeline, establishes session management, sets up the view engine, and mounts all route handlers. However, it notably does not start the HTTP server itself (the <code>app.listen()</code> call is commented out at app.js L15-L17</p> <p>).</p> <p>Sources: app.js L1-L41</p>"},{"location":"Application-Entry-Point/#application-initialization-sequence","title":"Application Initialization Sequence","text":"<p>The following diagram illustrates the initialization sequence when <code>app.js</code> is loaded:</p> <pre><code>flowchart TD\n\nStart[\"Node.js loads app.js\"]\nImportExpress[\"require('express')\"]\nCreateApp[\"express() creates app instance\"]\nLoadEnv[\"dotenv.config() loads environment variables\"]\nImportSession[\"require('express-session')\"]\nConfigSession[\"app.use(session()) configures session middleware\"]\nConfigStatic[\"app.use('/resources', express.static()) serves static files\"]\nSetViewEngine[\"app.set('view engine', 'ejs') configures templating\"]\nBodyParsers[\"app.use() adds body parsing middleware\"]\nMountRoutes[\"app.use() mounts route handlers\"]\nExportApp[\"module.exports = app (implicit)\"]\nEnd[\"Application ready for server.listen()\"]\nNote1[\"Note: app.listen() is commented out&lt;br&gt;Server must be started elsewhere\"]\n\nStart --&gt; ImportExpress\nImportExpress --&gt; CreateApp\nCreateApp --&gt; LoadEnv\nLoadEnv --&gt; ImportSession\nImportSession --&gt; ConfigSession\nConfigSession --&gt; ConfigStatic\nConfigStatic --&gt; SetViewEngine\nSetViewEngine --&gt; BodyParsers\nBodyParsers --&gt; MountRoutes\nMountRoutes --&gt; ExportApp\nExportApp --&gt; End\nEnd --&gt; Note1</code></pre> <p>Initialization Steps:</p> <ol> <li>Express Framework Import (app.js L1-L2 ): Imports Express and instantiates the application object</li> <li>Environment Configuration (app.js L3 ): Loads environment variables from <code>./env/.env</code> using dotenv</li> <li>Session Middleware (app.js L4-L13 ): Configures express-session for user session management</li> <li>Static File Serving (app.js L19 ): Mounts static file middleware for the <code>/public</code> directory</li> <li>View Engine Setup (app.js L21 ): Configures EJS as the templating engine</li> <li>Body Parsing (app.js L25-L26 ): Enables URL-encoded and JSON body parsing</li> <li>Route Mounting (app.js L29-L31 ): Mounts three route handler modules</li> </ol> <p>Sources: app.js L1-L31</p> <p>package.json L5-L8</p>"},{"location":"Application-Entry-Point/#middleware-pipeline","title":"Middleware Pipeline","text":"<p>The middleware pipeline processes every incoming HTTP request in a specific order. The sequence is critical for proper application functionality:</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nSession[\"express-session&lt;br&gt;Creates/restores session\"]\nStatic[\"Static file?&lt;br&gt;/resources/*\"]\nServeStatic[\"express.static&lt;br&gt;Serve from /public\"]\nBodyParse[\"Body Parsing&lt;br&gt;express.urlencoded + express.json\"]\nRouter[\"Route Handlers&lt;br&gt;routes/index.js&lt;br&gt;routes/auth.js&lt;br&gt;routes/courses.js\"]\nResponse[\"HTTP Response\"]\n\nRequest --&gt; Session\nSession --&gt; Static\nStatic --&gt; ServeStatic\nStatic --&gt; BodyParse\nBodyParse --&gt; Router\nRouter --&gt; Response\nServeStatic --&gt; Response</code></pre>"},{"location":"Application-Entry-Point/#middleware-configuration-details","title":"Middleware Configuration Details","text":"Middleware Purpose Configuration Source <code>express-session</code> Session management Secret: \"secret\"resave: falsesaveUninitialized: false app.js L6-L13 <code>express.static</code> Static file serving Mount point: <code>/resources</code>Directory: <code>/public</code> app.js L19 <code>express.urlencoded</code> Parse URL-encoded bodies extended: true app.js L25 <code>express.json</code> Parse JSON bodies Default configuration app.js L26 <p>Sources: app.js L6-L26</p>"},{"location":"Application-Entry-Point/#session-configuration","title":"Session Configuration","text":"<p>Session management is configured using <code>express-session</code> with the following settings:</p> <pre><code>flowchart TD\n\nSessionConfig[\"express-session Configuration\"]\nSecret[\"secret: 'secret'&lt;br&gt;Session signing key\"]\nResave[\"resave: false&lt;br&gt;Don't save unchanged sessions\"]\nSaveUninitialized[\"saveUninitialized: false&lt;br&gt;Don't create sessions until data stored\"]\nNote[\"\u26a0\ufe0f Note: 'secret' should be moved&lt;br&gt;to environment variable for production\"]\n\nSessionConfig --&gt; Secret\nSessionConfig --&gt; Resave\nSessionConfig --&gt; SaveUninitialized\nSecret --&gt; Note</code></pre> <p>Configuration Properties:</p> <ul> <li>secret (app.js L8 ): Set to hardcoded string <code>\"secret\"</code>. This should ideally be loaded from environment variables for production security.</li> <li>resave (app.js L9 ): Set to <code>false</code> to prevent unnecessary session saves when session data hasn't changed.</li> <li>saveUninitialized (app.js L10 ): Set to <code>false</code> to prevent creating session cookies for unauthenticated users.</li> </ul> <p>Security Note: The session secret is currently hardcoded. For production deployments, this should be moved to an environment variable (e.g., <code>process.env.SESSION_SECRET</code>).</p> <p>Sources: app.js L4-L13</p>"},{"location":"Application-Entry-Point/#static-file-serving","title":"Static File Serving","text":"<p>Static assets (CSS, images, JavaScript) are served through Express's built-in static file middleware:</p> <pre><code>app.use(\"/resources\", express.static(__dirname + \"/public\"));\n</code></pre> <p>Configuration Details:</p> Property Value Description URL Path <code>/resources</code> Client-side URL prefix for static files File System Path <code>__dirname + \"/public\"</code> Server-side directory containing static files Example Mapping <code>/resources/css/style.css</code> \u2192 <code>/public/css/style.css</code> URL to file system translation <p>This means that a file at <code>/public/css/index.css</code> is accessible in the browser at <code>http://localhost:PORT/resources/css/index.css</code>.</p> <p>Sources: app.js L19</p>"},{"location":"Application-Entry-Point/#view-engine-configuration","title":"View Engine Configuration","text":"<p>The application uses EJS (Embedded JavaScript) as its templating engine:</p> <pre><code>app.set('view engine', 'ejs');\n</code></pre> <p>EJS Configuration:</p> <ul> <li>Template Engine: EJS version 3.1.10 (from package.json L18 )</li> <li>Views Directory: Defaults to <code>./views/</code> (Express convention)</li> <li>File Extension: <code>.ejs</code> files are automatically recognized</li> <li>Rendering: Controllers call <code>res.render('templateName', data)</code> to render views</li> </ul> <p>The commented-out line at app.js L22</p> <p>shows that the views directory was considered for explicit configuration, but the default is being used instead.</p> <p>Sources: app.js L21-L22</p> <p>package.json L18</p>"},{"location":"Application-Entry-Point/#route-mounting","title":"Route Mounting","text":"<p>The application uses a modular routing architecture where route handlers are separated into distinct files and mounted onto the Express application:</p> <pre><code>flowchart TD\n\nApp[\"Express App Instance&lt;br&gt;(app.js)\"]\nIndexRouter[\"routes/index.js&lt;br&gt;Landing page &amp; static routes\"]\nAuthRouter[\"routes/auth.js&lt;br&gt;Authentication routes\"]\nCoursesRouter[\"routes/courses.js&lt;br&gt;Course management routes\"]\nHome[\"GET /&lt;br&gt;Home page\"]\nLogin[\"GET/POST /login\"]\nRegister[\"GET/POST /register\"]\nLogout[\"POST /logout\"]\nCourses[\"GET /courses&lt;br&gt;Course listing\"]\nCreate[\"GET/POST /create&lt;br&gt;Create course\"]\nEdit[\"GET /edit/:id&lt;br&gt;Edit course\"]\nUpdate[\"POST /update&lt;br&gt;Update course\"]\nDelete[\"GET /delete/:id&lt;br&gt;Delete course\"]\nEnroll[\"GET/POST /inscribir/:id&lt;br&gt;Enrollment\"]\nProfile[\"GET /perfil&lt;br&gt;User profile\"]\nAdminProfile[\"GET /admin/perfil&lt;br&gt;Admin dashboard\"]\n\nApp --&gt; IndexRouter\nApp --&gt; AuthRouter\nApp --&gt; CoursesRouter\nIndexRouter --&gt; Home\nAuthRouter --&gt; Login\nAuthRouter --&gt; Register\nAuthRouter --&gt; Logout\nCoursesRouter --&gt; Courses\nCoursesRouter --&gt; Create\nCoursesRouter --&gt; Edit\nCoursesRouter --&gt; Update\nCoursesRouter --&gt; Delete\nCoursesRouter --&gt; Enroll\nCoursesRouter --&gt; Profile\nCoursesRouter --&gt; AdminProfile</code></pre> <p>Route Mounting Code:</p> <pre><code>app.use(\"/\", require(\"./routes/index\"));     // Line 29\napp.use(\"/\", require(\"./routes/auth\"));      // Line 30\napp.use(\"/\", require(\"./routes/courses\"));   // Line 31\n</code></pre> <p>All three router modules are mounted at the root path (<code>\"/\"</code>). Each router module exports an Express Router instance that defines specific endpoints.</p> <p>Sources: app.js L29-L31</p>"},{"location":"Application-Entry-Point/#commented-code-analysis","title":"Commented Code Analysis","text":"<p>Several lines in <code>app.js</code> are commented out, indicating features that were considered or may be used in alternative configurations:</p>"},{"location":"Application-Entry-Point/#commented-server-listener","title":"Commented Server Listener","text":"<pre><code>// Lines 15-17 (commented)\n//app.listen(4000, () =&gt; { \n//    console.log(\"Servidor corriendo en http://localhost:4000\");\n//});\n</code></pre> <p>Analysis: The HTTP server startup is commented out. This suggests either:</p> <ol> <li>The server is started in a separate file (e.g., <code>server.js</code> or <code>index.js</code>)</li> <li>The application is deployed using a process manager that handles server startup</li> <li>The startup code was moved for testing purposes</li> </ol>"},{"location":"Application-Entry-Point/#commented-global-session-middleware","title":"Commented Global Session Middleware","text":"<pre><code>// Lines 33-39 (commented)\n//app.use((req, res, next) =&gt; {\n//  res.locals.user = req.session?.usuario || null;\n//  res.locals.rol = req.session?.rol || 'publico';\n//  res.locals.login = !!req.session?.loggedin;\n//  next();\n//});\n</code></pre> <p>Analysis: This middleware would make session data globally available to all EJS templates via <code>res.locals</code>. It's currently disabled, which means:</p> <ul> <li>Views must explicitly receive session data through controller render calls</li> <li>Authentication state checking happens in individual route handlers</li> <li>Each route must manually pass user/role information to templates</li> </ul> <p>Sources: app.js L15-L17</p> <p>app.js L33-L39</p>"},{"location":"Application-Entry-Point/#environment-variable-configuration","title":"Environment Variable Configuration","text":"<p>Environment variables are loaded using the <code>dotenv</code> package:</p> <pre><code>require(\"dotenv\").config({ path: \"./env/.env\" });\n</code></pre> <p>Configuration Details:</p> Property Value Description Package dotenv 17.2.1 Environment variable loader Config Path <code>./env/.env</code> Non-standard location (typically <code>.env</code> at root) Loading Time During app initialization Before any middleware or routes are configured <p>Environment Variables Expected:</p> <ul> <li>Database connection parameters (referenced in <code>config/db.js</code>)</li> <li>Potentially JWT secrets, API keys, etc.</li> </ul> <p>The non-standard path <code>./env/.env</code> suggests the environment file is stored in a subdirectory rather than the project root.</p> <p>Sources: app.js L3</p> <p>package.json L17</p>"},{"location":"Application-Entry-Point/#module-dependencies","title":"Module Dependencies","text":"<p>The following diagram shows the direct dependencies imported by <code>app.js</code>:</p> <pre><code>flowchart TD\n\nAppJS[\"app.js&lt;br&gt;Main Application Entry Point\"]\nExpress[\"Unsupported markdown: link\"]\nDotenv[\"Unsupported markdown: link\"]\nExpressSession[\"Unsupported markdown: link\"]\nIndexRoute[\"./routes/index.js\"]\nAuthRoute[\"./routes/auth.js\"]\nCoursesRoute[\"./routes/courses.js\"]\nEnvFile[\"./env/.env\"]\n\nAppJS --&gt; Express\nAppJS --&gt; Dotenv\nAppJS --&gt; ExpressSession\nAppJS --&gt; IndexRoute\nAppJS --&gt; AuthRoute\nAppJS --&gt; CoursesRoute\nDotenv --&gt; EnvFile\n\nsubgraph Environment [\"Environment\"]\n    EnvFile\nend\n\nsubgraph subGraph1 [\"Route Modules\"]\n    IndexRoute\n    AuthRoute\n    CoursesRoute\nend\n\nsubgraph subGraph0 [\"NPM Packages\"]\n    Express\n    Dotenv\n    ExpressSession\nend</code></pre> <p>Direct Dependencies:</p> <ol> <li>express (app.js L1 ): Core web framework</li> <li>dotenv (app.js L3 ): Environment configuration</li> <li>express-session (app.js L4 ): Session management</li> <li>./routes/index (app.js L29 ): Landing page routes</li> <li>./routes/auth (app.js L30 ): Authentication routes</li> <li>./routes/courses (app.js L31 ): Course management routes</li> </ol> <p>Indirect Dependencies (used by route modules, not directly by <code>app.js</code>):</p> <ul> <li>bcryptjs (password hashing)</li> <li>jsonwebtoken (token generation)</li> <li>express-validator (input validation)</li> <li>mysql2 (database driver)</li> </ul> <p>Sources: app.js L1-L31</p> <p>package.json L13-L25</p>"},{"location":"Application-Entry-Point/#execution-flow-summary","title":"Execution Flow Summary","text":"<p>The complete execution flow when the application starts:</p> <pre><code>sequenceDiagram\n  participant Node.js Runtime\n  participant app.js\n  participant Express Framework\n  participant dotenv\n  participant express-session\n  participant Route Modules\n\n  Node.js Runtime-&gt;&gt;app.js: Execute app.js\n  app.js-&gt;&gt;Express Framework: require('express')\n  app.js-&gt;&gt;Express Framework: express() creates app\n  app.js-&gt;&gt;dotenv: config({ path: './env/.env' })\n  dotenv--&gt;&gt;app.js: Environment variables loaded\n  app.js-&gt;&gt;express-session: require('express-session')\n  app.js-&gt;&gt;Express Framework: app.use(session(...))\n  app.js-&gt;&gt;Express Framework: app.use('/resources', static(...))\n  app.js-&gt;&gt;Express Framework: app.set('view engine', 'ejs')\n  app.js-&gt;&gt;Express Framework: app.use(express.urlencoded(...))\n  app.js-&gt;&gt;Express Framework: app.use(express.json())\n  app.js-&gt;&gt;Route Modules: require('./routes/index')\n  app.js-&gt;&gt;Express Framework: app.use('/', indexRouter)\n  app.js-&gt;&gt;Route Modules: require('./routes/auth')\n  app.js-&gt;&gt;Express Framework: app.use('/', authRouter)\n  app.js-&gt;&gt;Route Modules: require('./routes/courses')\n  app.js-&gt;&gt;Express Framework: app.use('/', coursesRouter)\n  app.js--&gt;&gt;Node.js Runtime: Export configured app instance\n  note over Node.js Runtime,app.js: app.listen() must be called</code></pre> <p>Key Takeaways:</p> <ol> <li>Synchronous Initialization: All configuration is synchronous and completes during module load</li> <li>Middleware Order Matters: Session management is configured before routes to ensure session availability</li> <li>Route Modularity: Routes are separated into logical modules for maintainability</li> <li>No Server Start: The configured app must be started by another module or script</li> </ol> <p>Sources: app.js L1-L41</p>"},{"location":"Application-Entry-Point/#integration-with-packagejson","title":"Integration with Package.json","text":"<p>The <code>package.json</code> file defines <code>app.js</code> as the main entry point:</p> <pre><code>{\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  }\n}\n</code></pre> <p>This configuration means:</p> <ul> <li>Running <code>npm start</code> executes <code>node app.js</code></li> <li>The application can be imported as a module if needed</li> <li><code>app.js</code> is the conventional entry point for the application</li> </ul> <p>Sources: package.json L5-L8</p>"},{"location":"Architecture-Overview/","title":"Architecture Overview","text":"<p>Relevant source files * app.js * config/db.js * package.json</p>"},{"location":"Architecture-Overview/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a comprehensive overview of the system's architecture, explaining how the Express.js application is structured, how requests flow through the middleware pipeline, and how the three-tier design pattern organizes the codebase. This page focuses on the high-level architectural patterns and component interactions. For detailed information about specific subsystems, refer to:</p> <ul> <li>Technology stack and dependencies: Technology Stack</li> <li>Main server configuration: Application Entry Point</li> <li>Database schema and connection management: Database Architecture</li> <li>Route organization and middleware chains: Routing System</li> </ul>"},{"location":"Architecture-Overview/#architectural-pattern","title":"Architectural Pattern","text":"<p>The application implements a three-tier architecture separating concerns into distinct layers:</p> Layer Responsibility Key Components Presentation Layer User interface rendering and static assets EJS templates (<code>views/*.ejs</code>), CSS stylesheets (<code>public/css/*.css</code>), client-side resources (<code>public/resources/</code>) Application Layer Business logic, request handling, authentication Express routes (<code>routes/*.js</code>), controllers (<code>src/*.js</code>), middleware stack Data Layer Data persistence and retrieval MySQL database, connection module (<code>config/db.js</code>) <p>This separation ensures maintainability by isolating UI concerns from business logic and data access logic.</p> <p>Sources: High-level system architecture diagrams, app.js L1-L41</p> <p>config/db.js L1-L19</p>"},{"location":"Architecture-Overview/#application-layer-structure","title":"Application Layer Structure","text":""},{"location":"Architecture-Overview/#express-application-initialization","title":"Express Application Initialization","text":"<p>The Express application is initialized in <code>app.js</code>, which serves as the central orchestrator for all middleware, routes, and server configuration.</p> <pre><code>flowchart TD\n\nExpress[\"express()\"]\nDotEnv[\"dotenv.config()\"]\nSessionMW[\"session middleware\"]\nBodyParser[\"Body parsing middleware\"]\nStaticFiles[\"Static file middleware\"]\nViewEngine[\"EJS view engine\"]\nRoutes[\"Route mounting\"]\nIndexRoutes[\"routes/index.js\"]\nAuthRoutes[\"routes/auth.js\"]\nCoursesRoutes[\"routes/courses.js\"]\n\nRoutes --&gt; IndexRoutes\nRoutes --&gt; AuthRoutes\nRoutes --&gt; CoursesRoutes\n\nsubgraph subGraph0 [\"app.js - Application Bootstrap\"]\n    Express\n    DotEnv\n    SessionMW\n    BodyParser\n    StaticFiles\n    ViewEngine\n    Routes\n    Express --&gt; DotEnv\n    DotEnv --&gt; SessionMW\n    SessionMW --&gt; StaticFiles\n    StaticFiles --&gt; ViewEngine\n    ViewEngine --&gt; BodyParser\n    BodyParser --&gt; Routes\nend</code></pre> <p>Diagram: Express Application Bootstrap Sequence</p> <p>The initialization sequence in app.js L1-L31</p> <p>follows this order:</p> <ol> <li>Line 1-2: Express framework initialization via <code>const app = express()</code></li> <li>Line 3: Environment configuration loading from <code>./env/.env</code> using <code>dotenv</code></li> <li>Line 4-13: Session middleware configuration with <code>express-session</code></li> <li>Line 19: Static resource serving from <code>/public</code> directory mounted at <code>/resources</code> endpoint</li> <li>Line 21: EJS templating engine configuration via <code>app.set('view engine', 'ejs')</code></li> <li>Line 25-26: Request body parsing for URL-encoded forms and JSON payloads</li> <li>Line 29-31: Route module mounting for index, authentication, and course management</li> </ol> <p>Sources: app.js L1-L31</p>"},{"location":"Architecture-Overview/#three-tier-architecture-implementation","title":"Three-Tier Architecture Implementation","text":"<pre><code>flowchart TD\n\nBrowser[\"Web Browser\"]\nEJSViews[\"views/*.ejs&lt;br&gt;EJS Templates\"]\nCSSFiles[\"public/css/*.css&lt;br&gt;Stylesheets\"]\nResources[\"public/resources/&lt;br&gt;Static Assets\"]\nAppJS[\"app.js&lt;br&gt;Express Server\"]\nIndexJS[\"routes/index.js\"]\nAuthJS[\"routes/auth.js\"]\nCoursesJS[\"routes/courses.js\"]\nControllerJS[\"src/controller.js&lt;br&gt;Course CRUD\"]\nCursoControllerJS[\"src/cursoController.js&lt;br&gt;Enrollment Logic\"]\nSessionMid[\"express-session\"]\nAuthMid[\"Authentication&lt;br&gt;bcryptjs + JWT\"]\nValidatorMid[\"express-validator\"]\nDBConfigJS[\"config/db.js&lt;br&gt;Connection Pool\"]\nMySQLDB[\"MySQL Database&lt;br&gt;usuarios&lt;br&gt;cursos&lt;br&gt;inscripciones\"]\n\nBrowser --&gt; AppJS\nAppJS --&gt; EJSViews\nAppJS --&gt; CSSFiles\nAppJS --&gt; Resources\nIndexJS --&gt; EJSViews\nAuthJS --&gt; EJSViews\nCoursesJS --&gt; EJSViews\nAuthJS --&gt; DBConfigJS\nControllerJS --&gt; DBConfigJS\nCursoControllerJS --&gt; DBConfigJS\n\nsubgraph subGraph5 [\"Data Tier\"]\n    DBConfigJS\n    MySQLDB\n    DBConfigJS --&gt; MySQLDB\nend\n\nsubgraph subGraph4 [\"Application Tier\"]\n    AppJS\n    AppJS --&gt; SessionMid\n    ValidatorMid --&gt; IndexJS\n    ValidatorMid --&gt; AuthJS\n    ValidatorMid --&gt; CoursesJS\n    CoursesJS --&gt; ControllerJS\n    CoursesJS --&gt; CursoControllerJS\n\nsubgraph subGraph3 [\"Middleware Stack\"]\n    SessionMid\n    AuthMid\n    ValidatorMid\n    SessionMid --&gt; AuthMid\n    AuthMid --&gt; ValidatorMid\nend\n\nsubgraph Controllers [\"Controllers\"]\n    ControllerJS\n    CursoControllerJS\nend\n\nsubgraph Routes [\"Routes\"]\n    IndexJS\n    AuthJS\n    CoursesJS\nend\nend\n\nsubgraph subGraph0 [\"Presentation Tier\"]\n    Browser\n    EJSViews\n    CSSFiles\n    Resources\nend</code></pre> <p>Diagram: Three-Tier Architecture with Code Entities</p>"},{"location":"Architecture-Overview/#presentation-tier","title":"Presentation Tier","text":"<p>The presentation tier handles all user-facing content:</p> <ul> <li>Templates: EJS files in <code>views/</code> directory render dynamic HTML based on server-side data</li> <li>Stylesheets: Page-specific CSS files in <code>public/css/</code> provide styling</li> <li>Static Resources: Images, fonts, and other assets served from <code>public/resources/</code></li> </ul>"},{"location":"Architecture-Overview/#application-tier","title":"Application Tier","text":"<p>The application tier contains the core business logic:</p> <ul> <li>Entry Point: app.js L1-L41  initializes the Express server and configures middleware</li> <li>Route Handlers: Modular route files in <code>routes/</code> directory map HTTP endpoints to controller logic</li> <li>Controllers: Business logic modules in <code>src/</code> directory handle CRUD operations and enrollment logic</li> <li>Middleware: Authentication, validation, and session management protect routes and sanitize input</li> </ul>"},{"location":"Architecture-Overview/#data-tier","title":"Data Tier","text":"<p>The data tier manages persistence:</p> <ul> <li>Connection Module: config/db.js L1-L19  creates and exports a MySQL connection using <code>mysql2</code></li> <li>Database: MySQL instance stores three tables (<code>usuarios</code>, <code>cursos</code>, <code>inscripciones</code>)</li> </ul> <p>Sources: app.js L1-L41</p> <p>config/db.js L1-L19</p> <p>High-level system architecture diagrams</p>"},{"location":"Architecture-Overview/#request-processing-flow","title":"Request Processing Flow","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant app.js\n  participant express-session\n  participant routes/*\n  participant src/*\n  participant config/db.js\n  participant MySQL Database\n  participant views/*.ejs\n\n  Browser-&gt;&gt;app.js: \"HTTP Request\"\n  app.js-&gt;&gt;express-session: \"Load session data\"\n  express-session--&gt;&gt;app.js: \"Session context\"\n  loop [\"Read Operation (GET)\"]\n    app.js-&gt;&gt;Browser: \"Serve from public/\"\n    app.js-&gt;&gt;routes/*: \"Route to handler\"\n    routes/*-&gt;&gt;config/db.js: \"SELECT query\"\n    config/db.js-&gt;&gt;MySQL Database: \"Execute query\"\n    MySQL Database--&gt;&gt;config/db.js: \"Result set\"\n    config/db.js--&gt;&gt;routes/*: \"Data rows\"\n    routes/*-&gt;&gt;views/*.ejs: \"res.render(view, data)\"\n    views/*.ejs--&gt;&gt;Browser: \"HTML response\"\n    routes/*-&gt;&gt;src/*: \"Delegate to controller\"\n    src/*-&gt;&gt;config/db.js: \"INSERT/UPDATE/DELETE\"\n    config/db.js-&gt;&gt;MySQL Database: \"Execute statement\"\n    MySQL Database--&gt;&gt;config/db.js: \"Confirmation\"\n    config/db.js--&gt;&gt;src/*: \"Success/Error\"\n    src/*-&gt;&gt;routes/*: \"Operation result\"\n    routes/*-&gt;&gt;Browser: \"res.redirect(url)\"\n  end</code></pre> <p>Diagram: HTTP Request Processing Sequence</p>"},{"location":"Architecture-Overview/#request-lifecycle","title":"Request Lifecycle","text":"<ol> <li>Browser to Express: Client sends HTTP request to the server</li> <li>Session Loading: app.js L6-L13  processes session data via <code>express-session</code> middleware</li> <li>Static vs Dynamic: app.js L19  serves static files from <code>/resources/*</code> directly; dynamic routes proceed to handlers</li> <li>Route Matching: app.js L29-L31  routes request to appropriate handler in <code>routes/index.js</code>, <code>routes/auth.js</code>, or <code>routes/courses.js</code></li> <li>Database Operations: Routes interact with database via config/db.js  connection</li> <li>Response Generation: * GET requests render EJS templates with data * POST requests redirect after database modification (Post-Redirect-Get pattern)</li> </ol> <p>Sources: app.js L6-L31</p> <p>config/db.js L1-L19</p> <p>HTTP request flow diagram</p>"},{"location":"Architecture-Overview/#middleware-pipeline","title":"Middleware Pipeline","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nSession[\"express-session&lt;br&gt;Line 6-13\"]\nStatic[\"Static File Check&lt;br&gt;Line 19\"]\nBodyParser[\"express.urlencoded&lt;br&gt;express.json&lt;br&gt;Lines 25-26\"]\nRouter[\"Route Matching&lt;br&gt;Lines 29-31\"]\nAuthMiddleware[\"Authentication&lt;br&gt;Middleware\"]\nValidatorMiddleware[\"express-validator&lt;br&gt;Middleware\"]\nHandler[\"Route Handler\"]\nResponse[\"HTTP Response\"]\n\nRequest --&gt; Session\nSession --&gt; Static\nStatic --&gt; BodyParser\nBodyParser --&gt; Router\nRouter --&gt; AuthMiddleware\nRouter --&gt; ValidatorMiddleware\nAuthMiddleware --&gt; Handler\nValidatorMiddleware --&gt; Handler\nHandler --&gt; Response</code></pre> <p>Diagram: Middleware Pipeline Execution Order</p>"},{"location":"Architecture-Overview/#core-middleware-configuration","title":"Core Middleware Configuration","text":"<p>The middleware stack in app.js</p> <p>processes every request in sequence:</p> Order Middleware Configuration Purpose 1 <code>express-session</code> Lines 6-13 Session management with secret key 2 <code>express.static</code> Line 19 Static file serving from <code>/public</code> directory at <code>/resources</code> path 3 <code>express.urlencoded</code> Line 25 Parse URL-encoded request bodies (form submissions) 4 <code>express.json</code> Line 26 Parse JSON request bodies (API requests) 5 Route handlers Lines 29-31 Mount modular route files"},{"location":"Architecture-Overview/#session-configuration","title":"Session Configuration","text":"<p>The session middleware app.js L6-L13</p> <p>configures:</p> <ul> <li>Secret: <code>\"secret\"</code> used for signing session ID cookies</li> <li>Resave: <code>false</code> prevents unnecessary session saves</li> <li>SaveUninitialized: <code>false</code> prevents creating sessions for unauthenticated users</li> </ul>"},{"location":"Architecture-Overview/#route-specific-middleware","title":"Route-Specific Middleware","text":"<p>Individual route modules in <code>routes/</code> directory apply additional middleware:</p> <ul> <li>Authentication middleware: Verifies user login status before protected routes</li> <li>Role-based middleware: Checks user role (<code>admin</code>, <code>registrado</code>, <code>publico</code>) for authorization</li> <li>Validation middleware: Uses <code>express-validator</code> to sanitize and validate input</li> </ul> <p>Sources: app.js L6-L26</p> <p>package.json L14-L24</p>"},{"location":"Architecture-Overview/#module-organization","title":"Module Organization","text":"<pre><code>flowchart TD\n\nAssets[\"Images, Fonts, etc.\"]\nAppJS[\"app.js&lt;br&gt;Main Entry Point\"]\nDotEnv[\".env&lt;br&gt;Environment Variables\"]\nIndexRoute[\"index.js&lt;br&gt;Landing Page Routes\"]\nAuthRoute[\"auth.js&lt;br&gt;Login/Register Routes\"]\nCoursesRoute[\"courses.js&lt;br&gt;Course CRUD Routes\"]\nEJSFiles[\"*.ejs&lt;br&gt;Template Files\"]\nCSSFiles[\"*.css&lt;br&gt;Stylesheets\"]\nDBConfig[\"db.js&lt;br&gt;MySQL Connection\"]\nController[\"controller.js&lt;br&gt;Course CRUD Logic\"]\nCursoController[\"cursoController.js&lt;br&gt;Enrollment Logic\"]\nPackageJSON[\"package.json&lt;br&gt;Dependencies\"]\n\nsubgraph subGraph8 [\"Root Directory\"]\n    AppJS\n    PackageJSON\n    AppJS --&gt; DotEnv\n    AppJS --&gt; IndexRoute\n    AppJS --&gt; AuthRoute\n    AppJS --&gt; CoursesRoute\n    AppJS --&gt; EJSFiles\n    AppJS --&gt; CSSFiles\n    AppJS --&gt; Assets\n    IndexRoute --&gt; EJSFiles\n    AuthRoute --&gt; EJSFiles\n    AuthRoute --&gt; DBConfig\n    CoursesRoute --&gt; EJSFiles\n    CoursesRoute --&gt; Controller\n    CoursesRoute --&gt; CursoController\n    Controller --&gt; DBConfig\n    CursoController --&gt; DBConfig\n\nsubgraph public/ [\"public/\"]\n\nsubgraph resources/ [\"resources/\"]\n    Assets\nend\n\nsubgraph css/ [\"css/\"]\n    CSSFiles\nend\nend\n\nsubgraph views/ [\"views/\"]\n    EJSFiles\nend\n\nsubgraph config/ [\"config/\"]\n    DBConfig\nend\n\nsubgraph src/ [\"src/\"]\n    Controller\n    CursoController\nend\n\nsubgraph routes/ [\"routes/\"]\n    IndexRoute\n    AuthRoute\n    CoursesRoute\nend\n\nsubgraph env/ [\"env/\"]\n    DotEnv\nend\nend</code></pre> <p>Diagram: Directory Structure and Module Dependencies</p>"},{"location":"Architecture-Overview/#directory-structure","title":"Directory Structure","text":"<p>The application follows a modular organization pattern:</p> Directory Purpose Key Files Root Application entry and configuration <code>app.js</code>, <code>package.json</code> <code>env/</code> Environment variables <code>.env</code> (contains DB credentials, secrets) <code>routes/</code> HTTP endpoint definitions <code>index.js</code>, <code>auth.js</code>, <code>courses.js</code> <code>src/</code> Business logic controllers <code>controller.js</code>, <code>cursoController.js</code> <code>config/</code> Infrastructure configuration <code>db.js</code> (MySQL connection) <code>views/</code> EJS template files <code>*.ejs</code> files for rendering HTML <code>public/css/</code> Stylesheets Page-specific CSS files <code>public/resources/</code> Static assets Images, fonts, icons"},{"location":"Architecture-Overview/#module-responsibilities","title":"Module Responsibilities","text":"<p>Entry Point: app.js L1-L41</p> <ul> <li>Initializes Express application</li> <li>Configures middleware stack</li> <li>Mounts route modules</li> <li>Sets view engine and static file paths</li> </ul> <p>Configuration: config/db.js L1-L19</p> <ul> <li>Creates MySQL connection using <code>mysql2.createConnection()</code></li> <li>Reads credentials from environment variables db.js L4-L7</li> <li>Exports connection for use by routes and controllers</li> </ul> <p>Route Handlers: <code>routes/*.js</code></p> <ul> <li>Define HTTP endpoint mappings</li> <li>Apply authentication and validation middleware</li> <li>Delegate business logic to controllers</li> <li>Render views or send redirects</li> </ul> <p>Controllers: <code>src/*.js</code></p> <ul> <li>Implement business logic for CRUD operations</li> <li>Handle database transactions</li> <li>Process enrollment requests</li> <li>Return success/error results to routes</li> </ul> <p>Views: <code>views/*.ejs</code></p> <ul> <li>Render dynamic HTML using EJS syntax</li> <li>Display data passed from route handlers</li> <li>Include shared partials for header/footer</li> <li>Integrate with CSS stylesheets</li> </ul> <p>Sources: app.js L1-L41</p> <p>config/db.js L1-L19</p> <p>project structure diagrams</p>"},{"location":"Architecture-Overview/#database-connection-architecture","title":"Database Connection Architecture","text":"<pre><code>flowchart TD\n\nAuthRoute[\"routes/auth.js\"]\nCoursesRoute[\"routes/courses.js\"]\nController[\"src/controller.js\"]\nCursoController[\"src/cursoController.js\"]\nDBConfig[\"config/db.js\"]\nEnvVars[\"process.env.DB_HOST&lt;br&gt;process.env.DB_USER&lt;br&gt;process.env.DB_PASS&lt;br&gt;process.env.DB_NAME\"]\nMySQL2[\"mysql2.createConnection()\"]\nUsuariosTable[\"usuarios table\"]\nCursosTable[\"cursos table\"]\nInscripcionesTable[\"inscripciones table\"]\n\nAuthRoute --&gt; DBConfig\nCoursesRoute --&gt; DBConfig\nController --&gt; DBConfig\nCursoController --&gt; DBConfig\nMySQL2 --&gt; UsuariosTable\nMySQL2 --&gt; CursosTable\nMySQL2 --&gt; InscripcionesTable\n\nsubgraph subGraph3 [\"MySQL Database\"]\n    UsuariosTable\n    CursosTable\n    InscripcionesTable\nend\n\nsubgraph subGraph2 [\"Database Layer\"]\n    DBConfig\n    DBConfig --&gt; EnvVars\n\nsubgraph subGraph1 [\"Connection Configuration\"]\n    EnvVars\n    MySQL2\n    EnvVars --&gt; MySQL2\nend\nend\n\nsubgraph subGraph0 [\"Application Layer\"]\n    AuthRoute\n    CoursesRoute\n    Controller\n    CursoController\nend</code></pre> <p>Diagram: Database Connection Module Architecture</p>"},{"location":"Architecture-Overview/#connection-module-design","title":"Connection Module Design","text":"<p>The config/db.js L1-L19</p> <p>module implements a centralized database connection pattern:</p> <ol> <li>Line 1: Import <code>mysql2</code> driver for MySQL connectivity</li> <li>Lines 3-9: Create connection using environment variables: * <code>process.env.DB_HOST</code>: Database server hostname * <code>process.env.DB_USER</code>: MySQL username * <code>process.env.DB_PASS</code>: MySQL password * <code>process.env.DB_NAME</code>: Target database name</li> <li>Lines 11-17: Establish connection with error handling</li> <li>Line 19: Export connection object via <code>module.exports</code></li> </ol> <p>All route handlers and controllers import this single connection instance, ensuring consistent database access across the application. This centralized pattern simplifies connection management and environment configuration.</p> <p>Sources: config/db.js L1-L19</p> <p>database architecture diagrams</p>"},{"location":"Architecture-Overview/#design-patterns","title":"Design Patterns","text":"<p>The architecture implements several key design patterns:</p>"},{"location":"Architecture-Overview/#separation-of-concerns","title":"Separation of Concerns","text":"<ul> <li>Routes handle HTTP request/response</li> <li>Controllers implement business logic</li> <li>Database module manages data access</li> <li>Views handle presentation</li> </ul>"},{"location":"Architecture-Overview/#middleware-chain-pattern","title":"Middleware Chain Pattern","text":"<p>Sequential middleware processing via app.js L6-L26</p> <p>ensures:</p> <ul> <li>Session establishment before route handling</li> <li>Body parsing before controller access</li> <li>Authentication checks before protected routes</li> </ul>"},{"location":"Architecture-Overview/#module-pattern","title":"Module Pattern","text":"<p>Each functional area (auth, courses) exists as separate module in <code>routes/</code> directory, promoting:</p> <ul> <li>Code organization</li> <li>Independent testing</li> <li>Easier maintenance</li> </ul>"},{"location":"Architecture-Overview/#dependency-injection","title":"Dependency Injection","text":"<p>The database connection config/db.js L19</p> <p>is exported and imported by consumers, enabling:</p> <ul> <li>Centralized configuration</li> <li>Testability through mock injection</li> <li>Connection reuse</li> </ul> <p>Sources: app.js L1-L41</p> <p>config/db.js L1-L19</p> <p>module dependency diagrams</p>"},{"location":"Authentication-%26-Authorization/","title":"Authentication &amp; Authorization","text":"<p>Relevant source files * app.js * package.json * routes/auth.js</p>"},{"location":"Authentication-%26-Authorization/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides comprehensive technical documentation of the authentication and authorization system in the course management application. It covers session-based authentication using <code>express-session</code>, password security with <code>bcryptjs</code>, input validation with <code>express-validator</code>, and role-based access control (RBAC) enforcing three distinct user privilege levels.</p> <p>For specifics on the registration workflow, see User Registration. For login process details, see User Login. For role-based middleware implementation, see Role-Based Access Control. For session lifecycle management, see Session Management.</p>"},{"location":"Authentication-%26-Authorization/#system-overview","title":"System Overview","text":"<p>The authentication system implements a session-based architecture where user credentials are validated against the <code>usuarios</code> table in the MySQL database. Upon successful authentication, user data is stored in server-side sessions managed by <code>express-session</code>. The system enforces a three-tier role hierarchy (<code>publico</code>, <code>registrado</code>, <code>admin</code>) with middleware guards protecting role-specific routes.</p>"},{"location":"Authentication-%26-Authorization/#authentication-components","title":"Authentication Components","text":"Component Technology Purpose Session Store <code>express-session</code> Server-side session persistence Password Hashing <code>bcryptjs</code> One-way password encryption with salt Input Validation <code>express-validator</code> Request body sanitization and validation Token Support <code>jsonwebtoken</code> JWT generation capability (configured but optional) Database Layer <code>mysql2</code> User credential storage and retrieval <p>Sources: package.json L1-L26</p> <p>app.js L4-L13</p>"},{"location":"Authentication-%26-Authorization/#session-configuration","title":"Session Configuration","text":"<p>The Express application initializes session middleware globally before route handlers are mounted. The session configuration in app.js L6-L13</p> <p>establishes the session management parameters:</p> <pre><code>Session Middleware Configuration:\n- secret: \"secret\" (session signing key)\n- resave: false (don't save session if unmodified)\n- saveUninitialized: false (don't create session until something stored)\n</code></pre> <p>The session object persists across requests for authenticated users and stores critical authentication state including <code>req.session.loggedin</code>, <code>req.session.usuario</code> (full user object from database), and <code>req.session.rol</code> (user's role string).</p> <p>Sources: app.js L6-L13</p>"},{"location":"Authentication-%26-Authorization/#password-security-architecture","title":"Password Security Architecture","text":""},{"location":"Authentication-%26-Authorization/#bcrypt-hashing-strategy","title":"Bcrypt Hashing Strategy","text":"<p>The system uses <code>bcryptjs</code> version 3.0.2 for password security. During user registration at routes/auth.js L44</p> <p>passwords are hashed with a salt round of 8:</p> <pre><code>const passwordHash = await bcrypt.hash(password, 8);\n</code></pre> <p>This generates a salted hash using the bcrypt algorithm, making rainbow table attacks infeasible. The salt round of 8 balances security and performance, requiring 2^8 (256) iterations of the hashing algorithm.</p>"},{"location":"Authentication-%26-Authorization/#password-verification","title":"Password Verification","text":"<p>Login authentication at routes/auth.js L86</p> <p>compares the plaintext password against the stored hash:</p> <pre><code>await bcrypt.compare(password, results[0].password)\n</code></pre> <p>The <code>compare()</code> function extracts the salt from the stored hash and applies the same hashing process to the provided password, then performs a constant-time comparison to prevent timing attacks.</p> <p>Sources: routes/auth.js L44</p> <p>routes/auth.js L86</p> <p>package.json L14</p>"},{"location":"Authentication-%26-Authorization/#authentication-flow-diagram","title":"Authentication Flow Diagram","text":""},{"location":"Authentication-%26-Authorization/#complete-authentication-request-cycle","title":"Complete Authentication Request Cycle","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant app.js\n  participant express-session\n  participant routes/auth.js\n  participant express-validator\n  participant bcryptjs\n  participant config/db.js\n  participant usuarios table\n\n  Client-&gt;&gt;app.js: \"POST /auth (email, password)\"\n  app.js-&gt;&gt;express-session: \"Load session from store\"\n  express-session-&gt;&gt;app.js: \"Session object (empty)\"\n  app.js-&gt;&gt;routes/auth.js: \"Route to POST /auth\"\n  routes/auth.js-&gt;&gt;config/db.js: \"SELECT * FROM usuarios WHERE email = ?\"\n  config/db.js-&gt;&gt;usuarios table: \"Query with parameterized email\"\n  usuarios table-&gt;&gt;config/db.js: \"Return user record\"\n  config/db.js-&gt;&gt;routes/auth.js: \"results[0] = user object\"\n  routes/auth.js-&gt;&gt;bcryptjs: \"bcrypt.compare(password, results[0].password)\"\n  bcryptjs-&gt;&gt;routes/auth.js: \"Boolean comparison result\"\n  loop [\"Authentication Success\"]\n    routes/auth.js-&gt;&gt;express-session: \"req.session.loggedin = true\"\n    routes/auth.js-&gt;&gt;express-session: \"req.session.usuario = results[0]\"\n    routes/auth.js-&gt;&gt;express-session: \"req.session.rol = usuario.rol\"\n    express-session-&gt;&gt;app.js: \"Session saved\"\n    routes/auth.js-&gt;&gt;Client: \"Render login.ejs with success alert\"\n    routes/auth.js-&gt;&gt;Client: \"Render login.ejs with error alert\"\n  end</code></pre> <p>Sources: routes/auth.js L75-L131</p> <p>app.js L6-L13</p>"},{"location":"Authentication-%26-Authorization/#role-based-authorization-model","title":"Role-Based Authorization Model","text":""},{"location":"Authentication-%26-Authorization/#role-hierarchy","title":"Role Hierarchy","text":"<p>The system defines three user roles stored in the <code>usuarios.rol</code> column:</p> Role Database Value Access Level Assignment Public <code>'publico'</code> Unauthenticated access only No database record Registered User <code>'registrado'</code> Course browsing and enrollment Default on registration routes/auth.js L52 Administrator <code>'admin'</code> Full CRUD on courses and analytics Manual database assignment"},{"location":"Authentication-%26-Authorization/#role-assignment-logic","title":"Role Assignment Logic","text":"<p>During registration at routes/auth.js L43-L52</p> <p>the system assigns roles with fallback logic:</p> <pre><code>rol: rol || 'registrado'\n</code></pre> <p>This assigns the <code>rol</code> field from the request body if present, otherwise defaults to <code>'registrado'</code>. In practice, the registration form does not expose role selection to users, so all registrations default to the registered user role. Administrator role assignment requires direct database manipulation or manual intervention.</p> <p>Sources: routes/auth.js L43-L52</p>"},{"location":"Authentication-%26-Authorization/#middleware-architecture","title":"Middleware Architecture","text":""},{"location":"Authentication-%26-Authorization/#authentication-middleware-stack","title":"Authentication Middleware Stack","text":"<p>While the core authentication routes exist in routes/auth.js</p> <p>the protection middleware functions (<code>estaAutenticado</code>, <code>isRegistrado</code>, <code>isAdmin</code>) are implemented in route-specific files and applied to protected endpoints. These middleware functions check session state before allowing route handlers to execute.</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nSession[\"express-session middleware&lt;br&gt;(app.js:6-13)\"]\nRouteHandler[\"Route Handler&lt;br&gt;(routes/courses.js, etc.)\"]\nAuthCheck[\"estaAutenticado&lt;br&gt;Checks req.session.loggedin\"]\nRoleCheck[\"Role-specific middleware\"]\nIsRegistrado[\"isRegistrado&lt;br&gt;Checks rol === 'registrado'\"]\nIsAdmin[\"isAdmin&lt;br&gt;Checks rol === 'admin'\"]\nSessionData[\"req.session.loggedin&lt;br&gt;req.session.usuario&lt;br&gt;req.session.rol\"]\nRedirect401[\"Redirect to /login\"]\nRedirect403[\"Redirect to /\"]\n\nRequest --&gt; Session\nSession --&gt; SessionData\nSession --&gt; AuthCheck\nAuthCheck --&gt; Redirect401\nIsRegistrado --&gt; RouteHandler\nIsRegistrado --&gt; Redirect403\nIsAdmin --&gt; RouteHandler\nIsAdmin --&gt; Redirect403\n\nsubgraph subGraph0 [\"Protection Middleware (applied per route)\"]\n    AuthCheck\n    RoleCheck\n    IsRegistrado\n    IsAdmin\n    AuthCheck --&gt; RoleCheck\n    RoleCheck --&gt; IsRegistrado\n    RoleCheck --&gt; IsAdmin\nend</code></pre>"},{"location":"Authentication-%26-Authorization/#session-state-structure","title":"Session State Structure","text":"<p>Authenticated sessions store the following structure in <code>req.session</code>:</p> <pre><code>req.session = {\n  loggedin: true,              // Boolean authentication flag\n  usuario: {                   // Full user object from usuarios table\n    id: &lt;number&gt;,\n    nombre: &lt;string&gt;,\n    email: &lt;string&gt;,\n    password: &lt;hashed_string&gt;,\n    rol: &lt;string&gt;\n  },\n  rol: &lt;string&gt;               // Duplicated for quick access\n}\n</code></pre> <p>This structure is established at routes/auth.js L102-L104</p> <p>upon successful login.</p> <p>Sources: routes/auth.js L102-L104</p> <p>app.js L6-L13</p>"},{"location":"Authentication-%26-Authorization/#registration-implementation","title":"Registration Implementation","text":""},{"location":"Authentication-%26-Authorization/#input-validation-chain","title":"Input Validation Chain","text":"<p>The registration endpoint at routes/auth.js L17-L72</p> <p>implements a validation middleware chain using <code>express-validator</code>:</p> <pre><code>flowchart TD\n\nRequest[\"POST /register\"]\nV1[\"body('nombre')&lt;br&gt;min length: 3\"]\nV2[\"body('email')&lt;br&gt;isEmail()\"]\nV3[\"body('password')&lt;br&gt;min length: 4\"]\nValidationResult[\"validationResult(req)\"]\nRenderErrors[\"Render register.ejs&lt;br&gt;with validaciones array\"]\nProcess[\"Process registration\"]\nHash[\"bcrypt.hash(password, 8)\"]\nInsert[\"INSERT INTO usuarios\"]\nSuccess[\"Render success alert\"]\n\nRequest --&gt; V1\nV3 --&gt; ValidationResult\nValidationResult --&gt; RenderErrors\nValidationResult --&gt; Process\nProcess --&gt; Hash\nHash --&gt; Insert\nInsert --&gt; Success\n\nsubgraph subGraph0 [\"Validation Middleware Array\"]\n    V1\n    V2\n    V3\n    V1 --&gt; V2\n    V2 --&gt; V3\nend</code></pre> <p>The validation rules defined at routes/auth.js L18-L33</p> <p>enforce:</p> <ul> <li>nombre: Minimum 3 characters</li> <li>email: Valid email format via <code>isEmail()</code> validator</li> <li>password: Minimum 4 characters</li> </ul> <p>Validation errors are passed back to the view via the <code>validaciones</code> array at routes/auth.js L37-L40</p> <p>allowing the registration form to display field-specific error messages.</p> <p>Sources: routes/auth.js L17-L72</p>"},{"location":"Authentication-%26-Authorization/#database-insertion","title":"Database Insertion","text":"<p>Upon successful validation, the registration process at routes/auth.js L46-L69</p> <p>performs:</p> <ol> <li>Password hashing: <code>await bcrypt.hash(password, 8)</code> at routes/auth.js L44</li> <li>Database insertion: <code>INSERT INTO usuarios SET ?</code> with object notation at routes/auth.js L47-L53</li> <li>Success response: Renders <code>register.ejs</code> with SweetAlert2 configuration at routes/auth.js L58-L66</li> </ol> <p>The object notation for the INSERT query provides automatic escaping and prevents SQL injection:</p> <pre><code>{\n  nombre: nombre,\n  email: email,\n  password: passwordHash,\n  rol: rol || 'registrado',\n}\n</code></pre> <p>Sources: routes/auth.js L44-L69</p>"},{"location":"Authentication-%26-Authorization/#login-implementation","title":"Login Implementation","text":""},{"location":"Authentication-%26-Authorization/#credential-verification-process","title":"Credential Verification Process","text":"<p>The login endpoint <code>POST /auth</code> at routes/auth.js L75-L131</p> <p>implements a multi-stage verification:</p> <pre><code>flowchart TD\n\nStart[\"POST /auth&lt;br&gt;(email, password)\"]\nEmptyCheck[\"email &amp;&amp; password&lt;br&gt;both provided?\"]\nEmptyError[\"Render warning alert&lt;br&gt;'Ingrese usuario y/o contrase\u00f1a'\"]\nQuery[\"SELECT * FROM usuarios&lt;br&gt;WHERE email = ?\"]\nResults[\"results.length &gt; 0?\"]\nAuthError[\"Render error alert&lt;br&gt;'Usuario y/o contrase\u00f1a incorrectos'\"]\nComparePass[\"bcrypt.compare(password,&lt;br&gt;results[0].password)\"]\nSetSession[\"req.session.loggedin = true&lt;br&gt;req.session.usuario = results[0]&lt;br&gt;req.session.rol = usuario.rol\"]\nSuccess[\"Render success alert&lt;br&gt;'Conexion exitosa'\"]\n\nStart --&gt; EmptyCheck\nEmptyCheck --&gt; EmptyError\nEmptyCheck --&gt; Query\nQuery --&gt; Results\nResults --&gt; AuthError\nResults --&gt; ComparePass\nComparePass --&gt; AuthError\nComparePass --&gt; SetSession\nSetSession --&gt; Success</code></pre> <p>The comparison at routes/auth.js L85-L87</p> <p>uses a compound condition:</p> <pre><code>if (results.length == 0 || !(await bcrypt.compare(password, results[0].password)))\n</code></pre> <p>This checks both user existence and password validity in a single conditional, deliberately providing the same error message for both cases to prevent username enumeration attacks.</p> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"Authentication-%26-Authorization/#session-initialization","title":"Session Initialization","text":"<p>Upon successful authentication at routes/auth.js L98-L104</p> <p>the session object is populated:</p> <pre><code>req.session.loggedin = true;\nreq.session.usuario = results[0];\nreq.session.rol = usuario.rol;\n</code></pre> <p>The <code>usuario</code> object contains the complete database record including <code>id</code>, <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), and <code>rol</code>. This data persists across requests via the express-session store configured in app.js L6-L13</p> <p>Sources: routes/auth.js L98-L104</p>"},{"location":"Authentication-%26-Authorization/#logout-mechanism","title":"Logout Mechanism","text":"<p>The logout endpoint <code>POST /logout</code> at routes/auth.js L134-L136</p> <p>implements session destruction:</p> <pre><code>req.session.destroy(() =&gt; res.redirect('/'));\n</code></pre> <p>The <code>destroy()</code> method removes the session from the session store and clears the session cookie from the client. The callback redirects to the home route after session destruction completes. This is a POST route rather than GET to prevent CSRF attacks via simple link clicks.</p> <p>Sources: routes/auth.js L134-L136</p>"},{"location":"Authentication-%26-Authorization/#route-protection-pattern","title":"Route Protection Pattern","text":""},{"location":"Authentication-%26-Authorization/#public-vs-protected-routes","title":"Public vs Protected Routes","text":"<p>Routes in the application follow this protection pattern:</p> Route Pattern Protection File Location <code>GET /</code> None (public) routes/index.js <code>GET /login</code> None (public) routes/auth.js L8-L10 <code>GET /register</code> None (public) routes/auth.js L12-L14 <code>POST /auth</code> None (validates credentials) routes/auth.js L75-L131 <code>POST /register</code> None (creates account) routes/auth.js L17-L72 <code>POST /logout</code> Requires active session routes/auth.js L134-L136 <code>GET /courses</code> Varies by role routes/courses.js <code>POST /inscribir/:id</code> Requires <code>registrado</code> role routes/courses.js <code>GET /create</code> Requires <code>admin</code> role routes/courses.js <code>POST /save</code> Requires <code>admin</code> role routes/courses.js <code>GET /edit/:id</code> Requires <code>admin</code> role routes/courses.js <code>POST /update</code> Requires <code>admin</code> role routes/courses.js <code>GET /delete/:id</code> Requires <code>admin</code> role routes/courses.js <p>The specific middleware implementations (<code>estaAutenticado</code>, <code>isRegistrado</code>, <code>isAdmin</code>) are applied in routes/courses.js</p> <p>and other protected route files, checking <code>req.session.loggedin</code> and <code>req.session.rol</code> before allowing access.</p> <p>Sources: routes/auth.js L1-L139</p>"},{"location":"Authentication-%26-Authorization/#security-considerations","title":"Security Considerations","text":""},{"location":"Authentication-%26-Authorization/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All database queries use parameterized statements. The registration query at routes/auth.js L47</p> <p>uses object notation:</p> <pre><code>INSERT INTO usuarios SET ?\n</code></pre> <p>The login query at routes/auth.js L82</p> <p>uses array parameters:</p> <pre><code>SELECT * FROM usuarios WHERE email = ?\n</code></pre> <p>Both patterns prevent SQL injection by separating SQL structure from user data.</p>"},{"location":"Authentication-%26-Authorization/#password-storage","title":"Password Storage","text":"<p>Passwords are never stored in plaintext. The hashing at routes/auth.js L44</p> <p>with 8 salt rounds provides:</p> <ul> <li>Resistance to rainbow table attacks (unique salt per password)</li> <li>Computational cost making brute force attacks expensive</li> <li>One-way transformation (cannot reverse hash to plaintext)</li> </ul>"},{"location":"Authentication-%26-Authorization/#session-security","title":"Session Security","text":"<p>The session configuration at app.js L8</p> <p>uses a secret key for signing session cookies. The production deployment should replace the hardcoded <code>\"secret\"</code> string with an environment variable containing a cryptographically random string.</p> <p>The configuration <code>saveUninitialized: false</code> at app.js L10</p> <p>prevents session creation until authentication succeeds, reducing session store bloat and potential session fixation attacks.</p> <p>Sources: routes/auth.js L44</p> <p>routes/auth.js L47</p> <p>routes/auth.js L82</p> <p>app.js L6-L13</p>"},{"location":"Authentication-%26-Authorization/#jwt-token-support","title":"JWT Token Support","text":"<p>The <code>jsonwebtoken</code> package version 9.0.2 is included in dependencies at package.json L22</p> <p>but not actively used in the current authentication implementation. The system uses session-based authentication exclusively. JWT support could be implemented for stateless API endpoints or mobile client authentication in future iterations.</p> <p>Sources: package.json L22</p>"},{"location":"Authentication-Endpoints/","title":"Authentication Endpoints","text":"<p>Relevant source files * routes/auth.js</p>"},{"location":"Authentication-Endpoints/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a comprehensive reference for all authentication-related HTTP endpoints in the course management system. These endpoints handle user registration, login, and logout operations, including input validation, password hashing, session management, and error handling.</p> <p>For information about the underlying authentication mechanisms and session management, see Session Management. For details on role-based access control middleware, see Role-Based Access Control.</p> <p>Sources: routes/auth.js L1-L139</p>"},{"location":"Authentication-Endpoints/#endpoint-overview","title":"Endpoint Overview","text":"<p>The authentication router (<code>routes/auth.js</code>) exposes five HTTP endpoints:</p> HTTP Method Path Purpose Authentication Required Response Type GET <code>/login</code> Render login form No HTML view GET <code>/register</code> Render registration form No HTML view POST <code>/register</code> Process user registration No HTML view with alert POST <code>/auth</code> Process login authentication No HTML view with alert POST <code>/logout</code> Destroy user session No Redirect to <code>/</code> <p>Sources: routes/auth.js L8-L136</p>"},{"location":"Authentication-Endpoints/#authentication-flow-architecture","title":"Authentication Flow Architecture","text":"<p>Sources: routes/auth.js L8-L136</p>"},{"location":"Authentication-Endpoints/#registration-endpoints","title":"Registration Endpoints","text":""},{"location":"Authentication-Endpoints/#get-register","title":"GET /register","text":"<p>Renders the registration form for new users.</p> <p>Route Definition: routes/auth.js L12-L14</p> <p>Request Parameters: None</p> <p>Response:</p> <ul> <li>Renders the <code>register</code> EJS view</li> <li>Passes <code>{ register: true }</code> as template data</li> </ul> <p>Example Usage:</p> <pre><code>GET /register\n</code></pre> <p>Sources: routes/auth.js L12-L14</p>"},{"location":"Authentication-Endpoints/#post-register","title":"POST /register","text":"<p>Processes new user registration with input validation and password hashing.</p> <p>Route Definition: routes/auth.js L17-L72</p> <p>Request Body:</p> Field Type Required Validation Rules <code>nombre</code> String Yes Minimum 3 characters <code>email</code> String Yes Valid email format <code>password</code> String Yes Minimum 4 characters <code>rol</code> String No Defaults to <code>'registrado'</code> <p>Validation Middleware: The endpoint uses <code>express-validator</code> with three validation chains:</p> <ul> <li>routes/auth.js L19-L22  - Validates <code>nombre</code> field</li> <li>routes/auth.js L24-L27  - Validates <code>email</code> field</li> <li>routes/auth.js L29-L32  - Validates <code>password</code> field</li> </ul> <p>Processing Flow:</p> <pre><code>\n</code></pre> <p>Sources: routes/auth.js L17-L72</p> <p>Success Response: Renders the <code>register</code> view with SweetAlert2 configuration:</p> <pre><code>\n</code></pre> <p>Error Response: Renders the <code>register</code> view with validation errors:</p> <pre><code>\n</code></pre> <p>Database Operation:</p> <ul> <li>Table: <code>usuarios</code></li> <li>Operation: <code>INSERT INTO usuarios SET ?</code></li> <li>Fields inserted: <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), <code>rol</code> (default: <code>'registrado'</code>)</li> </ul> <p>Sources: routes/auth.js L34-L72</p>"},{"location":"Authentication-Endpoints/#login-endpoints","title":"Login Endpoints","text":""},{"location":"Authentication-Endpoints/#get-login","title":"GET /login","text":"<p>Renders the login form for existing users.</p> <p>Route Definition: routes/auth.js L8-L10</p> <p>Request Parameters: None</p> <p>Response:</p> <ul> <li>Renders the <code>login</code> EJS view</li> </ul> <p>Example Usage:</p> <pre><code>GET /login\n</code></pre> <p>Sources: routes/auth.js L8-L10</p>"},{"location":"Authentication-Endpoints/#post-auth","title":"POST /auth","text":"<p>Authenticates user credentials and establishes a session.</p> <p>Route Definition: routes/auth.js L75-L131</p> <p>Request Body:</p> Field Type Required Description <code>email</code> String Yes User's email address <code>password</code> String Yes User's plaintext password <p>Authentication Process:</p> <pre><code>\n</code></pre> <p>Sources: routes/auth.js L75-L131</p> <p>Session Data Structure: Upon successful authentication, the following session properties are set:</p> <ul> <li>routes/auth.js L102  - <code>req.session.loggedin = true</code></li> <li>routes/auth.js L103  - <code>req.session.usuario = results[0]</code> (entire user object)</li> <li>routes/auth.js L104  - <code>req.session.rol = usuario.rol</code> (role string)</li> </ul> <p>Success Response: Renders the <code>login</code> view with SweetAlert2 configuration:</p> <pre><code>\n</code></pre> <p>Error Responses:</p> Scenario Alert Configuration Invalid credentials <code>alertTitle: 'Error'``alertMessage: 'Usuario y/o contrase\u00f1a incorrectos'``alertIcon: 'error'</code> Missing email/password <code>alertTitle: 'Advertencia'``alertMessage: 'Ingrese el usuario y/o contrase\u00f1a'``alertIcon: 'error'</code> <p>Database Query:</p> <ul> <li>Table: <code>usuarios</code></li> <li>Query: <code>SELECT * FROM usuarios WHERE email = ?</code></li> <li>Parameters: <code>[email]</code></li> </ul> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"Authentication-Endpoints/#logout-endpoint","title":"Logout Endpoint","text":""},{"location":"Authentication-Endpoints/#post-logout","title":"POST /logout","text":"<p>Destroys the user session and redirects to the homepage.</p> <p>Route Definition: routes/auth.js L134-L136</p> <p>Request Parameters: None</p> <p>Request Body: None</p> <p>Response:</p> <ul> <li>Calls <code>req.session.destroy()</code> to terminate the session</li> <li>Redirects to <code>/</code> (home page)</li> </ul> <p>Example Usage:</p> <pre><code>POST /logout\n</code></pre> <p>Implementation:</p> <pre><code>\n</code></pre> <p>The <code>destroy()</code> method accepts a callback that executes after session cleanup is complete. The redirect ensures users are sent to the home page after logout.</p> <p>Sources: routes/auth.js L134-L136</p>"},{"location":"Authentication-Endpoints/#validation-specifications","title":"Validation Specifications","text":"<p>The registration endpoint implements three validation chains using <code>express-validator</code>:</p>"},{"location":"Authentication-Endpoints/#nombre-validation","title":"Nombre Validation","text":"<p>Implementation: routes/auth.js L19-L22</p> <p>Rules:</p> <ul> <li>Field must exist in request body</li> <li>Minimum length: 3 characters</li> <li>Error message: \"El nombre debe tener al menos 3 caracteres\"</li> </ul>"},{"location":"Authentication-Endpoints/#email-validation","title":"Email Validation","text":"<p>Implementation: routes/auth.js L24-L27</p> <p>Rules:</p> <ul> <li>Field must exist in request body</li> <li>Must match valid email format</li> <li>Error message: \"El email debe ser v\u00e1lido\"</li> </ul>"},{"location":"Authentication-Endpoints/#password-validation","title":"Password Validation","text":"<p>Implementation: routes/auth.js L29-L32</p> <p>Rules:</p> <ul> <li>Field must exist in request body</li> <li>Minimum length: 4 characters</li> <li>Error message: \"La contrase\u00f1a debe tener al menos 4 caracteres\"</li> </ul> <p>Validation Error Handling: When validation fails, the registration form is re-rendered with:</p> <ul> <li><code>validaciones: errors.array()</code> - Array of validation error objects</li> <li><code>valores: req.body</code> - Original form data for pre-population</li> </ul> <p>Sources: routes/auth.js L17-L40</p>"},{"location":"Authentication-Endpoints/#password-security","title":"Password Security","text":"<p>All password operations use <code>bcryptjs</code> for cryptographic hashing:</p>"},{"location":"Authentication-Endpoints/#registration-password-hashing","title":"Registration Password Hashing","text":"<p>Implementation: routes/auth.js L44</p> <ul> <li>Algorithm: bcrypt</li> <li>Salt Rounds: 8</li> <li>Storage: Hashed password is stored in the <code>password</code> column of the <code>usuarios</code> table</li> </ul>"},{"location":"Authentication-Endpoints/#login-password-comparison","title":"Login Password Comparison","text":"<p>Implementation: routes/auth.js L86</p> <ul> <li>Operation: Constant-time comparison of plaintext password against stored hash</li> <li>Returns: Boolean indicating match status</li> <li>Security: Prevents timing attacks through constant-time comparison</li> </ul> <p>Sources: routes/auth.js L44</p> <p>routes/auth.js L86</p>"},{"location":"Authentication-Endpoints/#database-operations-reference","title":"Database Operations Reference","text":""},{"location":"Authentication-Endpoints/#registration-database-insert","title":"Registration Database Insert","text":"<p>Implementation: routes/auth.js L46-L69</p> <p>Query:</p> <p>Parameters Object:</p> <p>Default Role Assignment: If no <code>rol</code> field is provided in the request body, the user is assigned the role <code>'registrado'</code> by default routes/auth.js L52</p>"},{"location":"Authentication-Endpoints/#login-database-query","title":"Login Database Query","text":"<p>Implementation: routes/auth.js L81-L118</p> <p>Query:</p> <p>Parameters: <code>[email]</code></p> <p>Result Handling:</p> <ul> <li><code>results.length == 0</code> indicates no user found</li> <li><code>results[0]</code> contains the user object if found</li> <li>User object includes: <code>id</code>, <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), <code>rol</code></li> </ul> <p>Sources: routes/auth.js L46-L118</p>"},{"location":"Authentication-Endpoints/#response-patterns","title":"Response Patterns","text":"<p>All authentication endpoints follow a consistent response pattern using SweetAlert2 configuration objects:</p>"},{"location":"Authentication-Endpoints/#alert-configuration-properties","title":"Alert Configuration Properties","text":"Property Type Purpose <code>alert</code> Boolean Triggers SweetAlert2 display <code>alertTitle</code> String Alert modal title <code>alertMessage</code> String Alert modal message text <code>alertIcon</code> String Icon type: <code>'success'</code>, <code>'error'</code>, <code>'warning'</code> <code>showConfirmButton</code> Boolean Whether to show confirm button <code>timer</code> Number/Boolean Auto-close timer in milliseconds, or <code>false</code> <code>ruta</code> String Redirect path after alert closes"},{"location":"Authentication-Endpoints/#registration-success-response","title":"Registration Success Response","text":"<p>Implementation: routes/auth.js L58-L66</p>"},{"location":"Authentication-Endpoints/#login-success-response","title":"Login Success Response","text":"<p>Implementation: routes/auth.js L106-L115</p>"},{"location":"Authentication-Endpoints/#login-error-response","title":"Login Error Response","text":"<p>Implementation: routes/auth.js L88-L97</p> <p>Sources: routes/auth.js L58-L129</p>"},{"location":"Authentication-Endpoints/#module-dependencies","title":"Module Dependencies","text":"<p>The authentication router relies on the following imported modules:</p> Module Purpose Import Statement <code>express</code> Router creation routes/auth.js L1 <code>bcryptjs</code> Password hashing and comparison routes/auth.js L3 <code>config/db</code> Database connection routes/auth.js L4 <code>express-validator</code> Input validation routes/auth.js L5 <p>Router Export: The configured router is exported at routes/auth.js L139</p> <p>as:</p> <pre><code>\n</code></pre> <p>Sources: routes/auth.js L1-L5</p> <p>routes/auth.js L139</p>"},{"location":"Authentication-Views/","title":"Authentication Views","text":"<p>Relevant source files * public/css/login.css * public/css/register.css * views/login.ejs * views/register.ejs</p>"},{"location":"Authentication-Views/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the frontend presentation layer for user authentication, covering the login and registration form interfaces. The views are implemented as EJS templates that integrate with SweetAlert2 for user feedback and Bootstrap alerts for validation error display. These views handle form presentation only; for backend authentication logic, see User Registration and User Login. For API endpoint specifications, see Authentication Endpoints.</p> <p>Sources: views/login.ejs</p> <p>views/register.ejs</p>"},{"location":"Authentication-Views/#login-view","title":"Login View","text":""},{"location":"Authentication-Views/#template-structure","title":"Template Structure","text":"<p>The login interface is rendered by <code>views/login.ejs</code>, which provides a centered authentication form. The template includes the shared <code>partials/head</code> and <code>partials/header</code> components, and loads the dedicated stylesheet <code>public/css/login.css</code>.</p> <p>The form structure consists of:</p> <ul> <li>A <code>&lt;form&gt;</code> element with action <code>/auth</code> and method <code>POST</code> views/login.ejs L8</li> <li>Email input field with name <code>email</code> views/login.ejs L10</li> <li>Password input field with name <code>password</code> views/login.ejs L11</li> <li>Submit button labeled \"Ingresar\" views/login.ejs L12</li> <li>Registration link redirecting to <code>/register</code> views/login.ejs L15</li> </ul> <p>Sources: views/login.ejs L1-L34</p>"},{"location":"Authentication-Views/#login-form-diagram","title":"Login Form Diagram","text":"<p>Sources: views/login.ejs L1-L34</p>"},{"location":"Authentication-Views/#login-styling","title":"Login Styling","text":"<p>The login page uses a gradient background (<code>linear-gradient(135deg, #74ebd5, #9face6)</code>) with vertically and horizontally centered content public/css/login.css L4-L8</p> <p>Key CSS classes:</p> Class Purpose Key Properties <code>.auth-wrapper</code> Container for login form White background, rounded corners, box shadow public/css/login.css L11-L21 <code>.login-container</code> Form wrapper Full width, flex column layout public/css/login.css L23-L27 <code>.login-container input</code> Form inputs Padding, border, rounded corners, focus effect public/css/login.css L35-L47 <code>.login-container button</code> Submit button Blue background (#4a6cf7), hover effect public/css/login.css L49-L62 <code>.register-link</code> Registration link Blue color, hover darkens public/css/login.css L74-L83 <p>Sources: public/css/login.css L1-L83</p>"},{"location":"Authentication-Views/#registration-view","title":"Registration View","text":""},{"location":"Authentication-Views/#template-structure_1","title":"Template Structure","text":"<p>The registration interface is rendered by <code>views/register.ejs</code> and includes more complex logic for handling validation errors and preserving user input. The template integrates Bootstrap 5.3.7 for alert components views/register.ejs L5-L6</p> <p>The form is conditionally rendered based on the <code>register</code> variable or presence of <code>validaciones</code> views/register.ejs L9</p> <p>This conditional ensures the form displays either initially or when validation errors occur.</p> <p>Sources: views/register.ejs L1-L73</p>"},{"location":"Authentication-Views/#form-fields","title":"Form Fields","text":"<p>The registration form contains the following input fields:</p> <ol> <li>Nombre (Name): Text input that persists previous value using <code>valores.nombre</code> if available views/register.ejs L16-L17</li> <li>Email: Text input that persists previous value using <code>valores.email</code> views/register.ejs L22-L23</li> <li>Rol (Role): Dropdown select with two options: * <code>admin</code> (Administrador) * <code>registrado</code> (Registrado) views/register.ejs L27-L31</li> <li>Password: Password input that persists previous value views/register.ejs L36-L37</li> </ol> <p>All fields use the <code>.form-group</code> wrapper class for consistent styling.</p> <p>Sources: views/register.ejs L14-L38</p>"},{"location":"Authentication-Views/#registration-form-component-diagram","title":"Registration Form Component Diagram","text":"<p>Sources: views/register.ejs L9-L73</p>"},{"location":"Authentication-Views/#value-persistence","title":"Value Persistence","text":"<p>When validation errors occur, the form repopulates with previously submitted values to avoid forcing users to re-enter data. This is implemented through conditional rendering that checks for a <code>valores</code> object:</p> <pre><code>&lt;input type=\"text\" name=\"nombre\" value=\"&lt;% if (typeof valores !=='undefined') { %&gt; &lt;%= valores.nombre %&gt; &lt;% } %&gt;\"&gt;\n</code></pre> <p>The pattern is repeated for all input fields except the role selector views/register.ejs L16-L37</p> <p>Sources: views/register.ejs L16-L38</p>"},{"location":"Authentication-Views/#validation-error-display","title":"Validation Error Display","text":"<p>Validation errors are displayed using Bootstrap's alert component. The template iterates over the <code>validaciones</code> array and renders a dismissible alert for each error views/register.ejs L42-L51</p> <p>:</p> <pre><code>&lt;% validaciones.forEach(validacion=&gt; {%&gt;\n  &lt;div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"&gt;\n    &lt;strong&gt;&lt;%= validacion.msg %&gt;&lt;/strong&gt; \n    &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"&gt;&lt;/button&gt;\n  &lt;/div&gt;   \n&lt;% }); %&gt;\n</code></pre> <p>Each validation error object contains a <code>msg</code> property that displays the specific validation failure message.</p> <p>Sources: views/register.ejs L42-L52</p>"},{"location":"Authentication-Views/#registration-styling","title":"Registration Styling","text":"<p>The registration page uses a blue-purple gradient background (<code>linear-gradient(120deg, #3b82f6, #6366f1)</code>) public/css/register.css L8</p> <p>Key CSS classes:</p> Class Purpose Key Properties <code>.registro-container</code> Main container White background, rounded, centered, max-width 400px public/css/register.css L16-L24 <code>.form-group</code> Input wrapper Margin bottom, left-aligned text public/css/register.css L31-L34 <code>.form-group label</code> Input labels Block display, bold font, dark color public/css/register.css L36-L41 <code>.form-group input</code> Form inputs Full width, padding, border with focus effect public/css/register.css L43-L55 <code>.btn-registrarse</code> Submit button Full width, blue background (#3b82f6), hover effect public/css/register.css L57-L72 <code>.btn-login</code> Login link Blue color, hover underline public/css/register.css L74-L86 <p>Sources: public/css/register.css L1-L87</p>"},{"location":"Authentication-Views/#sweetalert2-integration","title":"SweetAlert2 Integration","text":""},{"location":"Authentication-Views/#alert-configuration","title":"Alert Configuration","text":"<p>Both authentication views integrate SweetAlert2 for displaying operation results. The alert system uses a conditional EJS block that checks for an <code>alert</code> variable views/login.ejs L20-L32</p> <p>views/register.ejs L59-L71</p> <p>The SweetAlert2 configuration receives the following parameters from the server:</p> Parameter Description Usage <code>alertTitle</code> Alert dialog title Passed to <code>title</code> property <code>alertMessage</code> Alert body text Passed to <code>text</code> property <code>alertIcon</code> Icon type (success/error/warning) Passed to <code>icon</code> property <code>showConfirmButton</code> Boolean for confirm button visibility Passed to <code>showConfirmButton</code> <code>timer</code> Auto-close timer in milliseconds Passed to <code>timer</code> property <code>ruta</code> Redirect path after alert closes Used in <code>.then()</code> callback"},{"location":"Authentication-Views/#alert-flow-diagram","title":"Alert Flow Diagram","text":"<p>Sources: views/login.ejs L20-L32</p> <p>views/register.ejs L59-L71</p>"},{"location":"Authentication-Views/#implementation-example","title":"Implementation Example","text":"<p>The SweetAlert2 script block in both templates follows this pattern:</p> <pre><code>&lt;% if (typeof alert != 'undefined') { %&gt;\n  &lt;script&gt;\n    Swal.fire({\n      title: '&lt;%= alertTitle %&gt;',\n      text: '&lt;%= alertMessage %&gt;',\n      icon: '&lt;%= alertIcon %&gt;',\n      showConfirmButton: &lt;%= showConfirmButton %&gt;,\n      timer: &lt;%= timer %&gt;\n    }).then (()=&gt; {\n      window.location ='/&lt;%= ruta%&gt;'\n    })\n  &lt;/script&gt;\n&lt;% } %&gt;\n</code></pre> <p>The <code>.then()</code> callback ensures navigation to the specified route (<code>ruta</code>) after the alert closes, either by user interaction or timer expiration views/login.ejs L28-L29</p> <p>views/register.ejs L67-L68</p> <p>Sources: views/login.ejs L18-L32</p> <p>views/register.ejs L57-L71</p>"},{"location":"Authentication-Views/#view-rendering-context","title":"View Rendering Context","text":""},{"location":"Authentication-Views/#login-view-context","title":"Login View Context","text":"<p>The login view expects the following variables to be passed from the route handler:</p> Variable Type Required Purpose <code>alert</code> Boolean No Triggers SweetAlert2 conditional rendering <code>alertTitle</code> String If alert=true Alert dialog title <code>alertMessage</code> String If alert=true Alert message text <code>alertIcon</code> String If alert=true Icon type (success/error/warning/info) <code>showConfirmButton</code> Boolean If alert=true Show/hide confirm button <code>timer</code> Number If alert=true Auto-close timer in milliseconds <code>ruta</code> String If alert=true Redirect path after alert <p>Sources: views/login.ejs L20-L32</p>"},{"location":"Authentication-Views/#registration-view-context","title":"Registration View Context","text":"<p>The registration view expects these variables:</p> Variable Type Required Purpose <code>register</code> Boolean Yes Controls form visibility <code>validaciones</code> Array No Contains validation error objects <code>valores</code> Object No Previously submitted form values <code>valores.nombre</code> String No Repopulates name field <code>valores.email</code> String No Repopulates email field <code>valores.password</code> String No Repopulates password field <code>alert</code> Boolean No Triggers SweetAlert2 rendering <code>alertTitle</code> String If alert=true Alert dialog title <code>alertMessage</code> String If alert=true Alert message text <code>alertIcon</code> String If alert=true Icon type <code>showConfirmButton</code> Boolean If alert=true Show/hide confirm button <code>timer</code> Number If alert=true Auto-close timer <code>ruta</code> String If alert=true Redirect path <p>Each validation error in the <code>validaciones</code> array must contain a <code>msg</code> property views/register.ejs L47</p> <p>Sources: views/register.ejs L9-L71</p>"},{"location":"Authentication-Views/#css-architecture","title":"CSS Architecture","text":""},{"location":"Authentication-Views/#shared-styling-patterns","title":"Shared Styling Patterns","text":"<p>Both authentication views share common styling principles:</p> <ol> <li>Gradient Backgrounds: Full viewport height gradients for visual appeal * Login: <code>linear-gradient(135deg, #74ebd5, #9face6)</code> public/css/login.css L4 * Register: <code>linear-gradient(120deg, #3b82f6, #6366f1)</code> public/css/register.css L8</li> <li>Centered Containers: Flexbox centering on viewport * Both use <code>display: flex</code>, <code>justify-content: center</code>, <code>align-items: center</code></li> <li>Card-Style Forms: White containers with shadows * Rounded corners (8px-15px) * Box shadows for depth * Max-width constraints (400px)</li> <li>Input Styling: * Consistent padding (0.75rem-10px) * Border radius (8px) * Focus effects with color transitions * Bottom margins for spacing</li> <li>Button Styling: * Full or auto width * Blue color schemes * Hover effects with darker shades * Smooth transitions (0.3s)</li> </ol> <p>Sources: public/css/login.css L1-L83</p> <p>public/css/register.css L1-L87</p>"},{"location":"Authentication-Views/#css-file-mapping","title":"CSS File Mapping","text":"<p>Sources: views/login.ejs L5</p> <p>views/register.ejs L7</p> <p>public/css/login.css</p> <p>public/css/register.css</p>"},{"location":"Authentication-Views/#external-dependencies","title":"External Dependencies","text":"<p>Both authentication views load external libraries via CDN:</p>"},{"location":"Authentication-Views/#sweetalert2","title":"SweetAlert2","text":"<ul> <li>Version: 11 (latest)</li> <li>CDN: <code>https://cdn.jsdelivr.net/npm/sweetalert2@11</code></li> <li>Usage: Modal alerts for success/error feedback</li> <li>Loaded in: views/login.ejs L18 views/register.ejs L57</li> </ul>"},{"location":"Authentication-Views/#bootstrap-registration-only","title":"Bootstrap (Registration Only)","text":"<ul> <li>Version: 5.3.7</li> <li>CDN: <code>https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/css/bootstrap.min.css</code></li> <li>Bundle JS: <code>https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js</code></li> <li>Usage: Alert components with dismiss functionality</li> <li>Loaded in: views/register.ejs L5-L6</li> </ul> <p>The Bootstrap bundle is loaded with the <code>defer</code> attribute to prevent render blocking.</p> <p>Sources: views/login.ejs L18</p> <p>views/register.ejs L5-L57</p>"},{"location":"Course-Enrollment/","title":"Course Enrollment","text":"<p>Relevant source files * routes/courses.js * src/cursoController.js * views/confirmInscripcion.ejs</p>"},{"location":"Course-Enrollment/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the course enrollment functionality that allows registered users to enroll in courses. The system implements a two-step enrollment process: a confirmation page followed by database insertion. This page covers the enrollment routes, duplicate prevention logic, database transactions, and integration with user profiles.</p> <p>For information about viewing enrolled courses, see User Profile Page. For course listing and visibility rules, see Course Listing &amp; Visibility. For role-based access control that protects enrollment routes, see Role-Based Access Control.</p>"},{"location":"Course-Enrollment/#enrollment-system-overview","title":"Enrollment System Overview","text":"<p>The enrollment system provides registered users (users with <code>rol === 'registrado'</code>) the ability to enroll in courses through a protected workflow. The system prevents duplicate enrollments and maintains enrollment records in the <code>inscripciones</code> database table.</p> <pre><code>flowchart TD\n\nUser[\"User&lt;br&gt;(rol='registrado')\"]\nCourseList[\"GET /courses&lt;br&gt;Course Listing\"]\nConfirmPage[\"GET /inscribir/:id&lt;br&gt;Confirmation View\"]\nProcessEnroll[\"POST /inscribir/:id&lt;br&gt;Process Enrollment\"]\nCheckDuplicate[\"Check inscripciones&lt;br&gt;table for duplicate\"]\nInsertRecord[\"INSERT INTO&lt;br&gt;inscripciones\"]\nUserProfile[\"GET /perfil&lt;br&gt;User Profile\"]\n\nUser --&gt; CourseList\nCourseList --&gt; ConfirmPage\nConfirmPage --&gt; ProcessEnroll\nProcessEnroll --&gt; CheckDuplicate\nCheckDuplicate --&gt; InsertRecord\nCheckDuplicate --&gt; UserProfile\nInsertRecord --&gt; UserProfile</code></pre> <p>Sources: routes/courses.js L106-L149</p>"},{"location":"Course-Enrollment/#authentication-requirements","title":"Authentication Requirements","text":"<p>Both enrollment routes require two middleware layers:</p> Middleware Function Role Requirement Redirect on Failure <code>estaAutenticado</code> Verifies user is logged in Session must exist <code>/login</code> <code>isRegistrado</code> Verifies user has registered role <code>req.session.rol === 'registrado'</code> <code>/login</code> <p>The middleware chain ensures that only authenticated users with the <code>registrado</code> role can access enrollment functionality. Users with <code>rol === 'admin'</code> or <code>rol === 'publico'</code> are redirected to the login page.</p> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L106</p> <p>routes/courses.js L117</p>"},{"location":"Course-Enrollment/#two-step-enrollment-workflow","title":"Two-Step Enrollment Workflow","text":""},{"location":"Course-Enrollment/#step-1-enrollment-confirmation-get-request","title":"Step 1: Enrollment Confirmation (GET Request)","text":"<p>The first step displays a confirmation page showing course details before enrollment.</p> <p>Route Definition:</p> <pre><code>GET /courses/inscribir/:id\nMiddleware: estaAutenticado, isRegistrado\n</code></pre> <p>Implementation Flow:</p> <pre><code>sequenceDiagram\n  participant User\n  participant GET /inscribir/:id\n  participant Database\n  participant confirmInscripcion.ejs\n\n  User-&gt;&gt;GET /inscribir/:id: \"GET /courses/inscribir/5\"\n  GET /inscribir/:id-&gt;&gt;Database: \"SELECT * FROM cursos WHERE id = ?\"\n  Database--&gt;&gt;GET /inscribir/:id: \"Course record\"\n  loop [Course Found]\n    GET /inscribir/:id-&gt;&gt;confirmInscripcion.ejs: \"render('confirmInscripcion', {curso, login, rol})\"\n    confirmInscripcion.ejs--&gt;&gt;User: \"Confirmation page HTML\"\n    GET /inscribir/:id--&gt;&gt;User: \"redirect('/courses')\"\n  end</code></pre> <p>The route queries the <code>cursos</code> table to retrieve course information and passes it to the <code>confirmInscripcion</code> view template along with session data.</p> <p>Sources: routes/courses.js L106-L114</p>"},{"location":"Course-Enrollment/#step-2-process-enrollment-post-request","title":"Step 2: Process Enrollment (POST Request)","text":"<p>The second step processes the actual enrollment after user confirmation.</p> <p>Route Definition:</p> <pre><code>POST /courses/inscribir/:id\nMiddleware: estaAutenticado, isRegistrado\n</code></pre> <p>Implementation Flow:</p> <pre><code>flowchart TD\n\nStart[\"POST /inscribir/:id\"]\nExtractData[\"Extract:&lt;br&gt;id_curso = req.params.id&lt;br&gt;id_usuario = req.session.usuario.id\"]\nQueryDuplicate[\"SELECT * FROM inscripciones&lt;br&gt;WHERE id_usuario = ? AND id_curso = ?\"]\nCheckResults[\"results.length &gt; 0\"]\nRedirectProfile1[\"redirect('/perfil')&lt;br&gt;Already enrolled\"]\nInsertQuery[\"INSERT INTO inscripciones&lt;br&gt;(id_usuario, id_curso)&lt;br&gt;VALUES (?, ?)\"]\nCheckError[\"Insert error?\"]\nRedirectCourses[\"redirect('/courses')&lt;br&gt;Error occurred\"]\nRedirectProfile2[\"redirect('/perfil')&lt;br&gt;Success\"]\n\nStart --&gt; ExtractData\nExtractData --&gt; QueryDuplicate\nQueryDuplicate --&gt; CheckResults\nCheckResults --&gt; RedirectProfile1\nCheckResults --&gt; InsertQuery\nInsertQuery --&gt; CheckError\nCheckError --&gt; RedirectCourses\nCheckError --&gt; RedirectProfile2</code></pre> <p>Sources: routes/courses.js L117-L149</p>"},{"location":"Course-Enrollment/#data-extraction-and-session-usage","title":"Data Extraction and Session Usage","text":"<p>The enrollment process extracts two critical identifiers:</p> Identifier Source Line Reference <code>id_curso</code> Route parameter <code>req.params.id</code> routes/courses.js L118 <code>id_usuario</code> Session object <code>req.session.usuario.id</code> routes/courses.js L119 <p>The user ID must exist in the session, which is established during login. The session structure includes:</p> <ul> <li><code>req.session.loggedin</code> - Boolean indicating authentication status</li> <li><code>req.session.usuario</code> - User object containing <code>id</code>, <code>nombre</code>, and <code>email</code></li> <li><code>req.session.rol</code> - String indicating user role</li> </ul> <p>Sources: routes/courses.js L118-L119</p>"},{"location":"Course-Enrollment/#duplicate-enrollment-prevention","title":"Duplicate Enrollment Prevention","text":"<p>The system implements duplicate prevention through a database query before insertion:</p> <pre><code>flowchart TD\n\nQuery[\"SELECT * FROM inscripciones&lt;br&gt;WHERE id_usuario = ?&lt;br&gt;AND id_curso = ?\"]\nResults[\"Query Results\"]\nCheck[\"results.length &gt; 0\"]\nSkip[\"Skip insertion&lt;br&gt;redirect('/perfil')\"]\nProceed[\"Proceed to INSERT\"]\n\nQuery --&gt; Results\nResults --&gt; Check\nCheck --&gt; Skip\nCheck --&gt; Proceed</code></pre> <p>Query Parameters:</p> <ul> <li><code>id_usuario</code> - Current user's ID from session</li> <li><code>id_curso</code> - Course ID from route parameter</li> </ul> <p>If a matching record exists in the <code>inscripciones</code> table, the user is silently redirected to their profile page without error messages. This prevents accidental duplicate enrollments but does not inform the user that they were already enrolled.</p> <p>Sources: routes/courses.js L121-L133</p>"},{"location":"Course-Enrollment/#database-operations","title":"Database Operations","text":""},{"location":"Course-Enrollment/#enrollment-table-structure","title":"Enrollment Table Structure","text":"<p>The <code>inscripciones</code> table serves as a junction table implementing the many-to-many relationship between users and courses:</p> Column Type Description <code>id_usuario</code> Foreign Key References <code>usuarios.id</code> <code>id_curso</code> Foreign Key References <code>cursos.id</code>"},{"location":"Course-Enrollment/#sql-operations","title":"SQL Operations","text":"<p>Duplicate Check Query:</p> <pre><code>SELECT * FROM inscripciones \nWHERE id_usuario = ? AND id_curso = ?\n</code></pre> <p>routes/courses.js L121-L124</p> <p>Enrollment Insert Query:</p> <pre><code>INSERT INTO inscripciones (id_usuario, id_curso) \nVALUES (?, ?)\n</code></pre> <p>routes/courses.js L135-L137</p> <p>Both queries use parameterized statements to prevent SQL injection attacks.</p> <p>Sources: routes/courses.js L121-L146</p>"},{"location":"Course-Enrollment/#error-handling-and-redirects","title":"Error Handling and Redirects","text":"<p>The enrollment process implements three redirect patterns:</p> <pre><code>flowchart TD\n\nProcessEnroll[\"POST /inscribir/:id\"]\nErrorDupCheck[\"Error in duplicate check query\"]\nAlreadyEnrolled[\"User already enrolled\"]\nErrorInsert[\"Error in INSERT query\"]\nSuccess[\"Enrollment successful\"]\nRedirCourses[\"/courses\"]\nRedirProfile[\"/perfil\"]\n\nProcessEnroll --&gt; ErrorDupCheck\nProcessEnroll --&gt; AlreadyEnrolled\nProcessEnroll --&gt; ErrorInsert\nProcessEnroll --&gt; Success\nErrorDupCheck --&gt; RedirCourses\nAlreadyEnrolled --&gt; RedirProfile\nErrorInsert --&gt; RedirCourses\nSuccess --&gt; RedirProfile</code></pre> Scenario Redirect Destination Purpose Duplicate check error <code>/courses</code> Return to course listing Already enrolled <code>/perfil</code> Show user their enrolled courses Insert error <code>/courses</code> Return to course listing Successful enrollment <code>/perfil</code> Show confirmation with updated enrollments <p>All errors are logged to console but not displayed to users. The system uses the Post-Redirect-Get pattern to prevent form resubmission.</p> <p>Sources: routes/courses.js L125-L145</p>"},{"location":"Course-Enrollment/#confirmation-view-template","title":"Confirmation View Template","text":"<p>The confirmation page is rendered using the <code>confirmInscripcion.ejs</code> template located at views/confirmInscripcion.ejs L1-L14</p>"},{"location":"Course-Enrollment/#template-data-structure","title":"Template Data Structure","text":"<p>The route passes the following data object to the view:</p> <pre><code>{\n  curso: results[0],           // Course object from database\n  login: req.session.loggedin, // Boolean authentication status\n  rol: req.session.rol         // User role string\n}\n</code></pre>"},{"location":"Course-Enrollment/#template-features","title":"Template Features","text":"<p>The confirmation page displays:</p> <ul> <li>Course title (<code>curso.titulo</code>)</li> <li>Course description (<code>curso.descripcion</code>)</li> <li>Submit button to confirm enrollment</li> <li>Cancel link returning to <code>/courses</code></li> </ul> <p>The form submits via POST to the same route path: <code>/courses/inscribir/&lt;%= curso.id %&gt;</code>.</p> <p>Sources: routes/courses.js L112</p> <p>views/confirmInscripcion.ejs L5-L13</p>"},{"location":"Course-Enrollment/#integration-with-user-profile","title":"Integration with User Profile","text":"<p>After successful enrollment, users are redirected to <code>/perfil</code>, where enrolled courses are displayed. The profile route routes/courses.js L152-L169</p> <p>executes a JOIN query:</p> <pre><code>SELECT c.* \nFROM cursos c\nJOIN inscripciones i ON c.id = i.id_curso\nWHERE i.id_usuario = ?\n</code></pre> <p>This query retrieves all courses for which the user has enrollment records, providing immediate confirmation of the enrollment action.</p> <p>Sources: routes/courses.js L152-L169</p>"},{"location":"Course-Enrollment/#unused-controller-function","title":"Unused Controller Function","text":"<p>The codebase includes an unused enrollment controller at src/cursoController.js L3-L25</p> <p>The <code>inscribirCurso</code> function implements similar logic to the route handler but is never invoked. The routes implement enrollment logic directly in the route handlers rather than delegating to this controller.</p> <pre><code>flowchart TD\n\nRoute[\"routes/courses.js&lt;br&gt;POST /inscribir/:id\"]\nController[\"cursoController.js&lt;br&gt;inscribirCurso()\"]\n\nRoute --&gt; Controller</code></pre> <p>This represents technical debt where duplicate enrollment logic exists in two locations with the controller function being unused.</p> <p>Sources: src/cursoController.js L3-L25</p> <p>routes/courses.js L117-L149</p>"},{"location":"Course-Enrollment/#route-summary","title":"Route Summary","text":"Route Method Middleware Purpose Response <code>/courses/inscribir/:id</code> GET <code>estaAutenticado</code>, <code>isRegistrado</code> Display confirmation page Render <code>confirmInscripcion.ejs</code> <code>/courses/inscribir/:id</code> POST <code>estaAutenticado</code>, <code>isRegistrado</code> Process enrollment Redirect to <code>/perfil</code> or <code>/courses</code> <p>Both routes are defined in routes/courses.js</p> <p>and mounted at the <code>/courses</code> path in the main application, making the full paths <code>/courses/inscribir/:id</code>.</p> <p>Sources: routes/courses.js L106-L149</p>"},{"location":"Course-Listing-%26-Visibility/","title":"Course Listing &amp; Visibility","text":"<p>Relevant source files * routes/courses.js * views/courses.ejs</p>"},{"location":"Course-Listing-%26-Visibility/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the course listing system and its role-based visibility control mechanism. The system implements differential course display based on user authentication status and role, filtering which courses are visible to public users versus authenticated registered users and administrators.</p> <p>For information about course enrollment functionality, see Course Enrollment. For details about creating and managing course visibility settings, see Creating Courses and Editing &amp; Deleting Courses.</p>"},{"location":"Course-Listing-%26-Visibility/#visibility-architecture-overview","title":"Visibility Architecture Overview","text":"<p>The course listing system implements a two-tier visibility model where courses in the database have a <code>visibilidad</code> field that determines their accessibility. The system filters courses based on the requesting user's role before rendering the list.</p> <p>Visibility Control Flow Diagram</p> <pre><code>flowchart TD\n\nRequest[\"GET /courses Request\"]\nSessionCheck[\"Session Check&lt;br&gt;req.session?.rol\"]\nRoleDetection[\"User Role\"]\nPublicoQuery[\"SQL Query&lt;br&gt;WHERE visibilidad='publico'\"]\nFullQuery[\"SQL Query&lt;br&gt;SELECT * FROM cursos\"]\nDBExec[\"db.query() Execution\"]\nResultsCheck[\"Query Success?\"]\nEmptyResults[\"Render with&lt;br&gt;cursos: []\"]\nRenderView[\"Render courses.ejs&lt;br&gt;with results\"]\nViewLayer[\"courses.ejs&lt;br&gt;displays empty list\"]\n\nRequest --&gt; SessionCheck\nSessionCheck --&gt; RoleDetection\nRoleDetection --&gt; PublicoQuery\nRoleDetection --&gt; FullQuery\nRoleDetection --&gt; FullQuery\nPublicoQuery --&gt; DBExec\nFullQuery --&gt; DBExec\nDBExec --&gt; ResultsCheck\nResultsCheck --&gt; EmptyResults\nResultsCheck --&gt; RenderView\nEmptyResults --&gt; ViewLayer\nRenderView --&gt; ViewLayer</code></pre> <p>Sources: routes/courses.js L35-L62</p>"},{"location":"Course-Listing-%26-Visibility/#role-determination-logic","title":"Role Determination Logic","text":"<p>The <code>/courses</code> route handler begins by determining the user's role through session inspection. If no session exists or the user is not logged in, the role defaults to <code>'publico'</code>.</p> Role Session State Query Filter <code>'publico'</code> No session or not logged in <code>WHERE visibilidad='publico'</code> <code>'registrado'</code> Logged in, <code>req.session.rol === 'registrado'</code> No filter (all courses) <code>'admin'</code> Logged in, <code>req.session.rol === 'admin'</code> No filter (all courses) <p>The role detection occurs at routes/courses.js L36</p> <p>using the expression:</p> <pre><code>const rol = req.session?.rol || 'publico';\n</code></pre> <p>This uses optional chaining to safely access the session and provides a default value of <code>'publico'</code> when the session is undefined or the <code>rol</code> property is absent.</p> <p>Sources: routes/courses.js L35-L42</p>"},{"location":"Course-Listing-%26-Visibility/#database-query-construction","title":"Database Query Construction","text":"<p>The route constructs a dynamic SQL query based on the detected role. The base query selects all columns from the <code>cursos</code> table, and a conditional <code>WHERE</code> clause is appended for public users.</p> <p>Query Construction Logic Diagram</p> <pre><code>flowchart TD\n\nStart[\"Initialize base query&lt;br&gt;let sql = 'SELECT * FROM cursos'\"]\nCheckRole[\"rol === 'publico'?\"]\nAppendWhere[\"sql += ' WHERE visibilidad=public'\"]\nExecuteQuery[\"db.query(sql, callback)\"]\n\nStart --&gt; CheckRole\nCheckRole --&gt; AppendWhere\nCheckRole --&gt; ExecuteQuery\nAppendWhere --&gt; ExecuteQuery</code></pre> <p>The implementation at routes/courses.js L38-L42</p> <p>constructs the query as follows:</p> <ul> <li>Line 38: Initialize base SQL query string</li> <li>Lines 40-42: Conditional append of <code>WHERE visibilidad='publico'</code> filter for public users</li> <li>Line 44: Execute query with callback</li> </ul> <p>This approach ensures that:</p> <ul> <li>Public users only see courses marked as <code>visibilidad='publico'</code> in the database</li> <li>Authenticated users (both <code>'registrado'</code> and <code>'admin'</code>) see all courses regardless of visibility setting</li> </ul> <p>Sources: routes/courses.js L38-L42</p>"},{"location":"Course-Listing-%26-Visibility/#error-handling-and-results-processing","title":"Error Handling and Results Processing","text":"<p>The database query execution includes error handling that ensures graceful degradation when database operations fail.</p> <pre><code>flowchart TD\n\nQueryExec[\"db.query() Callback\"]\nErrorCheck[\"error exists?\"]\nLogError[\"console.error(error)\"]\nRenderEmpty[\"res.render('courses')&lt;br&gt;cursos: []&lt;br&gt;login: false/session value&lt;br&gt;rol: session.rol\"]\nRenderSuccess[\"res.render('courses')&lt;br&gt;cursos: results&lt;br&gt;login: session value&lt;br&gt;rol: detected rol\"]\n\nQueryExec --&gt; ErrorCheck\nErrorCheck --&gt; LogError\nErrorCheck --&gt; RenderSuccess\nLogError --&gt; RenderEmpty</code></pre> <p>The error handling at routes/courses.js L44-L61</p> <p>follows this pattern:</p> <ol> <li>Error Path routes/courses.js L45-L54 : When a database error occurs, the error is logged to console, and the view is rendered with an empty array for courses. Session state is still passed to maintain UI consistency.</li> <li>Success Path routes/courses.js L56-L60 : When the query succeeds, the results array is passed directly to the view along with session state and the determined role.</li> </ol> <p>The view receives three critical data points:</p> <ul> <li><code>cursos</code>: Array of course objects (empty on error, query results on success)</li> <li><code>login</code>: Boolean indicating if user has an active session (<code>req.session.loggedin</code>)</li> <li><code>rol</code>: String indicating user's role (<code>'publico'</code>, <code>'registrado'</code>, or <code>'admin'</code>)</li> </ul> <p>Sources: routes/courses.js L44-L61</p>"},{"location":"Course-Listing-%26-Visibility/#view-rendering-and-conditional-display","title":"View Rendering and Conditional Display","text":"<p>The <code>courses.ejs</code> template adapts its display based on the <code>login</code> status and <code>rol</code> value passed from the route handler. The template uses EJS conditional tags to show or hide UI elements.</p> <p>Template Conditional Logic Structure</p> <pre><code>flowchart TD\n\nTemplate[\"courses.ejs Template\"]\nLoginCheck[\"&lt;% if login %&gt;\"]\nHideContent[\"No content displayed\"]\nShowTable[\"Display course table\"]\nRoleCheck[\"&lt;% if rol == 'admin' %&gt;\"]\nShowCreateBtn[\"Show Create New button\"]\nHeaderLoop[\"&lt;% if rol == 'admin' %&gt;\"]\nShowActionsHeader[\"Show Actions column\"]\nRowLoop[\"&lt;% cursos.forEach %&gt;\"]\nRoleCheckRow[\"Role Check in Row\"]\nShowEditDelete[\"Admin: Edit/Delete buttons\"]\nShowEnroll[\"Registrado: Enroll button\"]\n\nTemplate --&gt; LoginCheck\nLoginCheck --&gt; HideContent\nLoginCheck --&gt; ShowTable\nShowTable --&gt; RoleCheck\nRoleCheck --&gt; ShowCreateBtn\nShowTable --&gt; HeaderLoop\nHeaderLoop --&gt; ShowActionsHeader\nShowTable --&gt; RowLoop\nRowLoop --&gt; RoleCheckRow\nRoleCheckRow --&gt; ShowEditDelete\nRoleCheckRow --&gt; ShowEnroll</code></pre>"},{"location":"Course-Listing-%26-Visibility/#display-logic-implementation","title":"Display Logic Implementation","text":"<p>The template structure at views/courses.ejs L8-L57</p> <p>implements the following visibility rules:</p> <ol> <li>Top-Level Authentication Gate views/courses.ejs L8 : The entire course listing table is wrapped in <code>&lt;% if (login) { %&gt;</code>, preventing any course display for unauthenticated users or when login is false.</li> <li>Create Button Visibility views/courses.ejs L12-L14 : The \"Create New\" button with link to <code>/create</code> appears only when <code>rol == \"admin\"</code>.</li> <li>Table Header Conditional Column views/courses.ejs L21-L23 : An \"Acciones\" (Actions) header column is added to the table only for admin users.</li> <li>Row-Level Action Buttons views/courses.ejs L33-L51 : Each course row contains conditional action buttons: * Admin Actions views/courses.ejs L33-L42 : Edit and delete buttons linking to <code>/edit/:id</code> and <code>/delete/:id</code> * Registered User Actions views/courses.ejs L43-L51 : Enroll button submitting POST to <code>/inscribir/:id</code></li> </ol>"},{"location":"Course-Listing-%26-Visibility/#table-structure","title":"Table Structure","text":"<p>The table displays four core course fields for all authenticated users:</p> Column Data Source Display id <code>curso.id</code> Course identifier Titulo <code>curso.titulo</code> Course title Descripcion <code>curso.descripcion</code> Course description Categoria <code>curso.categoria</code> Course category Acciones Role-dependent Admin: Edit/DeleteRegistrado: Enroll <p>The iteration over courses occurs at views/courses.ejs L27-L53</p> <p>using <code>&lt;% cursos.forEach(curso =&gt; { %&gt;</code>.</p> <p>Sources: views/courses.ejs L8-L57</p>"},{"location":"Course-Listing-%26-Visibility/#role-to-view-mapping","title":"Role-to-View Mapping","text":"<p>The following table summarizes which UI elements are visible to each role when accessing <code>/courses</code>:</p> UI Element Publico Registrado Admin Course listing page access \u2713 \u2713 \u2713 Course table display \u2717 \u2713 \u2713 Filtered courses (public only) \u2713 (but hidden) \u2717 \u2717 All courses (regardless of visibility) \u2717 \u2713 \u2713 \"Create New\" button \u2717 \u2717 \u2713 Actions table column \u2717 \u2717 \u2713 Edit button per course \u2717 \u2717 \u2713 Delete button per course \u2717 \u2717 \u2713 Enroll button per course \u2717 \u2713 \u2717 <p>Key Observation: While public users can technically access the <code>/courses</code> endpoint, they see no content because the template requires <code>login</code> to be true. This creates a \"soft\" restriction where the route is accessible but displays nothing, effectively requiring authentication to view any courses.</p> <p>Sources: routes/courses.js L35-L62</p> <p>views/courses.ejs L8-L57</p>"},{"location":"Course-Listing-%26-Visibility/#integration-with-authentication-middleware","title":"Integration with Authentication Middleware","text":"<p>The <code>/courses</code> route at routes/courses.js L35</p> <p>notably does not use authentication middleware (<code>estaAutenticado</code>, <code>isAdmin</code>, or <code>isRegistrado</code>). This design decision allows the route to be accessible to all users, but the visibility filtering and template conditional logic enforce what each user type can actually see.</p> <p>Comparison with Protected Routes:</p> <pre><code>flowchart TD\n\nCreateRoute[\"GET /create\"]\nAuthMW[\"estaAutenticado\"]\nAdminMW[\"isAdmin\"]\nDirectAccess[\"Direct handler execution\"]\nCoursesRoute[\"GET /courses\"]\nNoMiddleware[\"No middleware\"]\nRoleDetection[\"Role detection in handler\"]\nConditionalQuery[\"Conditional SQL query\"]\n\nsubgraph subGraph1 [\"Protected Route Pattern\"]\n    CreateRoute\n    AuthMW\n    AdminMW\n    DirectAccess\n    CreateRoute --&gt; AuthMW\n    AuthMW --&gt; AdminMW\n    AdminMW --&gt; DirectAccess\nend\n\nsubgraph subGraph0 [\"Public Route Pattern\"]\n    CoursesRoute\n    NoMiddleware\n    RoleDetection\n    ConditionalQuery\n    CoursesRoute --&gt; NoMiddleware\n    NoMiddleware --&gt; RoleDetection\n    RoleDetection --&gt; ConditionalQuery\nend</code></pre> <p>This architectural choice means:</p> <ul> <li>The endpoint remains publicly accessible at the HTTP level</li> <li>Authorization is implicit through query filtering rather than explicit through middleware rejection</li> <li>Public users receive a response (albeit with filtered results and limited view rendering)</li> <li>The route handler must defensively handle the absence of session data</li> </ul> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L35-L62</p>"},{"location":"Course-Listing-%26-Visibility/#visibility-field-database-integration","title":"Visibility Field Database Integration","text":"<p>The <code>visibilidad</code> column in the <code>cursos</code> table determines which courses appear in the filtered public view. While the exact schema is defined in database initialization scripts, the query construction at routes/courses.js L40-L42</p> <p>reveals that:</p> <ul> <li>The field is named <code>visibilidad</code> (Spanish for \"visibility\")</li> <li>It accepts at least the value <code>'publico'</code> for publicly visible courses</li> <li>Courses without <code>visibilidad='publico'</code> are hidden from public users but remain visible to authenticated users</li> </ul> <p>This creates a simple binary visibility model where administrators can mark courses as public or private when creating or editing them (see Creating Courses and Editing &amp; Deleting Courses for course creation and modification workflows).</p> <p>Sources: routes/courses.js L38-L42</p>"},{"location":"Course-Management-Endpoints/","title":"Course Management Endpoints","text":"<p>Relevant source files * routes/courses.js * src/controller.js</p>"},{"location":"Course-Management-Endpoints/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a comprehensive reference for all course management HTTP endpoints in the system. These endpoints handle CRUD (Create, Read, Update, Delete) operations on courses and implement role-based access control to ensure only administrators can modify course data.</p> <p>For enrollment-related endpoints, see Enrollment Endpoints. For user and admin profile endpoints, see Profile Endpoints. For authentication endpoints, see Authentication Endpoints.</p>"},{"location":"Course-Management-Endpoints/#endpoint-summary","title":"Endpoint Summary","text":"Method Path Middleware Role Required Description <code>GET</code> <code>/courses</code> None None (public) List courses with role-based filtering <code>GET</code> <code>/create</code> <code>estaAutenticado</code>, <code>isAdmin</code> admin Display course creation form <code>POST</code> <code>/save</code> <code>estaAutenticado</code>, <code>isAdmin</code> admin Save new course to database <code>GET</code> <code>/edit/:id</code> <code>estaAutenticado</code>, <code>isAdmin</code> admin Display edit form for existing course <code>POST</code> <code>/update</code> <code>estaAutenticado</code>, <code>isAdmin</code> admin Update existing course in database <code>GET</code> <code>/delete/:id</code> <code>estaAutenticado</code>, <code>isAdmin</code> admin Delete course from database <p>Sources: routes/courses.js L35-L103</p>"},{"location":"Course-Management-Endpoints/#middleware-architecture","title":"Middleware Architecture","text":""},{"location":"Course-Management-Endpoints/#authentication-and-authorization-flow","title":"Authentication and Authorization Flow","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nEstaAuth[\"estaAutenticado()&lt;br&gt;routes/courses.js:8-14\"]\nIsAdmin[\"isAdmin()&lt;br&gt;routes/courses.js:16-24\"]\nRouteHandler[\"Route Handler\"]\nLoginRedirect[\"Redirect to /login\"]\n\nRequest --&gt; EstaAuth\nEstaAuth --&gt; IsAdmin\nEstaAuth --&gt; LoginRedirect\nIsAdmin --&gt; RouteHandler\nIsAdmin --&gt; LoginRedirect</code></pre> <p>Middleware Functions</p> Function Purpose Location Validation Logic <code>estaAutenticado</code> Verify user is logged in routes/courses.js L8-L14 Checks <code>req.session.loggedin</code> <code>isAdmin</code> Verify user has admin role routes/courses.js L16-L24 Checks <code>req.session.rol === 'admin'</code> <code>isRegistrado</code> Verify user has registered role routes/courses.js L26-L33 Checks <code>req.session.rol === 'registrado'</code> <p>All course modification endpoints (create, update, delete) require both <code>estaAutenticado</code> and <code>isAdmin</code> middleware to execute.</p> <p>Sources: routes/courses.js L8-L33</p>"},{"location":"Course-Management-Endpoints/#get-courses","title":"GET /courses","text":""},{"location":"Course-Management-Endpoints/#description","title":"Description","text":"<p>Lists all courses available in the system. Implements role-based visibility filtering: public users see only courses marked with <code>visibilidad='publico'</code>, while authenticated users see all courses.</p>"},{"location":"Course-Management-Endpoints/#authentication","title":"Authentication","text":"<p>None required (publicly accessible)</p>"},{"location":"Course-Management-Endpoints/#request-parameters","title":"Request Parameters","text":"<p>None</p>"},{"location":"Course-Management-Endpoints/#response","title":"Response","text":"<p>Renders the <code>courses</code> EJS template with the following data:</p> Property Type Description <code>cursos</code> Array Array of course objects from database <code>login</code> Boolean Session login status (<code>req.session.loggedin</code>) <code>rol</code> String User role (<code>publico</code>, <code>registrado</code>, or <code>admin</code>)"},{"location":"Course-Management-Endpoints/#implementation-logic","title":"Implementation Logic","text":"<pre><code>flowchart TD\n\nStart[\"GET /courses\"]\nGetRole[\"Determine role:&lt;br&gt;req.session.rol || 'publico'\"]\nCheckRole[\"rol === 'publico'?\"]\nPublicSQL[\"SQL: SELECT * FROM cursos&lt;br&gt;WHERE visibilidad='publico'\"]\nAllSQL[\"SQL: SELECT * FROM cursos\"]\nQuery[\"db.query()\"]\nError[\"Error?\"]\nRenderEmpty[\"Render with empty array\"]\nRenderResults[\"Render with results\"]\n\nStart --&gt; GetRole\nGetRole --&gt; CheckRole\nCheckRole --&gt; PublicSQL\nCheckRole --&gt; AllSQL\nPublicSQL --&gt; Query\nAllSQL --&gt; Query\nQuery --&gt; Error\nError --&gt; RenderEmpty\nError --&gt; RenderResults</code></pre>"},{"location":"Course-Management-Endpoints/#database-query","title":"Database Query","text":"<p>For public users:</p> <pre><code>SELECT * FROM cursos WHERE visibilidad='publico'\n</code></pre> <p>For authenticated users:</p> <pre><code>SELECT * FROM cursos\n</code></pre>"},{"location":"Course-Management-Endpoints/#error-handling","title":"Error Handling","text":"<p>If database query fails, the endpoint renders the <code>courses</code> template with an empty array and logs the error to console.</p> <p>Sources: routes/courses.js L35-L62</p>"},{"location":"Course-Management-Endpoints/#get-create","title":"GET /create","text":""},{"location":"Course-Management-Endpoints/#description_1","title":"Description","text":"<p>Displays the course creation form interface. This endpoint is restricted to administrators only.</p>"},{"location":"Course-Management-Endpoints/#authentication_1","title":"Authentication","text":"<p>Required: User must be authenticated and have <code>admin</code> role</p>"},{"location":"Course-Management-Endpoints/#middleware-chain","title":"Middleware Chain","text":"<ol> <li><code>estaAutenticado</code> - Validates session exists</li> <li><code>isAdmin</code> - Validates admin role</li> </ol>"},{"location":"Course-Management-Endpoints/#request-parameters_1","title":"Request Parameters","text":"<p>None</p>"},{"location":"Course-Management-Endpoints/#response_1","title":"Response","text":"<p>Renders the <code>create</code> EJS template (course creation form)</p>"},{"location":"Course-Management-Endpoints/#authorization-behavior","title":"Authorization Behavior","text":"<ul> <li>If user is not logged in \u2192 Redirect to <code>/login</code></li> <li>If user lacks admin role \u2192 Redirect to <code>/login</code></li> <li>If user is admin \u2192 Display course creation form</li> </ul> <p>Sources: routes/courses.js L64-L67</p>"},{"location":"Course-Management-Endpoints/#post-save","title":"POST /save","text":""},{"location":"Course-Management-Endpoints/#description_2","title":"Description","text":"<p>Processes the submission of a new course and inserts it into the database. Delegates the actual database operation to the CRUD controller.</p>"},{"location":"Course-Management-Endpoints/#authentication_2","title":"Authentication","text":"<p>Required: User must be authenticated and have <code>admin</code> role</p>"},{"location":"Course-Management-Endpoints/#middleware-chain_1","title":"Middleware Chain","text":"<ol> <li><code>estaAutenticado</code> - Validates session exists</li> <li><code>isAdmin</code> - Validates admin role</li> <li><code>crud.save</code> - Controller function</li> </ol>"},{"location":"Course-Management-Endpoints/#request-parameters_2","title":"Request Parameters","text":"<p>Body Parameters:</p> Field Type Required Description <code>titulo</code> String Yes Course title <code>descripcion</code> String Yes Course description <code>categoria</code> String Yes Course category"},{"location":"Course-Management-Endpoints/#controller-implementation","title":"Controller Implementation","text":"<p>The endpoint delegates to <code>crud.save</code> function which performs the following operation:</p> <p>Database Query:</p> <pre><code>INSERT INTO cursos SET ?\n</code></pre> <p>With object containing: <code>titulo</code>, <code>descripcion</code>, <code>categoria</code></p>"},{"location":"Course-Management-Endpoints/#response_2","title":"Response","text":"<p>Redirects to <code>/courses</code> regardless of success or failure</p>"},{"location":"Course-Management-Endpoints/#flow-diagram","title":"Flow Diagram","text":"<p>Sources: routes/courses.js L70</p> <p>src/controller.js L4-L25</p>"},{"location":"Course-Management-Endpoints/#get-editid","title":"GET /edit/:id","text":""},{"location":"Course-Management-Endpoints/#description_3","title":"Description","text":"<p>Displays the course edit form pre-populated with existing course data. Retrieves the course record from the database and passes it to the edit template.</p>"},{"location":"Course-Management-Endpoints/#authentication_3","title":"Authentication","text":"<p>Required: User must be authenticated and have <code>admin</code> role</p>"},{"location":"Course-Management-Endpoints/#middleware-chain_2","title":"Middleware Chain","text":"<ol> <li><code>estaAutenticado</code> - Validates session exists</li> <li><code>isAdmin</code> - Validates admin role</li> </ol>"},{"location":"Course-Management-Endpoints/#request-parameters_3","title":"Request Parameters","text":"<p>URL Parameters:</p> Parameter Type Required Description <code>id</code> Integer Yes Course ID to edit"},{"location":"Course-Management-Endpoints/#database-query_1","title":"Database Query","text":"<pre><code>SELECT * FROM cursos WHERE id = ?\n</code></pre> <p>Uses parameterized query with <code>req.params.id</code> to prevent SQL injection.</p>"},{"location":"Course-Management-Endpoints/#response_3","title":"Response","text":"<p>Renders the <code>edit</code> EJS template with the following data:</p> Property Type Description <code>curso</code> Object Course record from database (<code>results[0]</code>)"},{"location":"Course-Management-Endpoints/#error-handling_1","title":"Error Handling","text":"<p>If database query fails, throws an error (no graceful handling implemented).</p>"},{"location":"Course-Management-Endpoints/#implementation-details","title":"Implementation Details","text":"<p>The endpoint directly queries the database within the route handler rather than delegating to a controller. The retrieved course object is passed to the edit template where form fields are pre-populated.</p> <p>Sources: routes/courses.js L73-L84</p>"},{"location":"Course-Management-Endpoints/#post-update","title":"POST /update","text":""},{"location":"Course-Management-Endpoints/#description_4","title":"Description","text":"<p>Processes course update requests and modifies the existing course record in the database. Delegates to the CRUD controller for database operations.</p>"},{"location":"Course-Management-Endpoints/#authentication_4","title":"Authentication","text":"<p>Required: User must be authenticated and have <code>admin</code> role</p>"},{"location":"Course-Management-Endpoints/#middleware-chain_3","title":"Middleware Chain","text":"<ol> <li><code>estaAutenticado</code> - Validates session exists</li> <li><code>isAdmin</code> - Validates admin role</li> <li><code>crud.update</code> - Controller function</li> </ol>"},{"location":"Course-Management-Endpoints/#request-parameters_4","title":"Request Parameters","text":"<p>Body Parameters:</p> Field Type Required Description <code>id</code> Integer Yes Course ID to update <code>titulo</code> String Yes Updated course title <code>descripcion</code> String Yes Updated course description <code>categoria</code> String Yes Updated course category"},{"location":"Course-Management-Endpoints/#controller-implementation_1","title":"Controller Implementation","text":"<p>The endpoint delegates to <code>crud.update</code> which executes:</p> <p>Database Query:</p> <pre><code>UPDATE cursos SET ? WHERE id = ?\n</code></pre> <p>With parameters: <code>[{titulo, descripcion, categoria}, id]</code></p>"},{"location":"Course-Management-Endpoints/#response_4","title":"Response","text":"<p>Redirects to <code>/courses</code> after update attempt</p>"},{"location":"Course-Management-Endpoints/#error-handling_2","title":"Error Handling","text":"<p>Logs error to console if update fails, then redirects to <code>/courses</code></p> <p>Sources: routes/courses.js L103</p> <p>src/controller.js L28-L52</p>"},{"location":"Course-Management-Endpoints/#get-deleteid","title":"GET /delete/:id","text":""},{"location":"Course-Management-Endpoints/#description_5","title":"Description","text":"<p>Permanently deletes a course from the database. This is a destructive operation with no confirmation step at the API level (confirmation is handled in the frontend).</p>"},{"location":"Course-Management-Endpoints/#authentication_5","title":"Authentication","text":"<p>Required: User must be authenticated and have <code>admin</code> role</p>"},{"location":"Course-Management-Endpoints/#middleware-chain_4","title":"Middleware Chain","text":"<ol> <li><code>estaAutenticado</code> - Validates session exists</li> <li><code>isAdmin</code> - Validates admin role</li> </ol>"},{"location":"Course-Management-Endpoints/#request-parameters_5","title":"Request Parameters","text":"<p>URL Parameters:</p> Parameter Type Required Description <code>id</code> Integer Yes Course ID to delete"},{"location":"Course-Management-Endpoints/#database-query_2","title":"Database Query","text":"<pre><code>DELETE FROM cursos WHERE id = ?\n</code></pre> <p>Uses parameterized query with <code>req.params.id</code> to prevent SQL injection.</p>"},{"location":"Course-Management-Endpoints/#response_5","title":"Response","text":"<p>Redirects to <code>/courses</code> after deletion</p>"},{"location":"Course-Management-Endpoints/#error-handling_3","title":"Error Handling","text":"<p>If database query fails, throws an error (no graceful handling implemented).</p>"},{"location":"Course-Management-Endpoints/#cascading-effects","title":"Cascading Effects","text":"<p>Warning: This operation does not handle foreign key constraints. If enrollments (<code>inscripciones</code> table) reference this course via <code>id_curso</code>, the database may reject the deletion depending on foreign key configuration.</p> <p>Sources: routes/courses.js L87-L98</p>"},{"location":"Course-Management-Endpoints/#route-to-controller-mapping","title":"Route-to-Controller Mapping","text":"<p>The following diagram maps HTTP routes to their implementation in the codebase:</p> <p>Sources: routes/courses.js L1-L187</p> <p>src/controller.js L1-L53</p>"},{"location":"Course-Management-Endpoints/#security-considerations","title":"Security Considerations","text":""},{"location":"Course-Management-Endpoints/#access-control-matrix","title":"Access Control Matrix","text":"Endpoint Public Registered Admin <code>GET /courses</code> \u2713 (filtered) \u2713 (all) \u2713 (all) <code>GET /create</code> \u2717 \u2717 \u2713 <code>POST /save</code> \u2717 \u2717 \u2713 <code>GET /edit/:id</code> \u2717 \u2717 \u2713 <code>POST /update</code> \u2717 \u2717 \u2713 <code>GET /delete/:id</code> \u2717 \u2717 \u2713"},{"location":"Course-Management-Endpoints/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All database queries use parameterized queries with placeholders (<code>?</code>) to prevent SQL injection attacks:</p> <ul> <li>Edit query: <code>&lt;FileRef file-url=\"https://github.com/Lourdes12587/Week06/blob/ce0c3bcd/routes/courses.js#L77-L77\" min=77  file-path=\"routes/courses.js\"&gt;Hii&lt;/FileRef&gt;</code> uses <code>[id]</code></li> <li>Delete query: <code>&lt;FileRef file-url=\"https://github.com/Lourdes12587/Week06/blob/ce0c3bcd/routes/courses.js#L91-L91\" min=91  file-path=\"routes/courses.js\"&gt;Hii&lt;/FileRef&gt;</code> uses <code>[id]</code></li> <li>Update query: <code>&lt;FileRef file-url=\"https://github.com/Lourdes12587/Week06/blob/ce0c3bcd/src/controller.js#L36-L42\" min=36 max=42 file-path=\"src/controller.js\"&gt;Hii&lt;/FileRef&gt;</code> uses <code>[{...}, id]</code></li> </ul>"},{"location":"Course-Management-Endpoints/#session-validation","title":"Session Validation","text":"<p>The <code>estaAutenticado</code> middleware validates session state before allowing access:</p> <pre><code>if (req.session &amp;&amp; req.session.loggedin)\n</code></pre> <p>The <code>isAdmin</code> middleware further restricts access:</p> <pre><code>if (req.session?.loggedin &amp;&amp; req.session?.rol === 'admin')\n</code></pre> <p>Sources: routes/courses.js L8-L24</p>"},{"location":"Course-Management-Endpoints/#common-response-patterns","title":"Common Response Patterns","text":""},{"location":"Course-Management-Endpoints/#success-responses","title":"Success Responses","text":"<p>All modification endpoints (<code>save</code>, <code>update</code>, <code>delete</code>) follow the Post-Redirect-Get (PRG) pattern:</p> <ol> <li>Process the request</li> <li>Perform database operation</li> <li>Redirect to <code>/courses</code></li> </ol> <p>This prevents duplicate submissions from browser refresh and provides a clean URL after operations.</p>"},{"location":"Course-Management-Endpoints/#unauthorized-access","title":"Unauthorized Access","text":"<p>Requests without proper authentication or authorization are redirected to <code>/login</code> by the middleware chain.</p>"},{"location":"Course-Management-Endpoints/#error-handling_4","title":"Error Handling","text":"<p>Most endpoints implement minimal error handling:</p> <ul> <li>Database errors are logged to console</li> <li>Successful operations and errors both redirect to <code>/courses</code></li> <li>The <code>GET /courses</code> endpoint provides graceful degradation by rendering with an empty course array</li> </ul> <p>Sources: routes/courses.js L35-L103</p> <p>src/controller.js L4-L52</p>"},{"location":"Course-Management-System/","title":"Course Management System","text":"<p>Relevant source files * routes/courses.js * src/controller.js * views/courses.ejs</p>"},{"location":"Course-Management-System/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides an overview of the course management functionality within the application. It covers the CRUD operations for courses, role-based access control mechanisms, and the visibility system that determines which users can view and interact with courses. For detailed information on specific operations, see Creating Courses, Editing &amp; Deleting Courses, Course Listing &amp; Visibility, and Course Enrollment. For user authentication and role definitions, see Authentication &amp; Authorization and Role-Based Access Control.</p> <p>The course management system is implemented primarily through <code>routes/courses.js</code>, which defines all course-related endpoints, and <code>src/controller.js</code>, which provides CRUD controller functions for database operations.</p>"},{"location":"Course-Management-System/#system-overview","title":"System Overview","text":"<p>The course management system provides distinct capabilities based on user roles:</p> Role Capabilities <code>publico</code> View courses with <code>visibilidad='publico'</code> <code>registrado</code> View all visible courses, enroll in courses, view personal enrolled courses <code>admin</code> Full CRUD operations on courses, manage visibility, view statistics <p>All course data is stored in the <code>cursos</code> table within the MySQL database. Course enrollment relationships are tracked in the <code>inscripciones</code> junction table, linking <code>id_usuario</code> to <code>id_curso</code>.</p> <p>Sources: routes/courses.js L1-L187</p>"},{"location":"Course-Management-System/#route-architecture","title":"Route Architecture","text":"<p>The course management routes are organized within <code>routes/courses.js</code> and follow a consistent pattern of authentication and authorization checks before executing operations.</p>"},{"location":"Course-Management-System/#course-management-route-map","title":"Course Management Route Map","text":"<pre><code>flowchart TD\n\nCoursesRoute[\"GET /courses&lt;br&gt;(no auth required)\"]\nInscribirGet[\"GET /inscribir/:id&lt;br&gt;(estaAutenticado + isRegistrado)\"]\nInscribirPost[\"POST /inscribir/:id&lt;br&gt;(estaAutenticado + isRegistrado)\"]\nPerfilRoute[\"GET /perfil&lt;br&gt;(estaAutenticado + isRegistrado)\"]\nCreateGet[\"GET /create&lt;br&gt;(estaAutenticado + isAdmin)\"]\nSavePost[\"POST /save&lt;br&gt;(estaAutenticado + isAdmin)\"]\nEditGet[\"GET /edit/:id&lt;br&gt;(estaAutenticado + isAdmin)\"]\nUpdatePost[\"POST /update&lt;br&gt;(estaAutenticado + isAdmin)\"]\nDeleteGet[\"GET /delete/:id&lt;br&gt;(estaAutenticado + isAdmin)\"]\nAdminPerfilRoute[\"GET /admin/perfil&lt;br&gt;(estaAutenticado + isAdmin)\"]\nCrudSave[\"crud.save\"]\nCrudUpdate[\"crud.update\"]\nCursosTable[\"cursos table\"]\nInscripcionesTable[\"inscripciones table\"]\nCreateView[\"render('create')\"]\n\nCoursesRoute --&gt; CursosTable\nInscribirGet --&gt; CursosTable\nInscribirPost --&gt; InscripcionesTable\nPerfilRoute --&gt; CursosTable\nPerfilRoute --&gt; InscripcionesTable\nCreateGet --&gt; CreateView\nSavePost --&gt; CrudSave\nCrudSave --&gt; CursosTable\nEditGet --&gt; CursosTable\nUpdatePost --&gt; CrudUpdate\nCrudUpdate --&gt; CursosTable\nDeleteGet --&gt; CursosTable\nAdminPerfilRoute --&gt; CursosTable\n\nsubgraph subGraph4 [\"Database Tables\"]\n    CursosTable\n    InscripcionesTable\nend\n\nsubgraph Controllers [\"Controllers\"]\n    CrudSave\n    CrudUpdate\nend\n\nsubgraph subGraph2 [\"Admin Routes\"]\n    CreateGet\n    SavePost\n    EditGet\n    UpdatePost\n    DeleteGet\n    AdminPerfilRoute\nend\n\nsubgraph subGraph1 [\"Registered User Routes\"]\n    InscribirGet\n    InscribirPost\n    PerfilRoute\nend\n\nsubgraph subGraph0 [\"Public Access\"]\n    CoursesRoute\nend</code></pre> <p>Sources: routes/courses.js L35-L185</p>"},{"location":"Course-Management-System/#middleware-chain","title":"Middleware Chain","text":"<p>Three middleware functions enforce access control throughout the course management system:</p>"},{"location":"Course-Management-System/#estaautenticado","title":"estaAutenticado","text":"<p>Verifies that a user has an active session before allowing access to protected routes.</p> <pre><code>function estaAutenticado(req, res, next)\n</code></pre> <p>Checks <code>req.session.loggedin</code> and redirects to <code>/login</code> if false.</p> <p>Sources: routes/courses.js L8-L14</p>"},{"location":"Course-Management-System/#isadmin","title":"isAdmin","text":"<p>Ensures the authenticated user has the <code>admin</code> role.</p> <pre><code>function isAdmin(req, res, next)\n</code></pre> <p>Verifies <code>req.session.rol === 'admin'</code> and redirects to <code>/login</code> if the condition is not met.</p> <p>Sources: routes/courses.js L16-L24</p>"},{"location":"Course-Management-System/#isregistrado","title":"isRegistrado","text":"<p>Ensures the authenticated user has the <code>registrado</code> role.</p> <pre><code>function isRegistrado(req, res, next)\n</code></pre> <p>Verifies <code>req.session.rol === 'registrado'</code> and redirects to <code>/login</code> if the condition is not met.</p> <p>Sources: routes/courses.js L26-L33</p>"},{"location":"Course-Management-System/#course-crud-operations","title":"Course CRUD Operations","text":""},{"location":"Course-Management-System/#course-data-structure","title":"Course Data Structure","text":"<p>The <code>cursos</code> table stores the following fields for each course:</p> Field Type Description <code>id</code> Primary Key Unique course identifier <code>titulo</code> String Course title <code>descripcion</code> String Course description <code>categoria</code> String Course category classification <code>visibilidad</code> Enum Access control: <code>'publico'</code> or other values"},{"location":"Course-Management-System/#crud-controller-functions","title":"CRUD Controller Functions","text":"<p>The <code>src/controller.js</code> module provides two core CRUD operations:</p>"},{"location":"Course-Management-System/#save","title":"save","text":"<p>Inserts a new course record into the database.</p> <p>Request Body Parameters:</p> <ul> <li><code>titulo</code>: Course title</li> <li><code>descripcion</code>: Course description</li> <li><code>categoria</code>: Course category</li> </ul> <p>Database Operation: <code>INSERT INTO cursos SET ?</code></p> <p>Response: Redirects to <code>/courses</code></p> <p>Sources: src/controller.js L4-L25</p>"},{"location":"Course-Management-System/#update","title":"update","text":"<p>Modifies an existing course record.</p> <p>Request Body Parameters:</p> <ul> <li><code>id</code>: Course identifier</li> <li><code>titulo</code>: Updated title</li> <li><code>descripcion</code>: Updated description</li> <li><code>categoria</code>: Updated category</li> </ul> <p>Database Operation: <code>UPDATE cursos SET ? WHERE id = ?</code></p> <p>Response: Redirects to <code>/courses</code></p> <p>Sources: src/controller.js L28-L52</p>"},{"location":"Course-Management-System/#visibility-control-system","title":"Visibility Control System","text":"<p>The course listing implements visibility filtering based on user role:</p> <pre><code>flowchart TD\n\nRequest[\"GET /courses request\"]\nCheckRole[\"Extract req.session.rol&lt;br&gt;Default: 'publico'\"]\nBaseQuery[\"SELECT * FROM cursos\"]\nPublicFilter[\"Unsupported markdown: list\"]\nNoFilter[\"No additional WHERE clause\"]\nPublicUser[\"rol === 'publico'\"]\nAuthUser[\"rol === 'registrado'&lt;br&gt;or 'admin'\"]\nQueryDB[\"db.query(sql, ...)\"]\nRenderView[\"render('courses', {cursos, login, rol})\"]\n\nRequest --&gt; CheckRole\nCheckRole --&gt; PublicUser\nCheckRole --&gt; AuthUser\nPublicUser --&gt; BaseQuery\nPublicFilter --&gt; QueryDB\nAuthUser --&gt; BaseQuery\nNoFilter --&gt; QueryDB\nQueryDB --&gt; RenderView\n\nsubgraph subGraph0 [\"SQL Query Construction\"]\n    BaseQuery\n    PublicFilter\n    NoFilter\n    BaseQuery --&gt; PublicFilter\n    BaseQuery --&gt; NoFilter\nend</code></pre> <p>Logic:</p> <ul> <li>Public users (<code>rol === 'publico'</code>) see only courses where <code>visibilidad='publico'</code></li> <li>Registered users and admins see all courses regardless of visibility</li> </ul> <p>Implementation: routes/courses.js L35-L62</p> <p>Sources: routes/courses.js L35-L62</p>"},{"location":"Course-Management-System/#request-response-flow","title":"Request-Response Flow","text":""},{"location":"Course-Management-System/#admin-course-creation-flow","title":"Admin Course Creation Flow","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant routes/courses.js\n  participant Middleware Chain\n  participant src/controller.js\n  participant MySQL cursos table\n\n  Browser-&gt;&gt;routes/courses.js: \"GET /create\"\n  routes/courses.js-&gt;&gt;Middleware Chain: \"estaAutenticado()\"\n  Middleware Chain-&gt;&gt;Middleware Chain: \"isAdmin()\"\n  Middleware Chain-&gt;&gt;routes/courses.js: \"Authorization OK\"\n  routes/courses.js-&gt;&gt;Browser: \"render('create')\"\n  Browser-&gt;&gt;routes/courses.js: \"POST /save\n  routes/courses.js-&gt;&gt;Middleware Chain: {titulo, descripcion, categoria}\"\n  Middleware Chain-&gt;&gt;Middleware Chain: \"estaAutenticado()\"\n  Middleware Chain-&gt;&gt;src/controller.js: \"isAdmin()\"\n  src/controller.js-&gt;&gt;MySQL cursos table: \"crud.save(req, res)\"\n  MySQL cursos table-&gt;&gt;src/controller.js: \"INSERT INTO cursos SET ?\"\n  src/controller.js-&gt;&gt;Browser: \"Insert complete\"</code></pre> <p>Sources: routes/courses.js L64-L70</p> <p>src/controller.js L4-L25</p>"},{"location":"Course-Management-System/#user-enrollment-flow","title":"User Enrollment Flow","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant routes/courses.js\n  participant Middleware Chain\n  participant MySQL Database\n\n  Browser-&gt;&gt;routes/courses.js: \"GET /inscribir/:id\"\n  routes/courses.js-&gt;&gt;Middleware Chain: \"estaAutenticado() + isRegistrado()\"\n  Middleware Chain-&gt;&gt;routes/courses.js: \"Authorization OK\"\n  routes/courses.js-&gt;&gt;MySQL Database: \"SELECT * FROM cursos WHERE id = ?\"\n  MySQL Database-&gt;&gt;routes/courses.js: \"Course data\"\n  routes/courses.js-&gt;&gt;Browser: \"render('confirmInscripcion', {curso})\"\n  Browser-&gt;&gt;routes/courses.js: \"POST /inscribir/:id\"\n  routes/courses.js-&gt;&gt;Middleware Chain: \"estaAutenticado() + isRegistrado()\"\n  Middleware Chain-&gt;&gt;routes/courses.js: \"Authorization OK\"\n  routes/courses.js-&gt;&gt;MySQL Database: \"SELECT * FROM inscripciones\n  loop [\"Already enrolled\"]\n    MySQL Database-&gt;&gt;routes/courses.js: WHERE id_usuario AND id_curso\"\n    routes/courses.js-&gt;&gt;Browser: \"Record exists\"\n    MySQL Database-&gt;&gt;routes/courses.js: \"redirect('/perfil')\"\n    routes/courses.js-&gt;&gt;MySQL Database: \"No record\"\n    MySQL Database-&gt;&gt;routes/courses.js: \"INSERT INTO inscripciones\"\n    routes/courses.js-&gt;&gt;Browser: \"Insert complete\"\n  end</code></pre> <p>Sources: routes/courses.js L106-L149</p>"},{"location":"Course-Management-System/#view-integration","title":"View Integration","text":"<p>The course listing view (<code>views/courses.ejs</code>) adapts its interface based on the user's role:</p>"},{"location":"Course-Management-System/#conditional-ui-elements","title":"Conditional UI Elements","text":"User Role UI Elements Displayed Not logged in Read-only course table <code>registrado</code> Course table + \"Inscribirse\" buttons per course <code>admin</code> Course table + \"Crear Nuevo\" button + \"Edit\" and \"Delete\" actions per course <p>Key Template Logic:</p> <ul> <li>Line 8: <code>&lt;% if (login) { %&gt;</code> - Shows table only for authenticated users</li> <li>Line 12: <code>&lt;% if (rol == \"admin\") { %&gt;</code> - Shows create button for admins</li> <li>Line 21: <code>&lt;% if (rol == \"admin\") { %&gt;</code> - Adds \"Acciones\" column header for admins</li> <li>Line 33: Admin-specific edit/delete action buttons</li> <li>Line 43: <code>&lt;% if (rol === \"registrado\") { %&gt;</code> - Shows enrollment button for registered users</li> </ul> <p>Sources: views/courses.ejs L1-L58</p>"},{"location":"Course-Management-System/#course-operations-summary","title":"Course Operations Summary","text":""},{"location":"Course-Management-System/#read-operations","title":"Read Operations","text":"Route Middleware Description View Rendered <code>GET /courses</code> None List courses (filtered by role) <code>courses.ejs</code> <code>GET /edit/:id</code> <code>estaAutenticado + isAdmin</code> Retrieve course for editing <code>edit.ejs</code> <code>GET /inscribir/:id</code> <code>estaAutenticado + isRegistrado</code> Show enrollment confirmation <code>confirmInscripcion.ejs</code> <code>GET /perfil</code> <code>estaAutenticado + isRegistrado</code> Show user's enrolled courses <code>perfil.ejs</code> <code>GET /admin/perfil</code> <code>estaAutenticado + isAdmin</code> Show admin dashboard with stats <code>adminPerfil.ejs</code>"},{"location":"Course-Management-System/#write-operations","title":"Write Operations","text":"Route Middleware Controller Database Operation Redirect Target <code>POST /save</code> <code>estaAutenticado + isAdmin</code> <code>crud.save</code> <code>INSERT INTO cursos</code> <code>/courses</code> <code>POST /update</code> <code>estaAutenticado + isAdmin</code> <code>crud.update</code> <code>UPDATE cursos</code> <code>/courses</code> <code>GET /delete/:id</code> <code>estaAutenticado + isAdmin</code> Inline <code>DELETE FROM cursos</code> <code>/courses</code> <code>POST /inscribir/:id</code> <code>estaAutenticado + isRegistrado</code> Inline <code>INSERT INTO inscripciones</code> <code>/perfil</code> <p>Sources: routes/courses.js L35-L185</p>"},{"location":"Course-Management-System/#database-query-patterns","title":"Database Query Patterns","text":"<p>The course management system uses parameterized queries to prevent SQL injection:</p> <p>Parameterized SELECT:</p> <pre><code>SELECT * FROM cursos WHERE id = ?\n</code></pre> <p>Parameters: <code>[id]</code></p> <p>Parameterized INSERT:</p> <pre><code>INSERT INTO cursos SET ?\n</code></pre> <p>Parameters: <code>{titulo, descripcion, categoria}</code></p> <p>Parameterized UPDATE:</p> <pre><code>UPDATE cursos SET ? WHERE id = ?\n</code></pre> <p>Parameters: <code>[{titulo, descripcion, categoria}, id]</code></p> <p>Parameterized DELETE:</p> <pre><code>DELETE FROM cursos WHERE id = ?\n</code></pre> <p>Parameters: <code>[id]</code></p> <p>Join Query for User Enrollments:</p> <pre><code>SELECT c.* \nFROM cursos c\nJOIN inscripciones i ON c.id = i.id_curso\nWHERE i.id_usuario = ?\n</code></pre> <p>Parameters: <code>[idUsuario]</code></p> <p>Sources: routes/courses.js L38-L161</p> <p>src/controller.js L9-L50</p>"},{"location":"Course-Management-System/#error-handling","title":"Error Handling","text":"<p>Error handling in the course management system follows consistent patterns:</p> <ol> <li>Database Query Errors: Log to console and redirect to safe routes</li> <li>Missing Records: Return empty results or redirect to course listing</li> <li>Authorization Failures: Redirect to <code>/login</code></li> </ol> <p>Example from enrollment check:</p> <ul> <li>If course not found: Redirect to <code>/courses</code> routes/courses.js L110</li> <li>If database error during enrollment check: Log and redirect to <code>/courses</code> routes/courses.js L125-L128</li> </ul> <p>Sources: routes/courses.js L44-L54</p> <p>routes/courses.js L77-L83</p> <p>src/controller.js L16-L23</p>"},{"location":"Creating-Courses/","title":"Creating Courses","text":"<p>Relevant source files * routes/courses.js * src/controller.js * views/create.ejs</p>"},{"location":"Creating-Courses/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This page documents the course creation workflow available exclusively to administrators. It covers the form interface, authorization requirements, database insertion logic, and the complete request flow from displaying the creation form to persisting a new course record.</p> <p>For modifying or removing existing courses, see Editing &amp; Deleting Courses. For information about how courses are displayed to different user roles, see Course Listing &amp; Visibility.</p>"},{"location":"Creating-Courses/#authorization-requirements","title":"Authorization Requirements","text":"<p>Course creation is protected by a two-stage authorization chain that enforces both authentication and role-based access control.</p> Middleware Function Purpose Implementation <code>estaAutenticado</code> Verifies active session Checks <code>req.session.loggedin</code> <code>isAdmin</code> Enforces admin role Requires <code>req.session.rol === 'admin'</code> <p>Both middleware functions redirect unauthorized users to <code>/login</code> if authorization fails. The middleware chain executes sequentially before any course creation logic runs.</p> <p>Sources: routes/courses.js L8-L24</p>"},{"location":"Creating-Courses/#course-creation-request-flow","title":"Course Creation Request Flow","text":"<p>The following diagram illustrates the complete flow from initial form request through database persistence.</p>"},{"location":"Creating-Courses/#request-flow-diagram","title":"Request Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant Express Router\n  participant routes/courses.js\n  participant estaAutenticado\n  participant middleware\n  participant isAdmin\n  participant create.ejs\n  participant template\n  participant controller.save\n  participant src/controller.js\n  participant MySQL Database\n  participant cursos table\n\n  note over Browser,cursos table: GET /create - Display Form\n  Browser-&gt;&gt;Express Router: \"GET /create\"\n  Express Router-&gt;&gt;estaAutenticado: \"Check session\"\n  estaAutenticado-&gt;&gt;isAdmin: \"Session valid\"\n  isAdmin-&gt;&gt;create.ejs: \"Admin role confirmed\"\n  create.ejs-&gt;&gt;Browser: \"Render creation form\"\n  note over Browser,cursos table: POST /save - Submit Form\n  Browser-&gt;&gt;Express Router: \"POST /save\n  Express Router-&gt;&gt;estaAutenticado: {titulo, descripcion, categoria}\"\n  estaAutenticado-&gt;&gt;isAdmin: \"Check session\"\n  isAdmin-&gt;&gt;controller.save: \"Session valid\"\n  controller.save-&gt;&gt;MySQL Database: \"Call save(req, res)\"\n  MySQL Database-&gt;&gt;controller.save: \"INSERT INTO cursos\"\n  controller.save-&gt;&gt;Browser: \"Confirm insertion\"</code></pre> <p>Sources: routes/courses.js L64-L70</p> <p>src/controller.js L4-L24</p>"},{"location":"Creating-Courses/#route-definitions","title":"Route Definitions","text":""},{"location":"Creating-Courses/#get-create-route","title":"GET /create Route","text":"<p>Displays the course creation form to authenticated administrators.</p> <pre><code>router.get('/create', estaAutenticado, isAdmin, (req, res) =&gt; {\n    res.render('create');\n});\n</code></pre> <p>Location: routes/courses.js L64-L66</p> <p>Middleware Chain:</p> <ol> <li><code>estaAutenticado</code> - Validates session existence</li> <li><code>isAdmin</code> - Validates <code>rol === 'admin'</code></li> </ol> <p>Response: Renders the <code>create.ejs</code> template with no additional data passed to the view.</p>"},{"location":"Creating-Courses/#post-save-route","title":"POST /save Route","text":"<p>Processes the submitted form data and persists the new course to the database.</p> <pre><code>router.post('/save', estaAutenticado, isAdmin, crud.save);\n</code></pre> <p>Location: routes/courses.js L70</p> <p>Middleware Chain: Same authorization requirements as GET /create</p> <p>Handler: Delegates to <code>crud.save</code> function from <code>src/controller.js</code></p> <p>Sources: routes/courses.js L64-L70</p>"},{"location":"Creating-Courses/#controller-logic","title":"Controller Logic","text":"<p>The <code>save</code> function in the CRUD controller handles the database insertion logic.</p>"},{"location":"Creating-Courses/#code-entity-mapping","title":"Code Entity Mapping","text":"<pre><code>flowchart TD\n\nSaveRoute[\"POST /save&lt;br&gt;routes/courses.js:70\"]\nCrudModule[\"crud = require('../src/controller')&lt;br&gt;routes/courses.js:5\"]\nSaveFunction[\"exports.save&lt;br&gt;src/controller.js:4\"]\nDBModule[\"db = require('../config/db')&lt;br&gt;src/controller.js:1\"]\nDBQuery[\"db.query('INSERT INTO cursos SET ?')&lt;br&gt;src/controller.js:9-24\"]\nCursosTable[\"cursos table&lt;br&gt;(id, titulo, descripcion, categoria)\"]\n\nSaveRoute --&gt; CrudModule\nCrudModule --&gt; SaveFunction\nSaveFunction --&gt; DBModule\nDBModule --&gt; DBQuery\nDBQuery --&gt; CursosTable</code></pre> <p>Sources: routes/courses.js L5-L70</p> <p>src/controller.js L1-L24</p>"},{"location":"Creating-Courses/#function-implementation","title":"Function Implementation","text":"<p>The <code>save</code> function extracts form data from <code>req.body</code> and constructs an INSERT query:</p> <p>Function Signature: <code>exports.save = (req, res) =&gt; { ... }</code></p> <p>Input Parameters (from req.body):</p> <ul> <li><code>titulo</code> - Course title string</li> <li><code>descripcion</code> - Course description string</li> <li><code>categoria</code> - Course category string</li> </ul> <p>Database Operation:</p> <pre><code>INSERT INTO cursos SET ?\n</code></pre> <p>The <code>?</code> placeholder is replaced with an object containing the three fields. The MySQL driver automatically converts the object to a SET clause.</p> <p>Success Behavior: Redirects to <code>/courses</code> (the course listing page)</p> <p>Error Behavior: Logs error to console and still redirects to <code>/courses</code></p> <p>Location: src/controller.js L4-L24</p> <p>Sources: src/controller.js L4-L24</p>"},{"location":"Creating-Courses/#form-interface","title":"Form Interface","text":"<p>The course creation form is rendered by the <code>create.ejs</code> template.</p>"},{"location":"Creating-Courses/#form-structure","title":"Form Structure","text":"<pre><code>flowchart TD\n\nForm[\"\"]\nTituloField[\"Input: titulo&lt;br&gt;type='text'&lt;br&gt;required field\"]\nDescField[\"Input: descripcion&lt;br&gt;type='text'&lt;br&gt;required field\"]\nCatField[\"Input: categoria&lt;br&gt;type='text'&lt;br&gt;required field\"]\nSubmitBtn[\"Submit Button&lt;br&gt;'Guardar'\"]\nCancelBtn[\"Cancel Link&lt;br&gt;href='/courses'\"]\n\nForm --&gt; TituloField\nForm --&gt; DescField\nForm --&gt; CatField\nForm --&gt; SubmitBtn\nForm --&gt; CancelBtn</code></pre> <p>Sources: views/create.ejs L10-L26</p>"},{"location":"Creating-Courses/#template-implementation","title":"Template Implementation","text":"<p>The form uses Bootstrap styling classes and submits to the <code>/save</code> endpoint:</p> Field HTML ID Name Attribute Label Title <code>titulo</code> <code>titulo</code> \"Titulo:\" Description <code>descripcion</code> <code>descripcion</code> \"Descripcion:\" Category <code>categoria</code> <code>categoria</code> \"Categoria:\" <p>Form Action: <code>/save</code> (POST method)</p> <p>Buttons:</p> <ul> <li>Guardar - Primary button (blue) that submits the form</li> <li>Cancelar - Danger button (red) that links back to <code>/courses</code></li> </ul> <p>Template Structure:</p> <ul> <li>Includes <code>partials/head</code> for common HTML head elements</li> <li>Includes <code>partials/header</code> for navigation</li> <li>Contains a centered card (<code>w-25</code> width class) with the form</li> </ul> <p>Location: views/create.ejs L1-L29</p> <p>Sources: views/create.ejs L1-L29</p>"},{"location":"Creating-Courses/#database-insertion","title":"Database Insertion","text":""},{"location":"Creating-Courses/#query-execution-flow","title":"Query Execution Flow","text":"<pre><code>flowchart TD\n\nReqBody[\"req.body&lt;br&gt;{titulo, descripcion, categoria}\"]\nQueryObject[\"Query Object&lt;br&gt;{titulo: ..., descripcion: ..., categoria: ...}\"]\nDBQuery[\"db.query('INSERT INTO cursos SET ?', queryObject)\"]\nCursosTable[\"cursos table\"]\nAutoIncrement[\"Auto-generated id\"]\nDefaultVis[\"Default visibilidad\"]\nRedirect[\"res.redirect('/courses')\"]\n\nReqBody --&gt; QueryObject\nQueryObject --&gt; DBQuery\nDBQuery --&gt; CursosTable\nCursosTable --&gt; AutoIncrement\nCursosTable --&gt; DefaultVis\nDBQuery --&gt; Redirect</code></pre> <p>Sources: src/controller.js L4-L24</p>"},{"location":"Creating-Courses/#database-table-schema","title":"Database Table Schema","text":"<p>Based on the INSERT operation, the <code>cursos</code> table accepts the following fields:</p> Column Provided by Form Source <code>id</code> No (auto-increment) Database default <code>titulo</code> Yes Form input <code>descripcion</code> Yes Form input <code>categoria</code> Yes Form input <code>visibilidad</code> No (default value) Database default <p>The form does not provide values for <code>id</code> (primary key) or <code>visibilidad</code> (visibility control), which suggests these fields have database-level defaults.</p> <p>Sources: src/controller.js L9-L14</p> <p>routes/courses.js L38-L42</p>"},{"location":"Creating-Courses/#validation-and-error-handling","title":"Validation and Error Handling","text":""},{"location":"Creating-Courses/#current-implementation","title":"Current Implementation","text":"<p>The current implementation has minimal validation:</p> <p>Client-Side Validation: None implemented in the form</p> <p>Server-Side Validation: None implemented before database insertion</p> <p>Error Handling:</p> <ul> <li>Database errors are logged to console via <code>console.log(error)</code> src/controller.js L18</li> <li>Both success and error cases redirect to <code>/courses</code> src/controller.js L19-L21</li> <li>No error messages are displayed to the user</li> </ul>"},{"location":"Creating-Courses/#error-scenarios","title":"Error Scenarios","text":"Scenario Current Behavior Empty fields Accepted (no validation) Database connection failure Logged, redirects to <code>/courses</code> Duplicate course title Accepted (no uniqueness constraint) Invalid data types MySQL type coercion or error <p>Implications:</p> <ul> <li>Empty courses can be created</li> <li>Users receive no feedback about success or failure</li> <li>Database constraints (if any) are the only validation layer</li> </ul> <p>Sources: src/controller.js L16-L22</p> <p>views/create.ejs L10-L26</p>"},{"location":"Creating-Courses/#integration-with-course-listing","title":"Integration with Course Listing","text":"<p>After successful course creation, the user is redirected to <code>/courses</code>, where the new course appears in the listing. Since no <code>visibilidad</code> value is specified, the course inherits the database default value, which controls whether it appears to public users.</p> <p>For details on how courses are queried and displayed, see Course Listing &amp; Visibility.</p> <p>Sources: src/controller.js L21</p>"},{"location":"Database-Architecture/","title":"Database Architecture","text":"<p>Relevant source files * config/db.js * routes/auth.js * routes/courses.js</p>"},{"location":"Database-Architecture/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the MySQL database architecture for the course management system. It covers the database schema with three core tables (<code>usuarios</code>, <code>cursos</code>, <code>inscripciones</code>), the connection pooling implementation, entity relationships, and common query patterns. For information about database operations and best practices, see Database Operations. For details on how the authentication system uses the <code>usuarios</code> table, see Authentication &amp; Authorization.</p>"},{"location":"Database-Architecture/#connection-management","title":"Connection Management","text":"<p>The database connection is established through a centralized module at config/db.js L1-L19</p> <p>using the <code>mysql2</code> driver. The connection is configured via environment variables and exported as a singleton instance.</p>"},{"location":"Database-Architecture/#connection-configuration","title":"Connection Configuration","text":"<pre><code>Database Driver: mysql2\nConnection Type: Single connection (not pooled)\nConfiguration Source: Environment variables (.env)\nExport: CommonJS module.exports\n</code></pre> <p>config/db.js L3-L9</p> <p>creates a MySQL connection object with credentials loaded from environment variables:</p> Environment Variable Purpose <code>DB_HOST</code> Database server hostname <code>DB_USER</code> Database username <code>DB_PASS</code> Database password <code>DB_NAME</code> Database name <p>The connection is established synchronously at config/db.js L11-L17</p> <p>logging success or error messages to the console. This <code>conexion</code> object is imported throughout the application for executing queries.</p> <p>Database Connection Module Structure</p> <pre><code>flowchart TD\n\nEnvVars[\".env File&lt;br&gt;DB_HOST, DB_USER&lt;br&gt;DB_PASS, DB_NAME\"]\nConfigModule[\"config/db.js&lt;br&gt;mysql.createConnection()\"]\nConnectionObj[\"conexion Object&lt;br&gt;MySQL Connection\"]\nAuthRoutes[\"routes/auth.js&lt;br&gt;User Authentication\"]\nCoursesRoutes[\"routes/courses.js&lt;br&gt;Course Management\"]\nControllers[\"src/controller.js&lt;br&gt;src/cursoController.js\"]\nMySQL[\"MySQL Database&lt;br&gt;usuarios, cursos&lt;br&gt;inscripciones\"]\n\nEnvVars --&gt; ConfigModule\nConfigModule --&gt; ConnectionObj\nConnectionObj --&gt; AuthRoutes\nConnectionObj --&gt; CoursesRoutes\nConnectionObj --&gt; Controllers\nAuthRoutes --&gt; MySQL\nCoursesRoutes --&gt; MySQL\nControllers --&gt; MySQL</code></pre> <p>Sources: config/db.js L1-L19</p> <p>routes/auth.js L4</p> <p>routes/courses.js L4</p>"},{"location":"Database-Architecture/#database-schema","title":"Database Schema","text":"<p>The system uses three tables to manage users, courses, and enrollment relationships. All tables are accessed through direct SQL queries using the exported <code>conexion</code> object.</p>"},{"location":"Database-Architecture/#table-usuarios","title":"Table: usuarios","text":"<p>The <code>usuarios</code> table stores user accounts with authentication credentials and role information.</p> <p>Schema Inference from Queries</p> Column Type Constraints Purpose <code>id</code> INT PRIMARY KEY, AUTO_INCREMENT Unique user identifier <code>nombre</code> VARCHAR NOT NULL User's full name <code>email</code> VARCHAR UNIQUE, NOT NULL Login credential and identifier <code>password</code> VARCHAR(255) NOT NULL bcrypt hashed password <code>rol</code> ENUM DEFAULT 'registrado' User role: 'publico', 'registrado', 'admin' <p>The schema is used in routes/auth.js L46-L52</p> <p>for user registration:</p> <pre><code>INSERT INTO usuarios SET ?\n-- Fields: nombre, email, password (hashed), rol\n</code></pre> <p>And in routes/auth.js L82-L86</p> <p>for authentication:</p> <pre><code>SELECT * FROM usuarios WHERE email = ?\n</code></pre> <p>Sources: routes/auth.js L46-L69</p> <p>routes/auth.js L82-L98</p>"},{"location":"Database-Architecture/#table-cursos","title":"Table: cursos","text":"<p>The <code>cursos</code> table contains course information and visibility settings.</p> <p>Schema Inference from Queries</p> Column Type Constraints Purpose <code>id</code> INT PRIMARY KEY, AUTO_INCREMENT Unique course identifier <code>titulo</code> VARCHAR NOT NULL Course title <code>descripcion</code> TEXT NULL Course description <code>categoria</code> VARCHAR NULL Course category <code>visibilidad</code> ENUM NULL 'publico' or 'privado' visibility flag <p>The table is queried in routes/courses.js L38-L42</p> <p>with conditional filtering based on user role:</p> <pre><code>SELECT * FROM cursos\n-- WHERE visibilidad='publico' (for public users only)\n</code></pre> <p>Individual course retrieval occurs at routes/courses.js L77-L81</p> <p>for editing:</p> <pre><code>SELECT * FROM cursos WHERE id = ?\n</code></pre> <p>And deletion at routes/courses.js L91-L96</p> <p>:</p> <pre><code>DELETE FROM cursos WHERE id = ?\n</code></pre> <p>Sources: routes/courses.js L35-L62</p> <p>routes/courses.js L73-L84</p> <p>routes/courses.js L87-L98</p> <p>routes/courses.js L109-L113</p>"},{"location":"Database-Architecture/#table-inscripciones","title":"Table: inscripciones","text":"<p>The <code>inscripciones</code> table is a junction table implementing a many-to-many relationship between users and courses.</p> <p>Schema Inference from Queries</p> Column Type Constraints Purpose <code>id_usuario</code> INT FOREIGN KEY \u2192 usuarios(id) References enrolled user <code>id_curso</code> INT FOREIGN KEY \u2192 cursos(id) References enrolled course <p>The composite primary key is (<code>id_usuario</code>, <code>id_curso</code>), preventing duplicate enrollments.</p> <p>Enrollment duplicate check at routes/courses.js L121-L128</p> <p>:</p> <pre><code>SELECT * FROM inscripciones \nWHERE id_usuario = ? AND id_curso = ?\n</code></pre> <p>Enrollment insertion at routes/courses.js L135-L142</p> <p>:</p> <pre><code>INSERT INTO inscripciones (id_usuario, id_curso) \nVALUES (?, ?)\n</code></pre> <p>User's enrolled courses are retrieved at routes/courses.js L155-L160</p> <p>via JOIN:</p> <pre><code>SELECT c.* \nFROM cursos c\nJOIN inscripciones i ON c.id = i.id_curso\nWHERE i.id_usuario = ?\n</code></pre> <p>Sources: routes/courses.js L106-L149</p> <p>routes/courses.js L152-L169</p>"},{"location":"Database-Architecture/#entity-relationship-model","title":"Entity Relationship Model","text":"<p>Database Entity Relationship Diagram</p> <pre><code>#mermaid-8iyw73mm4s7{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-8iyw73mm4s7 .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-8iyw73mm4s7 .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-8iyw73mm4s7 .error-icon{fill:#dddddd;}#mermaid-8iyw73mm4s7 .error-text{fill:#222222;stroke:#222222;}#mermaid-8iyw73mm4s7 .edge-thickness-normal{stroke-width:1px;}#mermaid-8iyw73mm4s7 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-8iyw73mm4s7 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-8iyw73mm4s7 .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-8iyw73mm4s7 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-8iyw73mm4s7 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-8iyw73mm4s7 .marker{fill:#999;stroke:#999;}#mermaid-8iyw73mm4s7 .marker.cross{stroke:#999;}#mermaid-8iyw73mm4s7 svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-8iyw73mm4s7 p{margin:0;}#mermaid-8iyw73mm4s7 .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-8iyw73mm4s7 .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-8iyw73mm4s7 .relationshipLabelBox rect{opacity:0.5;}#mermaid-8iyw73mm4s7 .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-8iyw73mm4s7 .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-8iyw73mm4s7 .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-8iyw73mm4s7 .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-8iyw73mm4s7 .node rect,#mermaid-8iyw73mm4s7 .node circle,#mermaid-8iyw73mm4s7 .node ellipse,#mermaid-8iyw73mm4s7 .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-8iyw73mm4s7 .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-8iyw73mm4s7 .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-8iyw73mm4s7 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}enrolls_inhas_enrollmentusuariosintidPKvarcharnombrevarcharemailUKvarcharpasswordenumrolinscripcionesintid_usuarioFKintid_cursoFKcursosintidPKvarchartitulotextdescripcionvarcharcategoriaenumvisibilidad\n</code></pre> <p>Relationship Characteristics:</p> <ul> <li>usuarios \u2194 inscripciones: One-to-Many * One user can enroll in multiple courses * Enforced by <code>id_usuario</code> foreign key</li> <li>cursos \u2194 inscripciones: One-to-Many * One course can have multiple enrolled users * Enforced by <code>id_curso</code> foreign key</li> <li>usuarios \u2194 cursos: Many-to-Many (via inscripciones) * Junction table pattern * Composite key prevents duplicates</li> </ul> <p>Sources: routes/courses.js L121-L148</p> <p>routes/courses.js L155-L160</p>"},{"location":"Database-Architecture/#query-patterns-by-module","title":"Query Patterns by Module","text":"<p>The following diagram maps code modules to their database operations.</p> <p>Module-to-Table Query Matrix</p> <pre><code>flowchart TD\n\nAuthRegister[\"POST /register&lt;br&gt;lines 17-72\"]\nAuthLogin[\"POST /auth&lt;br&gt;lines 75-131\"]\nCoursesList[\"GET /courses&lt;br&gt;lines 35-62\"]\nCourseEdit[\"GET /edit/:id&lt;br&gt;lines 73-84\"]\nCourseDelete[\"GET /delete/:id&lt;br&gt;lines 87-98\"]\nEnrollGet[\"GET /inscribir/:id&lt;br&gt;lines 106-114\"]\nEnrollPost[\"POST /inscribir/:id&lt;br&gt;lines 117-149\"]\nPerfil[\"GET /perfil&lt;br&gt;lines 152-169\"]\nAdminPerfil[\"GET /admin/perfil&lt;br&gt;lines 172-185\"]\nTUsuarios[\"usuarios\"]\nTCursos[\"cursos\"]\nTInscripciones[\"inscripciones\"]\n\nAuthRegister --&gt; TUsuarios\nAuthLogin --&gt; TUsuarios\nCoursesList --&gt; TCursos\nCourseEdit --&gt; TCursos\nCourseDelete --&gt; TCursos\nEnrollGet --&gt; TCursos\nEnrollPost --&gt; TInscripciones\nPerfil --&gt; TCursos\nPerfil --&gt; TInscripciones\nAdminPerfil --&gt; TCursos\n\nsubgraph subGraph2 [\"Database Tables\"]\n    TUsuarios\n    TCursos\n    TInscripciones\nend\n\nsubgraph routes/courses.js [\"routes/courses.js\"]\n    CoursesList\n    CourseEdit\n    CourseDelete\n    EnrollGet\n    EnrollPost\n    Perfil\n    AdminPerfil\nend\n\nsubgraph routes/auth.js [\"routes/auth.js\"]\n    AuthRegister\n    AuthLogin\nend</code></pre> <p>Sources: routes/auth.js L17-L131</p> <p>routes/courses.js L35-L185</p>"},{"location":"Database-Architecture/#query-operation-summary","title":"Query Operation Summary","text":""},{"location":"Database-Architecture/#insert-operations","title":"INSERT Operations","text":"Location Table Purpose routes/auth.js L46-L52 <code>usuarios</code> Register new user account routes/courses.js L135-L142 <code>inscripciones</code> Enroll user in course"},{"location":"Database-Architecture/#select-operations","title":"SELECT Operations","text":"Location Table(s) Purpose routes/auth.js L82-L86 <code>usuarios</code> Authenticate user by email routes/courses.js L38-L42 <code>cursos</code> List courses (with visibility filter) routes/courses.js L77 <code>cursos</code> Fetch single course for editing routes/courses.js L109 <code>cursos</code> Fetch course for enrollment confirmation routes/courses.js L121-L123 <code>inscripciones</code> Check duplicate enrollment routes/courses.js L155-L160 <code>cursos</code>, <code>inscripciones</code> Fetch user's enrolled courses (JOIN) routes/courses.js L176 <code>cursos</code> Count total courses for admin stats"},{"location":"Database-Architecture/#update-operations","title":"UPDATE Operations","text":"<p>No direct UPDATE queries are visible in the provided files. The <code>crud.update</code> controller at routes/courses.js L103</p> <p>likely handles course updates.</p>"},{"location":"Database-Architecture/#delete-operations","title":"DELETE Operations","text":"Location Table Purpose routes/courses.js L91 <code>cursos</code> Delete course by ID <p>Sources: routes/auth.js L46-L86</p> <p>routes/courses.js L38-L176</p>"},{"location":"Database-Architecture/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All queries use parameterized statements to prevent SQL injection attacks. The codebase consistently follows this pattern:</p> <p>Parameterized Query Examples:</p> <pre><code>// Safe: Using placeholder (?)\ndb.query(\"SELECT * FROM usuarios WHERE email = ?\", [email], ...)\n\n// Safe: Using object syntax\ndb.query(\"INSERT INTO usuarios SET ?\", { nombre, email, password, rol }, ...)\n\n// Safe: Using multiple placeholders\ndb.query(\"INSERT INTO inscripciones (id_usuario, id_curso) VALUES (?, ?)\", \n         [id_usuario, id_curso], ...)\n</code></pre> <p>The <code>mysql2</code> driver automatically escapes all values passed through the placeholder array, preventing malicious SQL from being executed.</p> <p>Sources: routes/auth.js L46-L86</p> <p>routes/courses.js L77-L142</p>"},{"location":"Database-Architecture/#connection-lifecycle","title":"Connection Lifecycle","text":"<p>Database Connection Flow</p> <pre><code>sequenceDiagram\n  participant app.js\n  participant config/db.js\n  participant MySQL Server\n  participant Route Handler\n\n  note over app.js,MySQL Server: Application Startup\n  app.js-&gt;&gt;config/db.js: require('./config/db')\n  config/db.js-&gt;&gt;MySQL Server: mysql.createConnection()\n  MySQL Server--&gt;&gt;config/db.js: Connection object\n  config/db.js-&gt;&gt;MySQL Server: conexion.connect()\n  MySQL Server--&gt;&gt;config/db.js: Success/Error callback\n  config/db.js--&gt;&gt;app.js: Export conexion\n  note over app.js,MySQL Server: Request Processing\n  Route Handler-&gt;&gt;config/db.js: require('../config/db')\n  config/db.js--&gt;&gt;Route Handler: conexion object\n  Route Handler-&gt;&gt;config/db.js: db.query(sql, params, callback)\n  config/db.js-&gt;&gt;MySQL Server: Execute query\n  MySQL Server--&gt;&gt;config/db.js: Results\n  config/db.js--&gt;&gt;Route Handler: callback(error, results)</code></pre> <p>The connection remains open for the lifetime of the Node.js process. The module does not implement connection pooling; instead, it maintains a single persistent connection reused across all requests.</p> <p>Sources: config/db.js L1-L19</p>"},{"location":"Database-Architecture/#table-access-patterns-by-role","title":"Table Access Patterns by Role","text":"<p>Different user roles interact with different database tables based on their authorization level:</p> User Role usuarios cursos inscripciones publico READ (login) READ (limited) - registrado READ (login) READ (all visible) READ, INSERT admin READ (login) READ, INSERT, UPDATE, DELETE READ (stats) <p>This access control is enforced by middleware at the route level routes/courses.js L8-L33</p> <p>not at the database level. For details on role-based access control implementation, see Role-Based Access Control.</p> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L35-L185</p>"},{"location":"Database-Operations/","title":"Database Operations","text":"<p>Relevant source files * config/db.js * routes/auth.js * src/controller.js</p>"},{"location":"Database-Operations/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This page documents best practices and patterns for performing database operations within the course management system. It covers the database connection setup, query execution patterns, parameterized query usage for SQL injection prevention, error handling strategies, and connection management.</p> <p>For information about the database schema and table relationships, see Database Architecture. For security-specific considerations including input validation, see Security Considerations.</p>"},{"location":"Database-Operations/#database-connection-configuration","title":"Database Connection Configuration","text":"<p>The system uses a centralized database connection module that all other components import and use for executing queries.</p>"},{"location":"Database-Operations/#connection-setup","title":"Connection Setup","text":"<p>The database connection is established in config/db.js L1-L20</p> <p>using the <code>mysql2</code> driver. The connection is configured with environment variables for flexibility across different deployment environments:</p> Configuration Parameter Environment Variable Purpose <code>host</code> <code>DB_HOST</code> MySQL server hostname or IP address <code>user</code> <code>DB_USER</code> Database user account <code>password</code> <code>DB_PASS</code> Database user password <code>database</code> <code>DB_NAME</code> Target database name <p>The connection is created as a singleton and exported for reuse throughout the application config/db.js L3-L9</p> <p>:</p> <pre><code>const conexion = mysql.createConnection({\n    host: process.env.DB_HOST, \n    user: process.env.DB_USER,\n    password: process.env.DB_PASS,\n    database: process.env.DB_NAME,\n});\n</code></pre> <p>Connection verification occurs immediately upon creation config/db.js L11-L17</p> <p>logging success or failure to the console.</p>"},{"location":"Database-Operations/#importing-the-connection","title":"Importing the Connection","text":"<p>All modules that need database access import the connection object:</p> <pre><code>const db = require(\"../config/db\");\n</code></pre> <p>This pattern is used in:</p> <ul> <li>routes/auth.js L4</li> <li>src/controller.js L1</li> <li>All other modules requiring database operations</li> </ul> <p>Sources: config/db.js L1-L20</p>"},{"location":"Database-Operations/#query-execution-patterns","title":"Query Execution Patterns","text":""},{"location":"Database-Operations/#query-pattern-overview","title":"Query Pattern Overview","text":"<p>The following diagram illustrates how different components use the database connection to execute queries:</p> <pre><code>flowchart TD\n\nAuthRoute[\"routes/auth.js\"]\nCourseRoute[\"routes/courses.js\"]\nControllerCRUD[\"src/controller.js\"]\nCourseController[\"src/cursoController.js\"]\nDBModule[\"config/db.js&lt;br&gt;conexion object\"]\nInsertUser[\"INSERT INTO usuarios&lt;br&gt;User Registration\"]\nSelectUser[\"SELECT FROM usuarios&lt;br&gt;Login Authentication\"]\nInsertCourse[\"INSERT INTO cursos&lt;br&gt;Course Creation\"]\nUpdateCourse[\"UPDATE cursos&lt;br&gt;Course Modification\"]\nDeleteCourse[\"DELETE FROM cursos&lt;br&gt;Course Removal\"]\nInsertEnroll[\"INSERT INTO inscripciones&lt;br&gt;Enrollment\"]\nSelectEnroll[\"SELECT FROM inscripciones&lt;br&gt;Enrollment Check\"]\nUsuariosTable[\"usuarios table\"]\nCursosTable[\"cursos table\"]\nInscripcionesTable[\"inscripciones table\"]\n\nAuthRoute --&gt; DBModule\nCourseRoute --&gt; DBModule\nControllerCRUD --&gt; DBModule\nCourseController --&gt; DBModule\nDBModule --&gt; InsertUser\nDBModule --&gt; SelectUser\nDBModule --&gt; InsertCourse\nDBModule --&gt; UpdateCourse\nDBModule --&gt; DeleteCourse\nDBModule --&gt; InsertEnroll\nDBModule --&gt; SelectEnroll\nInsertUser --&gt; UsuariosTable\nSelectUser --&gt; UsuariosTable\nInsertCourse --&gt; CursosTable\nUpdateCourse --&gt; CursosTable\nDeleteCourse --&gt; CursosTable\nInsertEnroll --&gt; InscripcionesTable\nSelectEnroll --&gt; InscripcionesTable\n\nsubgraph subGraph2 [\"MySQL Database\"]\n    UsuariosTable\n    CursosTable\n    InscripcionesTable\nend\n\nsubgraph subGraph1 [\"Query Types\"]\n    InsertUser\n    SelectUser\n    InsertCourse\n    UpdateCourse\n    DeleteCourse\n    InsertEnroll\n    SelectEnroll\nend\n\nsubgraph subGraph0 [\"Application Components\"]\n    AuthRoute\n    CourseRoute\n    ControllerCRUD\n    CourseController\nend</code></pre> <p>Sources: config/db.js L1-L20</p> <p>routes/auth.js L46-L69</p> <p>src/controller.js L1-L53</p>"},{"location":"Database-Operations/#insert-operations","title":"INSERT Operations","text":""},{"location":"Database-Operations/#object-based-insert","title":"Object-Based INSERT","text":"<p>The system uses object notation for INSERT operations, which automatically escapes values and prevents SQL injection:</p> <pre><code>db.query(\n    \"INSERT INTO table_name SET ?\",\n    { field1: value1, field2: value2 },\n    (error, results) =&gt; { /* handle response */ }\n);\n</code></pre> <p>User Registration Example routes/auth.js L46-L69</p> <p>:</p> <ul> <li>Query: <code>\"INSERT INTO usuarios SET ?\"</code></li> <li>Data object contains: <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), <code>rol</code></li> <li>Password is hashed with bcrypt before insertion routes/auth.js L44</li> <li>Default role of <code>'registrado'</code> is assigned if not provided routes/auth.js L52</li> </ul> <p>Course Creation Example src/controller.js L9-L24</p> <p>:</p> <ul> <li>Query: <code>\"INSERT INTO cursos SET ?\"</code></li> <li>Data object contains: <code>titulo</code>, <code>descripcion</code>, <code>categoria</code></li> <li>Values extracted from request body src/controller.js L5-L7</li> </ul>"},{"location":"Database-Operations/#insert-operation-flow","title":"INSERT Operation Flow","text":"<pre><code>sequenceDiagram\n  participant Route Handler\n  participant Input Validation\n  participant bcrypt (if password)\n  participant db.query()\n  participant MySQL Database\n  participant Response Handler\n\n  Route Handler-&gt;&gt;Input Validation: \"Validate input data\"\n  loop [Query Error]\n    Input Validation-&gt;&gt;Response Handler: \"Render form with errors\"\n    Input Validation-&gt;&gt;bcrypt (if password): \"Hash sensitive data\"\n    bcrypt (if password)-&gt;&gt;db.query(): \"db.query('INSERT INTO table SET ?', data)\"\n    db.query()-&gt;&gt;MySQL Database: \"Execute parameterized query\"\n    MySQL Database-&gt;&gt;db.query(): \"error object\"\n    db.query()-&gt;&gt;Response Handler: \"Handle error, redirect\"\n    MySQL Database-&gt;&gt;db.query(): \"results object\"\n    db.query()-&gt;&gt;Response Handler: \"Success alert, redirect\"\n  end</code></pre> <p>Sources: routes/auth.js L17-L72</p> <p>src/controller.js L4-L25</p>"},{"location":"Database-Operations/#select-operations","title":"SELECT Operations","text":""},{"location":"Database-Operations/#parameterized-select-queries","title":"Parameterized SELECT Queries","text":"<p>SELECT operations use parameterized queries with placeholder syntax to prevent SQL injection:</p> <pre><code>db.query(\n    \"SELECT * FROM table_name WHERE field = ?\",\n    [value],\n    (error, results) =&gt; { /* handle response */ }\n);\n</code></pre> <p>User Authentication Example routes/auth.js L81-L118</p> <p>:</p> Query Component Implementation SQL Statement <code>\"SELECT * FROM usuarios WHERE email = ?\"</code> Parameters <code>[email]</code> - User-provided email address Parameter Position <code>&lt;FileRef file-url=\"https://github.com/Lourdes12587/Week06/blob/ce0c3bcd/routes/auth.js#L83-L83\" min=83  file-path=\"routes/auth.js\"&gt;Hii&lt;/FileRef&gt;</code> Results Check <code>results.length == 0</code> validates user exists Password Verification <code>bcrypt.compare(password, results[0].password)</code> Session Storage User data stored in <code>req.session.usuario</code> routes/auth.js L103"},{"location":"Database-Operations/#select-query-pattern","title":"SELECT Query Pattern","text":"<pre><code>flowchart TD\n\nA[\"User submits&lt;br&gt;email + password\"]\nB[\"db.query()&lt;br&gt;SELECT * FROM usuarios&lt;br&gt;WHERE email = ?\"]\nC[\"Parameterized&lt;br&gt;Array: [email]\"]\nD[\"Results&lt;br&gt;Array\"]\nE[\"results.length&lt;br&gt;== 0?\"]\nF[\"bcrypt.compare()&lt;br&gt;password check\"]\nG[\"Password&lt;br&gt;matches?\"]\nH[\"Create session&lt;br&gt;req.session.usuario\"]\nI[\"Render error&lt;br&gt;alert\"]\n\nD --&gt; E\n\nsubgraph subGraph1 [\"Result Handling\"]\n    E\n    F\n    G\n    H\n    I\n    E --&gt; I\n    E --&gt; F\n    F --&gt; G\n    G --&gt; I\n    G --&gt; H\nend\n\nsubgraph subGraph0 [\"Query Execution in routes/auth.js\"]\n    A\n    B\n    C\n    D\n    A --&gt; B\n    C --&gt; B\n    B --&gt; D\nend</code></pre> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"Database-Operations/#update-operations","title":"UPDATE Operations","text":""},{"location":"Database-Operations/#parameterized-update-queries","title":"Parameterized UPDATE Queries","text":"<p>UPDATE operations follow a similar pattern with parameterized values to prevent SQL injection:</p> <p>Course Update Example src/controller.js L28-L52</p> <p>:</p> <pre><code>db.query(\n    \"UPDATE cursos SET ? WHERE id = ?\",\n    [{ titulo: titulo, descripcion: descripcion, categoria: categoria }, id],\n    (error, results) =&gt; { /* handle response */ }\n);\n</code></pre> Component Description SQL Statement <code>\"UPDATE cursos SET ? WHERE id = ?\"</code> First Parameter Object containing fields to update Second Parameter Course ID from request body src/controller.js L30 Parameter Array <code>[{updateObject}, id]</code> src/controller.js L36-L42 Error Handling Logs error to console src/controller.js L45-L46 Success Response Redirects to <code>/courses</code> src/controller.js L48 <p>Sources: src/controller.js L28-L52</p>"},{"location":"Database-Operations/#delete-operations","title":"DELETE Operations","text":"<p>DELETE operations are typically handled through route handlers that construct parameterized queries:</p> <pre><code>db.query(\n    \"DELETE FROM table_name WHERE id = ?\",\n    [id],\n    (error, results) =&gt; { /* handle response */ }\n);\n</code></pre> <p>While not shown in the provided controller files, DELETE operations for courses follow this pattern based on the routing structure documented in API Reference.</p> <p>Sources: src/controller.js L1-L53</p>"},{"location":"Database-Operations/#error-handling-patterns","title":"Error Handling Patterns","text":""},{"location":"Database-Operations/#connection-error-handling","title":"Connection Error Handling","text":"<p>Connection errors are handled immediately upon establishing the connection config/db.js L11-L17</p> <p>:</p> <pre><code>conexion.connect((error) =&gt; {\n    if (error) {\n        console.log(error);\n    } else {\n        console.log(\"Conectado a la base de datos\");\n    }\n});\n</code></pre>"},{"location":"Database-Operations/#query-error-handling","title":"Query Error Handling","text":"<p>All query operations follow a consistent error handling pattern:</p> <pre><code>flowchart TD\n\nQuery[\"db.query(sql, params, callback)\"]\nCallback[\"Callback function&lt;br&gt;(error, results)\"]\nErrorCheck[\"error&lt;br&gt;exists?\"]\nLogError[\"console.log(error)\"]\nRedirect[\"res.redirect()\"]\nSuccessPath[\"Process results&lt;br&gt;res.render() or&lt;br&gt;res.redirect()\"]\n\nsubgraph subGraph0 [\"Query Error Handling Pattern\"]\n    Query\n    Callback\n    ErrorCheck\n    LogError\n    Redirect\n    SuccessPath\n    Query --&gt; Callback\n    Callback --&gt; ErrorCheck\n    ErrorCheck --&gt; LogError\n    LogError --&gt; Redirect\n    ErrorCheck --&gt; SuccessPath\nend</code></pre> <p>Common Error Handling Implementations:</p> Location Error Action Success Action routes/auth.js L55-L67 Log error with <code>console.log()</code> Render success alert with redirect src/controller.js L17-L22 Log error, redirect to <code>/courses</code> Redirect to <code>/courses</code> src/controller.js L45-L49 Log error only Redirect to <code>/courses</code>"},{"location":"Database-Operations/#error-response-strategy","title":"Error Response Strategy","text":"<p>The system uses two primary strategies for error responses:</p> <ol> <li>Silent Failure with Logging src/controller.js L17-L19 : Errors are logged but users are redirected normally</li> <li>User-Facing Alerts routes/auth.js L88-L97 : Authentication failures render alerts using SweetAlert2 integration</li> </ol> <p>Sources: config/db.js L11-L17</p> <p>routes/auth.js L54-L67</p> <p>routes/auth.js L84-L97</p> <p>src/controller.js L16-L22</p> <p>src/controller.js L44-L49</p>"},{"location":"Database-Operations/#sql-injection-prevention","title":"SQL Injection Prevention","text":""},{"location":"Database-Operations/#parameterized-query-requirements","title":"Parameterized Query Requirements","text":"<p>All database queries in this system must use parameterized queries with placeholder syntax. This prevents SQL injection attacks by ensuring user input is never directly concatenated into SQL statements.</p>"},{"location":"Database-Operations/#parameterization-patterns","title":"Parameterization Patterns","text":"<pre><code>flowchart TD\n\nI1[\"Query with concatenation:&lt;br&gt;'SELECT * FROM usuarios WHERE email = ' + userInput\"]\nI2[\"No escaping\"]\nI3[\"SQL Injection&lt;br&gt;Vulnerability\"]\nS1[\"Query with placeholders:&lt;br&gt;'SELECT * FROM usuarios WHERE email = ?'\"]\nS2[\"Parameters array:&lt;br&gt;[userInput]\"]\nS3[\"mysql2 driver&lt;br&gt;automatically escapes\"]\nS4[\"Safe execution\"]\n\nsubgraph subGraph1 [\"INSECURE: String Concatenation (DO NOT USE)\"]\n    I1\n    I2\n    I3\n    I1 --&gt; I2\n    I2 --&gt; I3\nend\n\nsubgraph subGraph0 [\"SECURE: Parameterized Queries\"]\n    S1\n    S2\n    S3\n    S4\n    S1 --&gt; S2\n    S2 --&gt; S3\n    S3 --&gt; S4\nend</code></pre>"},{"location":"Database-Operations/#parameterization-examples-by-query-type","title":"Parameterization Examples by Query Type","text":"Query Type Secure Pattern Implementation INSERT with object <code>\"INSERT INTO usuarios SET ?\"</code> with object parameter routes/auth.js L46-L53 SELECT with condition <code>\"SELECT * FROM usuarios WHERE email = ?\"</code> with array parameter routes/auth.js L82-L83 UPDATE with ID <code>\"UPDATE cursos SET ? WHERE id = ?\"</code> with array of object and ID src/controller.js L35-L42"},{"location":"Database-Operations/#input-validation-before-queries","title":"Input Validation Before Queries","text":"<p>While parameterization prevents SQL injection, input validation adds an additional security layer:</p> <ol> <li>express-validator validates input format routes/auth.js L5</li> <li>Validation chains check length, type, and format routes/auth.js L19-L32</li> <li>Validation errors prevent query execution routes/auth.js L35-L40</li> </ol> <p>Sources: routes/auth.js L46-L53</p> <p>routes/auth.js L81-L83</p> <p>src/controller.js L35-L42</p> <p>routes/auth.js L17-L40</p>"},{"location":"Database-Operations/#connection-management-best-practices","title":"Connection Management Best Practices","text":""},{"location":"Database-Operations/#single-connection-pattern","title":"Single Connection Pattern","text":"<p>The current implementation uses a single persistent connection config/db.js L3-L9</p> <p>rather than a connection pool. This pattern is suitable for development and low-traffic applications.</p>"},{"location":"Database-Operations/#connection-lifecycle","title":"Connection Lifecycle","text":"<pre><code>flowchart TD\n\nA[\"require('config/db.js')\"]\nB[\"mysql.createConnection()\"]\nC[\"conexion.connect()\"]\nD[\"Connection established\"]\nE[\"Multiple modules&lt;br&gt;import connection\"]\nF[\"Execute queries&lt;br&gt;via db.query()\"]\nG[\"Connection persists\"]\nH[\"Process termination\"]\nI[\"Connection closes\"]\n\nD --&gt; E\nG --&gt; H\n\nsubgraph subGraph2 [\"Application Shutdown\"]\n    H\n    I\n    H --&gt; I\nend\n\nsubgraph subGraph1 [\"Application Runtime\"]\n    E\n    F\n    G\n    E --&gt; F\n    F --&gt; G\n    G --&gt; F\nend\n\nsubgraph subGraph0 [\"Application Startup\"]\n    A\n    B\n    C\n    D\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\nend</code></pre>"},{"location":"Database-Operations/#recommendations-for-production","title":"Recommendations for Production","text":"<p>For production environments with higher traffic, consider these improvements:</p> <ol> <li>Connection Pooling: Replace <code>mysql.createConnection()</code> with <code>mysql.createPool()</code> for better concurrency handling</li> <li>Error Recovery: Implement automatic reconnection logic for database connection failures</li> <li>Query Timeouts: Add timeout configurations to prevent hanging queries</li> <li>Connection Limits: Configure pool size based on expected concurrent users</li> </ol>"},{"location":"Database-Operations/#current-connection-usage","title":"Current Connection Usage","text":"<p>All database operations use the same connection instance:</p> Module Import Statement Usage Pattern routes/auth.js L4 <code>const db = require(\"../config/db\")</code> User authentication queries src/controller.js L1 <code>const db = require(\"../config/db\")</code> Course CRUD operations All route handlers Same import pattern All database interactions <p>Sources: config/db.js L1-L20</p>"},{"location":"Database-Operations/#callback-pattern-and-asynchronous-queries","title":"Callback Pattern and Asynchronous Queries","text":""},{"location":"Database-Operations/#query-callback-structure","title":"Query Callback Structure","text":"<p>All <code>db.query()</code> calls use a standard callback pattern:</p> <pre><code>db.query(sql, params, (error, results) =&gt; {\n    // error: Error object if query failed\n    // results: Query results if successful\n});\n</code></pre>"},{"location":"Database-Operations/#callback-parameter-details","title":"Callback Parameter Details","text":"Parameter Type Description Example Usage <code>error</code> Error object or null Contains error information if query fails <code>if (error) { console.log(error) }</code> src/controller.js L17 <code>results</code> Array or object Query results or metadata <code>results.length == 0</code> routes/auth.js L85"},{"location":"Database-Operations/#asyncawait-pattern-for-password-operations","title":"Async/Await Pattern for Password Operations","text":"<p>The authentication route uses <code>async/await</code> for password hashing operations while maintaining callback-based database queries routes/auth.js L34</p> <p>routes/auth.js L75</p> <p>:</p> <pre><code>async (req, res) =&gt; {\n    const passwordHash = await bcrypt.hash(password, 8);\n    db.query(/* callback-based query */);\n}\n</code></pre> <p>This hybrid approach allows synchronous-style password operations while keeping the callback pattern for database queries.</p> <p>Sources: routes/auth.js L34-L72</p> <p>routes/auth.js L75-L131</p> <p>src/controller.js L4-L52</p>"},{"location":"Database-Operations/#query-result-processing","title":"Query Result Processing","text":""},{"location":"Database-Operations/#results-array-structure","title":"Results Array Structure","text":"<p>SELECT queries return an array of objects:</p> <pre><code>db.query(\"SELECT * FROM usuarios WHERE email = ?\", [email], (error, results) =&gt; {\n    // results[0] = first matching row\n    // results.length = number of rows returned\n});\n</code></pre>"},{"location":"Database-Operations/#common-result-processing-patterns","title":"Common Result Processing Patterns","text":"Pattern Purpose Implementation Empty Check Verify record exists <code>results.length == 0</code> routes/auth.js L85 First Record Access Get single result <code>results[0]</code> routes/auth.js L100 Field Extraction Access specific column <code>results[0].password</code> routes/auth.js L86 Session Storage Save user data <code>req.session.usuario = results[0]</code> routes/auth.js L103"},{"location":"Database-Operations/#insertupdate-result-metadata","title":"INSERT/UPDATE Result Metadata","text":"<p>INSERT and UPDATE operations return metadata rather than row data:</p> <pre><code>{\n    affectedRows: number,  // Rows modified\n    insertId: number,      // Auto-increment ID (INSERT only)\n    // ... other metadata\n}\n</code></pre> <p>Sources: routes/auth.js L81-L118</p> <p>routes/auth.js L100-L104</p>"},{"location":"Database-Operations/#summary-of-best-practices","title":"Summary of Best Practices","text":""},{"location":"Database-Operations/#essential-practices","title":"Essential Practices","text":"<ol> <li>Always use parameterized queries with <code>?</code> placeholders</li> <li>Import centralized connection via <code>require(\"../config/db\")</code></li> <li>Handle both error and success cases in query callbacks</li> <li>Validate input before executing queries (see Security Considerations)</li> <li>Hash passwords with bcrypt before storage (see User Registration)</li> <li>Log errors for debugging while handling failures gracefully</li> <li>Never expose database errors directly to end users</li> </ol>"},{"location":"Database-Operations/#query-template","title":"Query Template","text":"<pre><code>const db = require(\"../config/db\");\n\ndb.query(\n    \"SQL STATEMENT WITH ? PLACEHOLDERS\",\n    [parameter1, parameter2],\n    (error, results) =&gt; {\n        if (error) {\n            console.log(error);\n            // Handle error appropriately\n        } else {\n            // Process results\n        }\n    }\n);\n</code></pre> <p>Sources: config/db.js L1-L20</p> <p>routes/auth.js L1-L139</p> <p>src/controller.js L1-L53</p>"},{"location":"Development-Guide/","title":"Development Guide","text":"<p>Relevant source files * .gitignore * app.js * config/db.js * package.json</p>"},{"location":"Development-Guide/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides guidance for developers working on the course management system codebase. It covers the project organization, development patterns, and conventions used throughout the application. This guide explains how components interact and provides practical instructions for extending the system with new features.</p> <p>For initial setup and installation instructions, see Getting Started. For detailed API endpoint specifications, see API Reference. For security implementation details, see Authentication &amp; Authorization.</p> <p>Sources: app.js, config/db.js, package.json</p>"},{"location":"Development-Guide/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"Development-Guide/#prerequisites","title":"Prerequisites","text":"<p>The application requires Node.js runtime and a MySQL database server. The project uses npm for dependency management.</p>"},{"location":"Development-Guide/#installation-steps","title":"Installation Steps","text":"<ol> <li>Clone the repository and navigate to the project directory</li> <li>Install dependencies: <code>npm install</code></li> <li>Create environment configuration file at <code>env/.env</code></li> <li>Initialize the MySQL database with the schema (usuarios, cursos, inscripciones tables)</li> <li>Start the development server: <code>npm start</code></li> </ol>"},{"location":"Development-Guide/#environment-configuration","title":"Environment Configuration","text":"<p>Environment variables are loaded from <code>env/.env</code> using the dotenv package app.js L3</p> <p>The following variables must be configured:</p> Variable Purpose Example <code>DB_HOST</code> MySQL server hostname <code>localhost</code> <code>DB_USER</code> Database username <code>root</code> <code>DB_PASS</code> Database password <code>password</code> <code>DB_NAME</code> Database name <code>course_db</code> <p>Sources: app.js:3, config/db.js:4-7, package.json:17</p>"},{"location":"Development-Guide/#project-organization","title":"Project Organization","text":""},{"location":"Development-Guide/#directory-structure","title":"Directory Structure","text":"<p>The codebase follows a modular organization pattern separating concerns across multiple directories:</p>"},{"location":"Development-Guide/#core-files","title":"Core Files","text":"File Responsibility <code>app.js</code> Express server initialization, middleware configuration, route mounting <code>config/db.js</code> MySQL connection pool creation and export <code>routes/*.js</code> HTTP endpoint definitions and request handling <code>src/*.js</code> Business logic controllers for CRUD operations <code>views/*.ejs</code> EJS templates for server-side rendering <code>public/css/*.css</code> Page-specific stylesheets <p>Sources: app.js, config/db.js, package.json:5</p>"},{"location":"Development-Guide/#application-architecture","title":"Application Architecture","text":""},{"location":"Development-Guide/#request-processing-flow","title":"Request Processing Flow","text":"<p>The following diagram shows how HTTP requests flow through the application components, using actual middleware functions and file references:</p> <p>Sources: app.js:1-41, config/db.js</p>"},{"location":"Development-Guide/#development-patterns","title":"Development Patterns","text":""},{"location":"Development-Guide/#middleware-configuration","title":"Middleware Configuration","text":"<p>Middleware is configured globally in <code>app.js</code> before route mounting. The order is critical:</p> <ol> <li>Session middleware app.js L6-L13  - Must be first to establish session context</li> <li>Static file serving app.js L19  - Serves files from <code>/public</code> directory</li> <li>Body parsers app.js L25-L26  - Parse URL-encoded and JSON request bodies</li> <li>Route handlers app.js L29-L31  - Mounted after all middleware</li> </ol> <pre><code>\n</code></pre>"},{"location":"Development-Guide/#database-connection-pattern","title":"Database Connection Pattern","text":"<p>The application uses a single shared connection instance exported from <code>config/db.js</code>. This connection is imported wherever database access is needed:</p> <pre><code>\n</code></pre> <p>The connection uses environment variables config/db.js L4-L7</p> <p>loaded via dotenv app.js L3</p> <p>Sources: config/db.js:1-19, app.js:3</p>"},{"location":"Development-Guide/#route-handler-pattern","title":"Route Handler Pattern","text":"<p>Routes follow a consistent structure:</p> <ol> <li>Import dependencies (Express router, database connection, middleware)</li> <li>Create router instance: <code>const router = express.Router()</code></li> <li>Define routes with appropriate HTTP methods</li> <li>Apply middleware functions for authentication and authorization</li> <li>Execute business logic or delegate to controllers</li> <li>Render views or send responses</li> <li>Export router: <code>module.exports = router</code></li> </ol> <p>Routes are mounted in <code>app.js</code> app.js L29-L31</p> <p>using the pattern:</p> <pre><code>\n</code></pre>"},{"location":"Development-Guide/#controller-pattern","title":"Controller Pattern","text":"<p>Controllers in the <code>src/</code> directory encapsulate business logic and database operations:</p> <ul> <li><code>src/controller.js</code> - Course CRUD operations (create, read, update, delete)</li> <li><code>src/cursoController.js</code> - Enrollment-specific logic</li> </ul> <p>Controllers receive request data as parameters and return results via callbacks or promises. They are imported and invoked from route handlers.</p> <p>Sources: app.js:29-31</p>"},{"location":"Development-Guide/#adding-new-features","title":"Adding New Features","text":""},{"location":"Development-Guide/#creating-a-new-route-module","title":"Creating a New Route Module","text":"<p>To add a new feature area, follow these steps:</p> <ol> <li>Create route file in <code>routes/</code> directory (e.g., <code>routes/newfeature.js</code>)</li> <li>Mount router in <code>app.js</code>: <code></code></li> <li>Define endpoints using <code>router.get()</code>, <code>router.post()</code>, etc.</li> <li>Apply middleware for authentication/authorization if needed</li> <li>Create controller in <code>src/</code> if complex business logic is required</li> <li>Create EJS templates in <code>views/</code> for any UI components</li> <li>Add stylesheets in <code>public/css/</code> if custom styling is needed</li> </ol>"},{"location":"Development-Guide/#example-adding-a-new-protected-route","title":"Example: Adding a New Protected Route","text":"<p>Sources: app.js:29-31</p>"},{"location":"Development-Guide/#database-query-pattern","title":"Database Query Pattern","text":"<p>When adding database operations:</p> <ol> <li>Import connection: <code>const conexion = require('../config/db')</code></li> <li>Use parameterized queries to prevent SQL injection: <code></code></li> <li>Handle errors appropriately</li> <li>Close operations within the callback</li> </ol> <p>Sources: config/db.js:1-19</p>"},{"location":"Development-Guide/#session-access-pattern","title":"Session Access Pattern","text":"<p>Session data is available via <code>req.session</code> after session middleware initialization app.js L6-L13</p> <p>:</p> Session Property Usage <code>req.session.loggedin</code> Boolean indicating authentication status <code>req.session.usuario</code> User object with name, email <code>req.session.rol</code> User role: 'publico', 'registrado', or 'admin' <p>Use these properties to:</p> <ul> <li>Check authentication status</li> <li>Personalize views with user data</li> <li>Enforce role-based access control</li> </ul> <p>Sources: app.js:6-13</p>"},{"location":"Development-Guide/#code-style-and-conventions","title":"Code Style and Conventions","text":""},{"location":"Development-Guide/#file-naming","title":"File Naming","text":"<ul> <li>Route files: lowercase, descriptive (e.g., <code>auth.js</code>, <code>courses.js</code>)</li> <li>Controller files: camelCase with \"Controller\" suffix (e.g., <code>cursoController.js</code>)</li> <li>View files: lowercase with <code>.ejs</code> extension</li> <li>CSS files: match corresponding view names</li> </ul>"},{"location":"Development-Guide/#ignored-files","title":"Ignored Files","text":"<p>The <code>.gitignore</code> .gitignore L1-L2</p> <p>excludes:</p> <ul> <li><code>node_modules/</code> - Third-party dependencies (reinstall via <code>npm install</code>)</li> <li><code>env/</code> - Environment configuration files (contains sensitive data)</li> </ul> <p>Never commit sensitive configuration or credentials to version control.</p> <p>Sources: .gitignore:1-2</p>"},{"location":"Development-Guide/#dependency-management","title":"Dependency Management","text":"<p>Dependencies are declared in <code>package.json</code> package.json L13-L25</p> <p>Key dependencies include:</p> Package Version Purpose <code>express</code> ^5.1.0 Web framework <code>ejs</code> ^3.1.10 Template engine <code>mysql2</code> ^3.14.3 MySQL driver <code>express-session</code> ^1.18.2 Session management <code>bcryptjs</code> ^3.0.2 Password hashing <code>express-validator</code> ^7.2.1 Input validation <code>jsonwebtoken</code> ^9.0.2 JWT token generation <p>To add new dependencies:</p> <pre><code>\n</code></pre> <p>Sources: package.json:13-25</p>"},{"location":"Development-Guide/#testing-and-debugging","title":"Testing and Debugging","text":""},{"location":"Development-Guide/#starting-the-application","title":"Starting the Application","text":"<p>The application entry point is <code>app.js</code> package.json L5</p> <p>Start the server using:</p> <pre><code>\n</code></pre> <p>This executes <code>node app.js</code> package.json L8</p>"},{"location":"Development-Guide/#database-connection-verification","title":"Database Connection Verification","text":"<p>The database connection logs status on application start config/db.js L11-L17</p> <p>:</p> <ul> <li>Success: \"Conectado a la base de datos\"</li> <li>Failure: Error object logged to console</li> </ul> <p>Verify connection before testing features that require database access.</p>"},{"location":"Development-Guide/#common-issues","title":"Common Issues","text":"Issue Solution Database connection fails Verify environment variables in <code>env/.env</code> Sessions not persisting Check session middleware configuration Static files not loading Verify path mapping in <code>app.use(\"/resources\", ...)</code> Routes not responding Check route mounting order in <code>app.js</code> <p>Sources: app.js:1-41, config/db.js:11-17, package.json:5-8</p>"},{"location":"Development-Guide/#extension-points","title":"Extension Points","text":""},{"location":"Development-Guide/#adding-middleware","title":"Adding Middleware","text":"<p>Custom middleware functions can be added:</p> <ol> <li>Globally - Add before route mounting in <code>app.js</code>: <code></code></li> <li>Per-route - Add to specific route definitions: <code></code></li> <li>Per-router - Add to router instance before route definitions</li> </ol>"},{"location":"Development-Guide/#template-variables","title":"Template Variables","text":"<p>Make data available to all views by setting <code>res.locals</code> in middleware. The commented example app.js L33-L39</p> <p>shows the pattern:</p> <pre><code>\n</code></pre> <p>Sources: app.js:33-39</p>"},{"location":"Development-Guide/#adding-new-user-roles","title":"Adding New User Roles","text":"<p>To add additional roles beyond 'publico', 'registrado', and 'admin':</p> <ol> <li>Update database schema for <code>usuarios.rol</code> column</li> <li>Create new middleware function (similar to <code>isRegistrado</code>, <code>isAdmin</code>)</li> <li>Apply middleware to appropriate routes</li> <li>Update role checks in views for conditional rendering</li> </ol>"},{"location":"Development-Guide/#static-asset-management","title":"Static Asset Management","text":"<p>Static files are served from the <code>/public</code> directory and accessible via the <code>/resources</code> URL path app.js L19</p> <p>:</p> <pre><code>/public/css/style.css \u2192 http://localhost:4000/resources/css/style.css\n/public/resources/logo.png \u2192 http://localhost:4000/resources/resources/logo.png\n</code></pre> <p>Add new static assets by placing them in the appropriate <code>/public</code> subdirectory.</p> <p>Sources: app.js:19</p>"},{"location":"Editing-%26-Deleting-Courses/","title":"Editing &amp; Deleting Courses","text":"<p>Relevant source files * routes/courses.js * src/controller.js * views/edit.ejs</p>"},{"location":"Editing-%26-Deleting-Courses/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the administrator-exclusive functionality for modifying and deleting courses in the system. It covers the edit workflow including form pre-population with existing data, the update processing logic, and the delete operation with database transaction handling. These operations are restricted to users with the <code>admin</code> role through middleware enforcement.</p> <p>For information about creating new courses, see Creating Courses. For general course visibility and listing functionality, see Course Listing &amp; Visibility.</p>"},{"location":"Editing-%26-Deleting-Courses/#overview","title":"Overview","text":"<p>The course editing and deletion features are implemented as protected routes that require both authentication and administrator privileges. The system provides a two-step edit workflow: first retrieving existing course data to pre-populate an edit form, then processing the submitted changes. Deletion operates as a single-step GET request that immediately removes the course record from the database.</p> <p>Key Components:</p> Component File Path Purpose Edit Route Handler <code>routes/courses.js:73-84</code> Retrieves course data and renders edit form Update Route Handler <code>routes/courses.js:103</code> Delegates update processing to controller Delete Route Handler <code>routes/courses.js:87-98</code> Executes course deletion directly Update Controller <code>src/controller.js:28-52</code> Contains business logic for updating course fields Edit View Template <code>views/edit.ejs:1-35</code> Renders pre-populated edit form with course data <p>Sources: routes/courses.js L1-L187</p> <p>src/controller.js L1-L53</p> <p>views/edit.ejs L1-L35</p>"},{"location":"Editing-%26-Deleting-Courses/#request-flow-architecture","title":"Request Flow Architecture","text":"<p>Diagram: Edit and Delete Request Flow</p> <pre><code>sequenceDiagram\n  participant Administrator Browser\n  participant routes/courses.js\n  participant estaAutenticado\n  participant middleware\n  participant isAdmin\n  participant config/db.js\n  participant MySQL Connection\n  participant src/controller.js\n  participant views/edit.ejs\n\n  note over Administrator Browser,views/edit.ejs: EDIT WORKFLOW\n  Administrator Browser-&gt;&gt;routes/courses.js: \"GET /edit/:id\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check session.loggedin\"\n  estaAutenticado-&gt;&gt;isAdmin: \"Session valid\"\n  isAdmin-&gt;&gt;routes/courses.js: \"rol === 'admin' verified\"\n  routes/courses.js-&gt;&gt;config/db.js: \"SELECT * FROM cursos WHERE id = ?\"\n  config/db.js-&gt;&gt;routes/courses.js: \"results[0] (course data)\"\n  routes/courses.js-&gt;&gt;views/edit.ejs: \"render('edit', { curso: results[0] })\"\n  views/edit.ejs-&gt;&gt;Administrator Browser: \"HTML form with pre-populated fields\"\n  Administrator Browser-&gt;&gt;routes/courses.js: \"POST /update\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check session.loggedin\"\n  estaAutenticado-&gt;&gt;isAdmin: \"Session valid\"\n  isAdmin-&gt;&gt;src/controller.js: \"crud.update(req, res)\"\n  src/controller.js-&gt;&gt;config/db.js: \"UPDATE cursos SET ? WHERE id = ?\"\n  config/db.js-&gt;&gt;src/controller.js: \"Update confirmation\"\n  src/controller.js-&gt;&gt;Administrator Browser: \"res.redirect('/courses')\"\n  note over Administrator Browser,views/edit.ejs: DELETE WORKFLOW\n  Administrator Browser-&gt;&gt;routes/courses.js: \"GET /delete/:id\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check session.loggedin\"\n  estaAutenticado-&gt;&gt;isAdmin: \"Session valid\"\n  isAdmin-&gt;&gt;routes/courses.js: \"rol === 'admin' verified\"\n  routes/courses.js-&gt;&gt;config/db.js: \"DELETE FROM cursos WHERE id = ?\"\n  config/db.js-&gt;&gt;routes/courses.js: \"Deletion confirmation\"\n  routes/courses.js-&gt;&gt;Administrator Browser: \"res.redirect('/courses')\"</code></pre> <p>Sources: routes/courses.js L73-L98</p> <p>routes/courses.js L103</p> <p>src/controller.js L28-L52</p>"},{"location":"Editing-%26-Deleting-Courses/#editing-courses","title":"Editing Courses","text":""},{"location":"Editing-%26-Deleting-Courses/#edit-route-get-editid","title":"Edit Route - GET /edit/:id","text":"<p>The edit route retrieves a specific course record from the database and renders a form pre-populated with the existing values. This enables administrators to modify course details while preserving unchanged fields.</p> <p>Route Definition:</p> <pre><code>router.get(\"/edit/:id\", estaAutenticado, isAdmin, (req, res) =&gt; { ... }\n</code></pre> <p>Middleware Chain:</p> <ol> <li><code>estaAutenticado</code> - Verifies <code>req.session.loggedin</code> is true routes/courses.js L8-L14</li> <li><code>isAdmin</code> - Confirms <code>req.session.rol === 'admin'</code> routes/courses.js L16-L24</li> </ol> <p>Implementation Details:</p> <p>The route handler extracts the course ID from the URL parameters and executes a parameterized SQL query to fetch the course record. The query uses a placeholder (<code>?</code>) to prevent SQL injection:</p> <pre><code>SELECT * FROM cursos WHERE id = ?\n</code></pre> <p>The first result (<code>results[0]</code>) is passed to the <code>edit.ejs</code> template as the <code>curso</code> object. If an error occurs, it is thrown, which would trigger Express's default error handler.</p> <p>Sources: routes/courses.js L73-L84</p>"},{"location":"Editing-%26-Deleting-Courses/#edit-form-template","title":"Edit Form Template","text":"<p>The edit form is rendered by <code>views/edit.ejs</code>, which displays a Bootstrap-styled card interface. The form includes a hidden input field containing the course ID to ensure the correct record is updated during submission.</p> <p>Form Structure:</p> Field Input Type EJS Binding Purpose <code>id</code> <code>text</code> (hidden) <code>&lt;%= curso.id %&gt;</code> Identifies which course to update <code>titulo</code> <code>text</code> <code>&lt;%= curso.titulo %&gt;</code> Course title field <code>descripcion</code> <code>text</code> <code>&lt;%= curso.descripcion %&gt;</code> Course description field <code>categoria</code> <code>text</code> <code>&lt;%= curso.categoria %&gt;</code> Course category field <p>The form submits to <code>/update</code> via POST method views/edit.ejs L10</p> <p>If no course data is available, the template displays an error message: \"CURSOS NO ENCONTRADO\" views/edit.ejs L33</p> <p>Sources: views/edit.ejs L1-L35</p>"},{"location":"Editing-%26-Deleting-Courses/#update-route-post-update","title":"Update Route - POST /update","text":"<p>The update route delegates processing to the <code>crud.update</code> controller function. The route definition applies the same middleware protection as the edit route:</p> <pre><code>router.post('/update', estaAutenticado, isAdmin, crud.update);\n</code></pre> <p>Sources: routes/courses.js L103</p>"},{"location":"Editing-%26-Deleting-Courses/#update-controller-logic","title":"Update Controller Logic","text":"<p>The <code>exports.update</code> function in <code>src/controller.js</code> extracts form data from the request body and executes an UPDATE query. The function uses parameterized queries to safely update the database:</p> <p>Form Data Extraction:</p> <ul> <li><code>req.body.id</code> - Course identifier src/controller.js L30</li> <li><code>req.body.titulo</code> - Updated title src/controller.js L31</li> <li><code>req.body.descripcion</code> - Updated description src/controller.js L32</li> <li><code>req.body.categoria</code> - Updated category src/controller.js L33</li> </ul> <p>SQL Query Structure:</p> <pre><code>UPDATE cursos SET ? WHERE id = ?\n</code></pre> <p>The query uses two parameters: an object containing the fields to update, and the course ID. The object notation (<code>SET ?</code>) allows MySQL to automatically format the update fields src/controller.js L36-L42</p> <p>Response Handling:</p> <ul> <li>On success or error: redirects to <code>/courses</code> src/controller.js L48</li> <li>Errors are logged to console but do not halt execution src/controller.js L46</li> </ul> <p>Sources: src/controller.js L28-L52</p>"},{"location":"Editing-%26-Deleting-Courses/#deleting-courses","title":"Deleting Courses","text":""},{"location":"Editing-%26-Deleting-Courses/#delete-route-get-deleteid","title":"Delete Route - GET /delete/:id","text":"<p>The delete operation is implemented as a single GET request that immediately removes the course from the database. This design choice prioritizes simplicity over the traditional two-step confirmation pattern, relying on client-side confirmation dialogs instead.</p> <p>Route Definition:</p> <pre><code>router.get(\"/delete/:id\", estaAutenticado, isAdmin, (req, res) =&gt; { ... }\n</code></pre> <p>Deletion Process:</p> <ol> <li>Extract course ID from URL parameter: <code>req.params.id</code> routes/courses.js L89</li> <li>Execute DELETE query with parameterized ID</li> <li>Redirect to course listing page on success routes/courses.js L95</li> <li>Throw error if query fails routes/courses.js L93</li> </ol> <p>SQL Query:</p> <pre><code>DELETE FROM cursos WHERE id = ?\n</code></pre> <p>The query uses a parameterized placeholder to safely delete the specified course record routes/courses.js L91</p> <p>Cascading Deletions:</p> <p>The system does not implement explicit cascading deletion logic in the application code. If foreign key constraints exist on the <code>inscripciones</code> table referencing <code>cursos.id</code>, the database engine would handle cascading behavior based on the constraint definition (e.g., <code>ON DELETE CASCADE</code>). Without such constraints, orphaned enrollment records would remain in the database.</p> <p>Sources: routes/courses.js L87-L98</p>"},{"location":"Editing-%26-Deleting-Courses/#authorization-and-security","title":"Authorization and Security","text":"<p>Diagram: Middleware Security Chain</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request&lt;br&gt;(GET /edit/:id or /delete/:id&lt;br&gt;POST /update)\"]\nAuthCheck[\"estaAutenticado&lt;br&gt;[routes/courses.js:8-14]\"]\nSessionValid[\"req.session.loggedin&lt;br&gt;=== true?\"]\nRoleCheck[\"isAdmin&lt;br&gt;[routes/courses.js:16-24]\"]\nRoleValid[\"req.session.rol&lt;br&gt;=== 'admin'?\"]\nHandler[\"Route Handler&lt;br&gt;Executes\"]\nLoginRedirect[\"res.redirect('/login')\"]\nEditHandler[\"GET /edit/:id&lt;br&gt;Query database&lt;br&gt;Render edit form\"]\nUpdateHandler[\"POST /update&lt;br&gt;Call crud.update&lt;br&gt;Redirect to /courses\"]\nDeleteHandler[\"GET /delete/:id&lt;br&gt;Delete from database&lt;br&gt;Redirect to /courses\"]\n\nRequest --&gt; AuthCheck\nAuthCheck --&gt; SessionValid\nSessionValid --&gt; LoginRedirect\nSessionValid --&gt; RoleCheck\nRoleCheck --&gt; RoleValid\nRoleValid --&gt; LoginRedirect\nRoleValid --&gt; Handler\nHandler --&gt; EditHandler\nHandler --&gt; UpdateHandler\nHandler --&gt; DeleteHandler</code></pre> <p>Sources: routes/courses.js L8-L24</p> <p>routes/courses.js L73-L104</p>"},{"location":"Editing-%26-Deleting-Courses/#authentication-middleware-estaautenticado","title":"Authentication Middleware - estaAutenticado","text":"<p>This middleware function verifies that a user session exists and is authenticated. It checks for the presence of <code>req.session.loggedin</code> and calls <code>next()</code> if true, otherwise redirects to <code>/login</code>.</p> <p>Implementation: routes/courses.js L8-L14</p>"},{"location":"Editing-%26-Deleting-Courses/#authorization-middleware-isadmin","title":"Authorization Middleware - isAdmin","text":"<p>This middleware enforces role-based access control by verifying both session authentication and administrator role assignment. It checks:</p> <ul> <li><code>req.session.loggedin</code> is truthy</li> <li><code>req.session.rol === 'admin'</code></li> </ul> <p>If either condition fails, the request is redirected to <code>/login</code> routes/courses.js L16-L24</p> <p>Session Object Structure:</p> <pre><code>req.session = {\n  loggedin: true,\n  rol: 'admin',\n  usuario: { id: ..., nombre: ..., email: ... }\n}\n</code></pre> <p>Sources: routes/courses.js L16-L24</p>"},{"location":"Editing-%26-Deleting-Courses/#database-operations","title":"Database Operations","text":"<p>Table: Database Queries by Operation</p> Operation Query Type SQL Statement Parameters File Location Load Edit Form SELECT <code>SELECT * FROM cursos WHERE id = ?</code> <code>[id]</code> <code>routes/courses.js:77</code> Update Course UPDATE <code>UPDATE cursos SET ? WHERE id = ?</code> <code>[{titulo, descripcion, categoria}, id]</code> <code>src/controller.js:36</code> Delete Course DELETE <code>DELETE FROM cursos WHERE id = ?</code> <code>[id]</code> <code>routes/courses.js:91</code>"},{"location":"Editing-%26-Deleting-Courses/#query-parameterization","title":"Query Parameterization","text":"<p>All database operations use parameterized queries (placeholders with <code>?</code>) to prevent SQL injection attacks. The <code>mysql2</code> driver automatically escapes parameter values before query execution.</p> <p>Example from Update Operation:</p> <pre><code>db.query(\n    \"UPDATE cursos SET ? WHERE id = ?\", \n    [{\n        titulo: titulo,\n        descripcion: descripcion,\n        categoria: categoria,\n    }, id],\n    (error, results) =&gt; { ... }\n);\n</code></pre> <p>The first parameter (<code>?</code>) accepts an object where keys map to column names, and the second parameter (<code>?</code>) is the scalar course ID src/controller.js L35-L43</p> <p>Sources: routes/courses.js L77</p> <p>routes/courses.js L91</p> <p>src/controller.js L35-L43</p>"},{"location":"Editing-%26-Deleting-Courses/#error-handling","title":"Error Handling","text":"<p>Edit Route: Errors are thrown, delegating to Express's error handling middleware routes/courses.js L79</p> <p>Update Controller: Errors are logged to console but execution continues, redirecting regardless of success src/controller.js L45-L48</p> <p>Delete Route: Errors are thrown, delegating to Express's error handling middleware routes/courses.js L93</p> <p>This inconsistent error handling approach means that update failures may not be visible to administrators, as they are always redirected to <code>/courses</code> even when the database operation fails.</p> <p>Sources: routes/courses.js L79</p> <p>routes/courses.js L93</p> <p>src/controller.js L45-L48</p>"},{"location":"Editing-%26-Deleting-Courses/#complete-endpoint-reference","title":"Complete Endpoint Reference","text":"<p>Table: Edit and Delete Endpoints</p> Method Path Middleware Handler Request Data Response GET <code>/edit/:id</code> <code>estaAutenticado</code>, <code>isAdmin</code> Inline function URL param: <code>id</code> Rendered <code>edit.ejs</code> with <code>curso</code> object POST <code>/update</code> <code>estaAutenticado</code>, <code>isAdmin</code> <code>crud.update</code> Body: <code>id</code>, <code>titulo</code>, <code>descripcion</code>, <code>categoria</code> Redirect to <code>/courses</code> GET <code>/delete/:id</code> <code>estaAutenticado</code>, <code>isAdmin</code> Inline function URL param: <code>id</code> Redirect to <code>/courses</code> <p>Response Patterns:</p> <ul> <li>Edit (GET): Server-side rendered HTML form</li> <li>Update (POST): Post-Redirect-Get pattern to <code>/courses</code></li> <li>Delete (GET): Immediate redirect to <code>/courses</code> after deletion</li> </ul> <p>Sources: routes/courses.js L73-L104</p>"},{"location":"Editing-%26-Deleting-Courses/#integration-points","title":"Integration Points","text":"<p>Diagram: System Integration Map</p> <pre><code>flowchart TD\n\nCoursesList[\"GET /courses&lt;br&gt;[routes/courses.js:35]\"]\nAdminProfile[\"GET /admin/perfil&lt;br&gt;[routes/courses.js:172]\"]\nEditGet[\"GET /edit/:id&lt;br&gt;[routes/courses.js:73]\"]\nUpdatePost[\"POST /update&lt;br&gt;[routes/courses.js:103]\"]\nDeleteGet[\"GET /delete/:id&lt;br&gt;[routes/courses.js:87]\"]\nController[\"crud.update&lt;br&gt;[src/controller.js:28]\"]\nDBModule[\"config/db.js&lt;br&gt;MySQL Connection Pool\"]\nEditView[\"views/edit.ejs\"]\nCoursesView[\"views/courses.ejs\"]\nCursosTable[\"MySQL: cursos table\"]\n\nCoursesList --&gt; EditGet\nCoursesList --&gt; DeleteGet\nAdminProfile --&gt; CoursesList\nEditGet --&gt; DBModule\nDBModule --&gt; EditView\nEditView --&gt; UpdatePost\nUpdatePost --&gt; Controller\nController --&gt; DBModule\nDeleteGet --&gt; DBModule\nController --&gt; CoursesList\nDeleteGet --&gt; CoursesList\nDBModule --&gt; CursosTable</code></pre> <p>Sources: routes/courses.js L35-L187</p> <p>src/controller.js L28-L52</p> <p>views/edit.ejs L1-L35</p> <p>The edit and delete functionality integrates with the broader course management system through the <code>/courses</code> listing page, which conditionally displays edit and delete action links to administrators. After any modification or deletion, the system redirects back to <code>/courses</code>, creating a circular workflow that allows administrators to perform multiple operations in sequence.</p>"},{"location":"Frontend-Architecture/","title":"Frontend Architecture","text":"<p>Relevant source files * app.js * views/index.ejs * views/partials/head.ejs * views/partials/header.ejs</p>"},{"location":"Frontend-Architecture/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a comprehensive overview of the frontend architecture for the course management system. It covers the EJS templating system, reusable partial components, view rendering pipeline, static asset organization, and the consistent UI structure maintained across all pages.</p> <p>For information about specific view implementations and their associated routes, see API Reference. For styling patterns and CSS organization, see Template System &amp; Partials and Styling System. For the overall system architecture including backend integration, see Architecture Overview.</p>"},{"location":"Frontend-Architecture/#template-rendering-system","title":"Template Rendering System","text":"<p>The application uses EJS (Embedded JavaScript) as its server-side templating engine. The engine is configured in the main application entry point and allows dynamic HTML generation with embedded JavaScript logic.</p>"},{"location":"Frontend-Architecture/#ejs-configuration","title":"EJS Configuration","text":"<p>The Express application is configured to use EJS for view rendering:</p> <pre><code>app.set('view engine', 'ejs');\n</code></pre> <p>Sources: app.js L21</p> <p>This configuration enables automatic template resolution from the default <code>views/</code> directory. When route handlers call <code>res.render('templateName', data)</code>, Express automatically:</p> <ol> <li>Locates the template file at <code>views/templateName.ejs</code></li> <li>Processes EJS syntax and embedded JavaScript</li> <li>Injects provided data variables</li> <li>Returns rendered HTML to the client</li> </ol>"},{"location":"Frontend-Architecture/#view-file-organization","title":"View File Organization","text":"<p>The frontend follows a modular view structure with clear separation between full page templates and reusable partial components.</p>"},{"location":"Frontend-Architecture/#directory-structure","title":"Directory Structure","text":"Directory/File Purpose <code>views/*.ejs</code> Full page templates (index, login, register, courses, etc.) <code>views/partials/head.ejs</code> Shared HTML head section with meta tags and external dependencies <code>views/partials/header.ejs</code> Shared navigation header component <code>public/css/*.css</code> Page-specific and component-specific stylesheets <code>public/resources/</code> Static assets (images, fonts, client-side scripts) <p>Diagram: Frontend File Structure and Relationships</p> <pre><code>\n</code></pre> <p>Sources: views/index.ejs L1-L3</p> <p>views/partials/head.ejs L1-L9</p> <p>views/partials/header.ejs L1-L19</p>"},{"location":"Frontend-Architecture/#partial-component-system","title":"Partial Component System","text":"<p>The application implements a partial reuse strategy to maintain consistency and reduce code duplication across views. Partials are included using EJS's <code>include</code> directive.</p>"},{"location":"Frontend-Architecture/#head-partial","title":"Head Partial","text":"<p>The <code>head.ejs</code> partial contains the common HTML document structure and external dependencies:</p> <p>Key Elements:</p> <ul> <li>DOCTYPE and HTML structure initialization</li> <li>UTF-8 character encoding</li> <li>Viewport meta tag for responsive design</li> <li>Bootstrap 5.3.7 CSS framework via CDN</li> <li>Boxicons icon library via CDN</li> <li>Base stylesheet reference (<code>/resources/css/index.css</code>)</li> <li>Application title: \"THOT\"</li> </ul> <p>Sources: views/partials/head.ejs L1-L9</p>"},{"location":"Frontend-Architecture/#header-partial","title":"Header Partial","text":"<p>The <code>header.ejs</code> partial provides the navigation menu structure and closes the HTML head section:</p> <p>Navigation Links:</p> <ul> <li>Home (<code>/</code>)</li> <li>Login (<code>/login</code>)</li> <li>Register (<code>/register</code>)</li> <li>User Profile (<code>/perfil</code>)</li> <li>Admin Profile (<code>/admin/perfil</code>)</li> <li>Course Management (<code>/courses</code>)</li> </ul> <p>The header includes a responsive hamburger menu toggle mechanism implemented with client-side JavaScript:</p> <pre><code>\n</code></pre> <p>Sources: views/partials/header.ejs L1-L26</p>"},{"location":"Frontend-Architecture/#including-partials-in-views","title":"Including Partials in Views","text":"<p>Views include partials using the EJS <code>include</code> directive with relative paths:</p> <pre><code>&lt;%- include('partials/head') %&gt;\n&lt;link rel=\"stylesheet\" href=\"/resources/css/header.css\"&gt;\n&lt;%- include('partials/header') %&gt;\n</code></pre> <p>The <code>&lt;%-</code> syntax performs unescaped interpolation, which is necessary for including HTML partials. After including the header partial, individual views can add page-specific stylesheets.</p> <p>Sources: views/index.ejs L1-L3</p>"},{"location":"Frontend-Architecture/#data-flow-routes-to-views","title":"Data Flow: Routes to Views","text":"<p>The frontend receives dynamic data through the route-to-view rendering pipeline. Understanding this flow is critical for extending the system with new views.</p> <p>Diagram: View Rendering Pipeline</p> <p>Sources: app.js L4-L13</p> <p>views/index.ejs L6-L21</p>"},{"location":"Frontend-Architecture/#view-data-context","title":"View Data Context","text":"<p>Route handlers pass data to views through the second parameter of <code>res.render()</code>. Common data variables include:</p> Variable Type Description Source <code>name</code> String User's name or \"Invitado\" <code>req.session.usuario</code> <code>login</code> Boolean Whether user is authenticated <code>req.session.loggedin</code> <code>rol</code> String User role (publico/registrado/admin) <code>req.session.rol</code> <code>nombre</code> String Application/organization name Hardcoded or config <code>experiencia</code> String Tagline or description Hardcoded or config <p>Dynamic View Rendering Example:</p> <p>The landing page demonstrates conditional rendering based on authentication state:</p> <pre><code>&lt;% if (login) { %&gt;\n  &lt;h3&gt;Usuario Conectado: &lt;strong&gt;&lt;%= name %&gt;&lt;/strong&gt;&lt;/h3&gt;\n  &lt;form action=\"/logout\" method=\"POST\"&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary mt-3\"&gt;Cerrar sesi\u00f3n&lt;/button&gt;\n  &lt;/form&gt;\n&lt;% } else { %&gt;\n  &lt;h3&gt;Bienvenido, &lt;strong&gt;&lt;%= name || 'Invitado' %&gt;&lt;/strong&gt;&lt;/h3&gt;\n  &lt;a href=\"/login\" class=\"btn btn-primary mt-3\"&gt;Iniciar Sesion&lt;/a&gt;\n&lt;% } %&gt;\n</code></pre> <p>Sources: views/index.ejs L13-L21</p>"},{"location":"Frontend-Architecture/#ejs-syntax-summary","title":"EJS Syntax Summary","text":"Syntax Purpose Escaping <code>&lt;% code %&gt;</code> Execute JavaScript logic (loops, conditionals) N/A <code>&lt;%= variable %&gt;</code> Output escaped value (safe for user input) Yes <code>&lt;%- html %&gt;</code> Output unescaped HTML (for partials, trusted content) No <code>&lt;%# comment %&gt;</code> Template comments (not rendered) N/A"},{"location":"Frontend-Architecture/#static-asset-serving","title":"Static Asset Serving","text":"<p>Static assets are served through Express's built-in <code>express.static</code> middleware, configured with a custom URL prefix.</p>"},{"location":"Frontend-Architecture/#static-middleware-configuration","title":"Static Middleware Configuration","text":"<pre><code>app.use(\"/resources\", express.static(__dirname + \"/public\"));\n</code></pre> <p>Sources: app.js L19</p> <p>This configuration maps the <code>/resources</code> URL path to the <code>public/</code> directory. Assets are accessible via:</p> File Location URL Path <code>public/css/index.css</code> <code>/resources/css/index.css</code> <code>public/css/header.css</code> <code>/resources/css/header.css</code> <code>public/images/logo.png</code> <code>/resources/images/logo.png</code>"},{"location":"Frontend-Architecture/#asset-references-in-views","title":"Asset References in Views","text":"<p>Views reference static assets using the <code>/resources</code> prefix:</p> <pre><code>\n</code></pre> <p>Sources: views/partials/head.ejs L6</p> <p>views/index.ejs L2</p>"},{"location":"Frontend-Architecture/#external-dependencies-and-cdn-integration","title":"External Dependencies and CDN Integration","text":"<p>The frontend leverages external CSS frameworks and libraries loaded via CDN for rapid UI development and consistent design patterns.</p> <p>Diagram: Frontend Dependency Resolution</p> <p>Sources: app.js L19</p> <p>views/partials/head.ejs L7-L8</p>"},{"location":"Frontend-Architecture/#bootstrap-537","title":"Bootstrap 5.3.7","text":"<p>The application uses Bootstrap for responsive grid layout, component styling, and utility classes:</p> <p>Common Bootstrap classes used:</p> <ul> <li><code>btn btn-primary</code> - Primary action buttons</li> <li><code>mt-3</code> - Margin-top utility (spacing)</li> <li>Form components, grid system, and responsive utilities</li> </ul> <p>Sources: views/partials/head.ejs L8</p> <p>views/index.ejs L16-L20</p>"},{"location":"Frontend-Architecture/#boxicons-icon-library","title":"Boxicons Icon Library","text":"<p>Boxicons provides vector icon sets for the UI:</p> <p>Sources: views/partials/head.ejs L7</p>"},{"location":"Frontend-Architecture/#responsive-navigation-system","title":"Responsive Navigation System","text":"<p>The header implements a mobile-responsive navigation menu with JavaScript-powered toggle functionality.</p>"},{"location":"Frontend-Architecture/#navigation-structure","title":"Navigation Structure","text":"<p>The navigation consists of:</p> <ol> <li>Logo/Brand: \"THOT\" brand text</li> <li>Menu Toggle Button: Three-line hamburger icon for mobile</li> <li>Navigation Links: Menu items with route paths</li> </ol>"},{"location":"Frontend-Architecture/#mobile-menu-toggle","title":"Mobile Menu Toggle","text":"<p>The responsive behavior is controlled by JavaScript that toggles the <code>active</code> class:</p> <pre><code>\n</code></pre> <p>This function is triggered by the hamburger menu button:</p> <pre><code>\n</code></pre> <p>The CSS (in <code>header.css</code>) handles the responsive display logic based on the <code>active</code> class state.</p> <p>Sources: views/partials/header.ejs L6-L25</p>"},{"location":"Frontend-Architecture/#ui-consistency-patterns","title":"UI Consistency Patterns","text":"<p>The application maintains consistent UI patterns across all views through:</p> <ol> <li>Shared Partials: Every view includes <code>head.ejs</code> and <code>header.ejs</code></li> <li>Bootstrap Framework: Uniform component styling and spacing</li> <li>Page-Specific Stylesheets: Additional styles loaded after partials</li> <li>Consistent Navigation: Same menu structure on every page</li> <li>Common Data Variables: Standardized naming (login, name, rol)</li> </ol>"},{"location":"Frontend-Architecture/#template-inclusion-pattern","title":"Template Inclusion Pattern","text":"<p>All full-page templates follow this structure:</p> <pre><code>&lt;%- include('partials/head') %&gt;\n&lt;!-- Optional: page-specific CSS --&gt;\n&lt;link rel=\"stylesheet\" href=\"/resources/css/page-specific.css\"&gt;\n&lt;%- include('partials/header') %&gt;\n\n&lt;!-- Page-specific content --&gt;\n&lt;section&gt;\n  &lt;!-- View content here --&gt;\n&lt;/section&gt;\n\n&lt;!-- Optional: page-specific scripts --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Sources: views/index.ejs L1-L3</p>"},{"location":"Frontend-Architecture/#session-integration-in-views","title":"Session Integration in Views","text":"<p>Views have access to session data passed from route handlers, enabling personalized content rendering without client-side state management.</p>"},{"location":"Frontend-Architecture/#session-aware-rendering","title":"Session-Aware Rendering","text":"<p>The index page demonstrates session-aware conditional rendering:</p> Session State View Behavior <code>login: false</code> Shows welcome message with \"Invitado\", displays login button <code>login: true</code> Shows connected user with name, displays logout form <code>nombre</code> exists Displays organization name and tagline <code>nombre</code> absent Omits organization header section <p>Sources: views/index.ejs L6-L21</p> <p>This pattern allows the same view template to serve different UI states without page reloads or client-side JavaScript frameworks.</p>"},{"location":"Frontend-Architecture/#summary","title":"Summary","text":"<p>The frontend architecture implements a server-side rendering strategy using EJS templates with the following key characteristics:</p> <ul> <li>Modular Design: Reusable partials (<code>head.ejs</code>, <code>header.ejs</code>) reduce code duplication</li> <li>Session-Driven UI: Views adapt based on authentication state and user roles</li> <li>External Dependencies: Bootstrap and Boxicons via CDN for rapid UI development</li> <li>Static Asset Management: Express static middleware serves CSS and resources with <code>/resources</code> prefix</li> <li>Responsive Navigation: JavaScript-powered mobile menu toggle</li> <li>Template Consistency: All views follow the same inclusion pattern for uniform structure</li> </ul> <p>This architecture supports rapid development of new views while maintaining UI consistency. New views can be added by creating an EJS file in <code>views/</code>, including the standard partials, and rendering from route handlers with appropriate data context.</p> <p>Primary Sources:</p> <ul> <li>app.js L19-L31</li> <li>views/index.ejs L1-L22</li> <li>views/partials/head.ejs L1-L9</li> <li>views/partials/header.ejs L1-L26</li> </ul>"},{"location":"Getting-Started/","title":"Getting Started","text":"<p>Relevant source files * .gitignore * config/db.js * package-lock.json * package.json</p> <p>This page provides step-by-step instructions for setting up the course management system on your local development environment. It covers installing dependencies, configuring environment variables, initializing the MySQL database, and starting the application server. For information about the system's architecture and features, see Overview. For details about the authentication system, see Authentication &amp; Authorization.</p>"},{"location":"Getting-Started/#prerequisites","title":"Prerequisites","text":"<p>Before beginning the setup process, ensure your system has the following installed:</p> Requirement Minimum Version Purpose Node.js 18.0.0 Runtime environment for executing the application npm 6.0.0 Package manager for installing dependencies MySQL 5.7+ Relational database management system Git Any recent version Version control for cloning the repository"},{"location":"Getting-Started/#installation-process","title":"Installation Process","text":"<p>The following diagram illustrates the complete installation workflow, from cloning the repository to starting the server:</p> <pre><code>flowchart TD\n\nStart[\"Start Installation\"]\nClone[\"Clone Repository&lt;br&gt;github.com/Lourdes12587/Week06\"]\nInstall[\"npm install&lt;br&gt;Reads package.json\"]\nCreateEnv[\"Create .env File&lt;br&gt;Configure environment variables\"]\nSetupDB[\"Initialize MySQL Database&lt;br&gt;Create tables: usuarios, cursos, inscripciones\"]\nStartServer[\"node app.js&lt;br&gt;Starts Express server\"]\nVerify[\"Verify Installation&lt;br&gt;Access Unsupported markdown: link\"]\nPackageJSON[\"package.json&lt;br&gt;Dependencies list\"]\nDBConfig[\"config/db.js&lt;br&gt;Database connection\"]\nAppJS[\"app.js&lt;br&gt;Server initialization\"]\n\nStart --&gt; Clone\nClone --&gt; Install\nInstall --&gt; CreateEnv\nCreateEnv --&gt; SetupDB\nSetupDB --&gt; StartServer\nStartServer --&gt; Verify\nInstall --&gt; PackageJSON\nCreateEnv --&gt; DBConfig\nSetupDB --&gt; AppJS</code></pre> <p>Sources: package.json L1-L27</p> <p>config/db.js L1-L20</p>"},{"location":"Getting-Started/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>Clone the project repository to your local machine:</p> <pre><code>git clone https://github.com/Lourdes12587/Week06.git\ncd Week06\n</code></pre>"},{"location":"Getting-Started/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<p>Install all required npm packages by running:</p> <pre><code>npm install\n</code></pre> <p>This command reads package.json L1-L27</p> <p>and installs the following dependencies:</p> Package Version Purpose <code>express</code> 5.1.0 Web application framework <code>ejs</code> 3.1.10 Template engine for rendering views <code>mysql2</code> 3.14.3 MySQL database driver <code>bcryptjs</code> 3.0.2 Password hashing and verification <code>jsonwebtoken</code> 9.0.2 JWT token generation and validation <code>express-session</code> 1.18.2 Session middleware <code>express-validator</code> 7.2.1 Input validation and sanitization <code>dotenv</code> 17.2.1 Environment variable management <code>cookie-parser</code> 1.4.7 Cookie parsing middleware <code>socket.io</code> 4.8.1 WebSocket communication library <p>The installation process creates a <code>node_modules</code> directory containing all dependencies. This directory is excluded from version control via .gitignore L1-L2</p> <p>Sources: package.json L13-L25</p> <p>package-lock.json L1-L1497</p> <p>.gitignore L1-L2</p>"},{"location":"Getting-Started/#step-3-environment-configuration","title":"Step 3: Environment Configuration","text":"<p>Create a <code>.env</code> file in the project root directory to configure environment-specific settings. This file is excluded from version control per .gitignore L1-L2</p> <p>to protect sensitive information.</p>"},{"location":"Getting-Started/#required-environment-variables","title":"Required Environment Variables","text":"<p>The following diagram shows how environment variables flow through the application:</p> <pre><code>flowchart TD\n\nEnvFile[\".env File\"]\nDotenv[\"dotenv package&lt;br&gt;Loads variables into process.env\"]\nAppJS[\"app.js&lt;br&gt;Server configuration\"]\nDBConfig[\"config/db.js&lt;br&gt;MySQL connection\"]\nConnection[\"mysql.createConnection()&lt;br&gt;Database connection pool\"]\n\nEnvFile --&gt; Dotenv\nDotenv --&gt; AppJS\nDotenv --&gt; AppJS\nDotenv --&gt; DBConfig\nDotenv --&gt; DBConfig\nDotenv --&gt; DBConfig\nDotenv --&gt; DBConfig\nDBConfig --&gt; Connection</code></pre> <p>Sources: config/db.js L3-L9</p>"},{"location":"Getting-Started/#env-file-template","title":".env File Template","text":"<p>Create a <code>.env</code> file with the following structure:</p> <pre><code># Server Configuration\nPORT=3000\n\n# Session Configuration\nSESSION_SECRET=your-secret-key-here\n\n# MySQL Database Configuration\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=your-database-password\nDB_NAME=curso_db\n</code></pre>"},{"location":"Getting-Started/#configuration-details","title":"Configuration Details","text":"Variable Description Example Value <code>PORT</code> TCP port for Express server <code>3000</code> <code>SESSION_SECRET</code> Secret key for session encryption Generate a random string <code>DB_HOST</code> MySQL server hostname <code>localhost</code> or <code>127.0.0.1</code> <code>DB_USER</code> MySQL username with database access <code>root</code> <code>DB_PASS</code> MySQL user password Your database password <code>DB_NAME</code> Name of the MySQL database <code>curso_db</code> <p>Important: The <code>SESSION_SECRET</code> should be a long, random string for production environments. Never commit the <code>.env</code> file to version control.</p> <p>Sources: config/db.js L3-L9</p> <p>.gitignore L2</p>"},{"location":"Getting-Started/#step-4-database-initialization","title":"Step 4: Database Initialization","text":""},{"location":"Getting-Started/#create-mysql-database","title":"Create MySQL Database","text":"<p>Connect to your MySQL server and execute the following SQL commands to create the database and tables:</p> <pre><code>-- Create database\nCREATE DATABASE IF NOT EXISTS curso_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nUSE curso_db;\n\n-- Create usuarios table\nCREATE TABLE IF NOT EXISTS usuarios (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    email VARCHAR(100) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    rol ENUM('publico', 'registrado', 'admin') DEFAULT 'registrado',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create cursos table\nCREATE TABLE IF NOT EXISTS cursos (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    titulo VARCHAR(200) NOT NULL,\n    descripcion TEXT,\n    categoria VARCHAR(100),\n    visibilidad ENUM('publico', 'privado') DEFAULT 'publico',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\n-- Create inscripciones table (junction table for many-to-many relationship)\nCREATE TABLE IF NOT EXISTS inscripciones (\n    id_usuario INT NOT NULL,\n    id_curso INT NOT NULL,\n    fecha_inscripcion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id_usuario, id_curso),\n    FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE,\n    FOREIGN KEY (id_curso) REFERENCES cursos(id) ON DELETE CASCADE\n);\n\n-- Create default admin user (password: 'admin123')\nINSERT INTO usuarios (nombre, email, password, rol) VALUES\n('Administrator', 'admin@example.com', '$2a$10$K8m.1JzU5H5KkJLWZxvHwOYxT5xGxHhZx.7LQnVZLZGBv3mZJk7ye', 'admin');\n</code></pre>"},{"location":"Getting-Started/#database-schema-relationships","title":"Database Schema Relationships","text":"<pre><code>#mermaid-zazu9v8dmwr{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-zazu9v8dmwr .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-zazu9v8dmwr .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-zazu9v8dmwr .error-icon{fill:#dddddd;}#mermaid-zazu9v8dmwr .error-text{fill:#222222;stroke:#222222;}#mermaid-zazu9v8dmwr .edge-thickness-normal{stroke-width:1px;}#mermaid-zazu9v8dmwr .edge-thickness-thick{stroke-width:3.5px;}#mermaid-zazu9v8dmwr .edge-pattern-solid{stroke-dasharray:0;}#mermaid-zazu9v8dmwr .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-zazu9v8dmwr .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-zazu9v8dmwr .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-zazu9v8dmwr .marker{fill:#999;stroke:#999;}#mermaid-zazu9v8dmwr .marker.cross{stroke:#999;}#mermaid-zazu9v8dmwr svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-zazu9v8dmwr p{margin:0;}#mermaid-zazu9v8dmwr .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-zazu9v8dmwr .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-zazu9v8dmwr .relationshipLabelBox rect{opacity:0.5;}#mermaid-zazu9v8dmwr .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-zazu9v8dmwr .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-zazu9v8dmwr .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-zazu9v8dmwr .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-zazu9v8dmwr .node rect,#mermaid-zazu9v8dmwr .node circle,#mermaid-zazu9v8dmwr .node ellipse,#mermaid-zazu9v8dmwr .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-zazu9v8dmwr .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-zazu9v8dmwr .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-zazu9v8dmwr :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}enrolls inhas enrollmentsusuariosINTidPKVARCHARnombreVARCHARemailUKVARCHARpasswordENUMrolTIMESTAMPcreated_atinscripcionesINTid_usuarioFKINTid_cursoFKTIMESTAMPfecha_inscripcioncursosINTidPKVARCHARtituloTEXTdescripcionVARCHARcategoriaENUMvisibilidadTIMESTAMPcreated_at\n</code></pre>"},{"location":"Getting-Started/#database-connection-verification","title":"Database Connection Verification","text":"<p>The config/db.js L1-L20</p> <p>module establishes the MySQL connection. It performs the following operations:</p> <ol> <li>Line 3-9: Creates a connection using <code>mysql.createConnection()</code> with environment variables</li> <li>Line 11-17: Attempts to connect and logs success or error</li> <li>Line 19: Exports the connection object for use throughout the application</li> </ol> <p>The connection module uses these environment variables from <code>process.env</code>:</p> <ul> <li><code>DB_HOST</code> - config/db.js L4</li> <li><code>DB_USER</code> - config/db.js L5</li> <li><code>DB_PASS</code> - config/db.js L6</li> <li><code>DB_NAME</code> - config/db.js L7</li> </ul> <p>Sources: config/db.js L1-L20</p>"},{"location":"Getting-Started/#step-5-start-the-application","title":"Step 5: Start the Application","text":""},{"location":"Getting-Started/#running-the-server","title":"Running the Server","text":"<p>Start the Express server using the npm start script defined in package.json L8</p> <p>:</p> <pre><code>npm start\n</code></pre> <p>Alternatively, run directly with Node.js:</p> <pre><code>node app.js\n</code></pre>"},{"location":"Getting-Started/#application-startup-sequence","title":"Application Startup Sequence","text":"<pre><code>sequenceDiagram\n  participant npm start\n  participant Node.js Runtime\n  participant dotenv Package\n  participant app.js\n  participant config/db.js\n  participant MySQL Database\n  participant Express Server\n\n  npm start-&gt;&gt;Node.js Runtime: Execute \"node app.js\"\n  Node.js Runtime-&gt;&gt;app.js: Load application\n  app.js-&gt;&gt;dotenv Package: require('dotenv').config()\n  dotenv Package-&gt;&gt;dotenv Package: Parse .env file\n  dotenv Package--&gt;&gt;app.js: Environment variables loaded\n  app.js-&gt;&gt;config/db.js: require('./config/db.js')\n  config/db.js-&gt;&gt;MySQL Database: mysql.createConnection()\n  MySQL Database--&gt;&gt;config/db.js: Connection established\n  config/db.js--&gt;&gt;config/db.js: console.log(\"Conectado a la base de datos\")\n  config/db.js--&gt;&gt;app.js: Export conexion object\n  app.js-&gt;&gt;Express Server: app.listen(PORT)\n  Express Server--&gt;&gt;app.js: Server listening\n  app.js-&gt;&gt;app.js: console.log(\"Server running on port PORT\")</code></pre>"},{"location":"Getting-Started/#expected-console-output","title":"Expected Console Output","text":"<p>When the application starts successfully, you should see the following messages:</p> <pre><code>Conectado a la base de datos\nServer running on port 3000\n</code></pre> <p>The first message confirms the database connection from config/db.js L15</p> <p>The second message indicates the Express server is listening on the configured port.</p> <p>Sources: package.json L6-L8</p> <p>config/db.js L11-L17</p>"},{"location":"Getting-Started/#step-6-verify-installation","title":"Step 6: Verify Installation","text":""},{"location":"Getting-Started/#access-the-application","title":"Access the Application","text":"<p>Open your web browser and navigate to:</p> <pre><code>http://localhost:3000\n</code></pre> <p>Replace <code>3000</code> with your configured <code>PORT</code> if different.</p>"},{"location":"Getting-Started/#expected-landing-page","title":"Expected Landing Page","text":"<p>You should see the application's landing page with the following elements:</p> <ul> <li>Navigation header with application branding</li> <li>Login and registration links (if not authenticated)</li> <li>Public course listings</li> </ul>"},{"location":"Getting-Started/#verification-checklist","title":"Verification Checklist","text":"Component Verification Method Expected Result Server Running Browser access to <code>http://localhost:PORT</code> Landing page loads successfully Database Connection Check console output \"Conectado a la base de datos\" message Static Assets Check browser network tab CSS and images load from <code>/public</code> Session Middleware Login attempt Session cookie created Template Engine View page source Rendered HTML (not EJS syntax)"},{"location":"Getting-Started/#troubleshooting-connection-issues","title":"Troubleshooting Connection Issues","text":"<p>If you see \"Cannot connect to database\" in the console:</p> <ol> <li>Verify MySQL server is running: <code>mysql -u root -p</code></li> <li>Confirm database exists: <code>SHOW DATABASES LIKE 'curso_db';</code></li> <li>Check <code>.env</code> file credentials match MySQL user</li> <li>Ensure <code>DB_HOST</code> is correct (<code>localhost</code> or <code>127.0.0.1</code>)</li> <li>Verify the user has privileges: <code>SHOW GRANTS FOR 'your_user'@'localhost';</code></li> </ol> <p>Sources: config/db.js L11-L17</p>"},{"location":"Getting-Started/#directory-structure-overview","title":"Directory Structure Overview","text":"<p>After successful installation, your project structure should look like this:</p> <pre><code>flowchart TD\n\nRoot[\"Project Root&lt;br&gt;Week06/\"]\nConfig[\"config/&lt;br&gt;Configuration\"]\nRoutes[\"routes/&lt;br&gt;Route Handlers\"]\nViews[\"views/&lt;br&gt;EJS Templates\"]\nPublic[\"public/&lt;br&gt;Static Assets\"]\nSrc[\"src/&lt;br&gt;Controllers\"]\nDB[\"db.js&lt;br&gt;MySQL connection\"]\nAuth[\"auth.js&lt;br&gt;Login/Register routes\"]\nCourses[\"courses.js&lt;br&gt;Course management\"]\nIndex[\"index.js&lt;br&gt;Home routes\"]\nCSS[\"css/&lt;br&gt;Stylesheets\"]\nResources[\"resources/&lt;br&gt;Images/Icons\"]\nController[\"controller.js&lt;br&gt;Course CRUD\"]\nCursoCtrl[\"cursoController.js&lt;br&gt;Enrollment logic\"]\nAppJS[\"app.js&lt;br&gt;Main server file\"]\nPackageJSON[\"package.json&lt;br&gt;Dependencies\"]\nEnv[\".env&lt;br&gt;Environment config\"]\nNodeModules[\"node_modules/&lt;br&gt;Installed packages\"]\n\nRoot --&gt; Config\nRoot --&gt; Routes\nRoot --&gt; Views\nRoot --&gt; Public\nRoot --&gt; Src\nRoot --&gt; AppJS\nRoot --&gt; PackageJSON\nRoot --&gt; Env\nRoot --&gt; NodeModules\nConfig --&gt; DB\nRoutes --&gt; Auth\nRoutes --&gt; Courses\nRoutes --&gt; Index\nPublic --&gt; CSS\nPublic --&gt; Resources\nSrc --&gt; Controller\nSrc --&gt; CursoCtrl</code></pre> <p>Sources: package.json L1-L27</p> <p>config/db.js L1-L20</p> <p>.gitignore L1-L2</p>"},{"location":"Getting-Started/#next-steps","title":"Next Steps","text":"<p>After completing the installation and verification:</p> <ol> <li>Create an Admin Account: Use the default admin credentials or create a new admin user via SQL</li> <li>Explore the Architecture: Review Architecture Overview to understand the system design</li> <li>Configure Authentication: See Authentication &amp; Authorization for security details</li> <li>Add Courses: Learn about course management in Course Management System</li> <li>Customize Views: Explore the template system in Frontend Architecture</li> </ol> <p>For development workflow and extending the system, see Development Guide.</p>"},{"location":"Getting-Started/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"Getting-Started/#npm-install-fails","title":"npm install Fails","text":"<p>Symptom: Error messages during <code>npm install</code></p> <p>Solutions:</p> <ul> <li>Clear npm cache: <code>npm cache clean --force</code></li> <li>Delete <code>node_modules</code> and <code>package-lock.json</code>, then reinstall</li> <li>Update npm: <code>npm install -g npm@latest</code></li> <li>Check Node.js version meets requirement (\u226518.0.0)</li> </ul>"},{"location":"Getting-Started/#database-connection-errors","title":"Database Connection Errors","text":"<p>Symptom: \"Cannot connect to database\" or connection timeout</p> <p>Solutions:</p> <ul> <li>Verify MySQL service is running</li> <li>Check firewall allows connections on MySQL port (default 3306)</li> <li>Confirm credentials in <code>.env</code> match MySQL user</li> <li>Test connection manually: <code>mysql -h localhost -u root -p</code></li> </ul>"},{"location":"Getting-Started/#port-already-in-use","title":"Port Already in Use","text":"<p>Symptom: \"EADDRINUSE\" error when starting server</p> <p>Solutions:</p> <ul> <li>Change <code>PORT</code> in <code>.env</code> to an available port</li> <li>Identify process using port: <code>lsof -i :3000</code> (macOS/Linux) or <code>netstat -ano | findstr :3000</code> (Windows)</li> <li>Kill conflicting process or use different port</li> </ul>"},{"location":"Getting-Started/#missing-env-file","title":"Missing .env File","text":"<p>Symptom: Database connection fails with undefined variables</p> <p>Solutions:</p> <ul> <li>Ensure <code>.env</code> file exists in project root</li> <li>Verify file is named exactly <code>.env</code> (not <code>.env.txt</code>)</li> <li>Check all required variables are defined</li> <li>Restart server after creating/modifying <code>.env</code></li> </ul> <p>Sources: config/db.js L3-L9</p> <p>package.json L13-L25</p>"},{"location":"Landing-Page/","title":"Landing Page","text":"<p>Relevant source files * public/css/index.css * routes/index.js * views/index.ejs</p>"},{"location":"Landing-Page/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document covers the landing page implementation, which serves as the application's home route (<code>GET /</code>). The landing page adapts its display based on user authentication status, showing login prompts for unauthenticated visitors and personalized greetings with logout options for authenticated users.</p> <p>For information about other frontend components, see:</p> <ul> <li>Login and registration forms: Authentication Views</li> <li>Course listing and forms: Course Views</li> <li>Template partials and EJS system: Template System &amp; Partials</li> </ul>"},{"location":"Landing-Page/#route-handler","title":"Route Handler","text":"<p>The landing page is served by the root route handler located at routes/index.js L6-L15</p> <p>The handler extracts session data and passes contextual information to the EJS template renderer.</p>"},{"location":"Landing-Page/#request-processing-flow","title":"Request Processing Flow","text":"<p>Sources: routes/index.js L6-L15</p>"},{"location":"Landing-Page/#session-data-extraction","title":"Session Data Extraction","text":"<p>The route handler accesses the session object to determine authentication state:</p> Session Property Purpose Default Value <code>req.session.usuario</code> User object from database after login <code>undefined</code> <code>req.session.usuario.nombre</code> User's display name N/A <code>req.session.loggedin</code> Boolean authentication flag <code>undefined</code> <p>At routes/index.js L7</p> <p>the handler extracts the user object:</p> <pre><code>\n</code></pre> <p>At routes/index.js L9-L14</p> <p>the handler constructs the template data object:</p> <pre><code>\n</code></pre> <p>The <code>name</code> property uses a ternary operator to provide a fallback value of <code>\"Invitado\"</code> when no user is logged in.</p> <p>Sources: routes/index.js L6-L15</p>"},{"location":"Landing-Page/#template-structure","title":"Template Structure","text":"<p>The landing page template at views/index.ejs L1-L22</p> <p>implements a two-section layout with conditional rendering based on authentication status.</p>"},{"location":"Landing-Page/#template-component-architecture","title":"Template Component Architecture","text":"<p>Sources: views/index.ejs L1-L22</p>"},{"location":"Landing-Page/#partial-includes","title":"Partial Includes","text":"<p>The template begins with two partial includes at views/index.ejs L1-L3</p> <p>:</p> <ol> <li>Head partial: <code>&lt;%- include('partials/head') %&gt;</code> - Contains HTML metadata, viewport settings, and Bootstrap CDN links</li> <li>Header CSS: Custom stylesheet loaded at line 2</li> <li>Header partial: <code>&lt;%- include('partials/header') %&gt;</code> - Provides navigation bar consistent across all pages</li> </ol> <p>Sources: views/index.ejs L1-L3</p>"},{"location":"Landing-Page/#section-1-brand-display","title":"Section 1: Brand Display","text":"<p>The first section at views/index.ejs L5-L10</p> <p>displays static branding content:</p> <p>This section renders:</p> <ul> <li>Application name \"THOT\" in an <code>&lt;h1&gt;</code> heading</li> <li>Tagline from the <code>experiencia</code> variable in a <code>&lt;p&gt;</code> element</li> <li>Conditional wrapper ensures content only displays when data exists</li> </ul> <p>Sources: views/index.ejs L5-L10</p>"},{"location":"Landing-Page/#section-2-authentication-dependent-display","title":"Section 2: Authentication-Dependent Display","text":"<p>The second section at views/index.ejs L12-L22</p> <p>implements branching logic based on the <code>login</code> boolean flag.</p>"},{"location":"Landing-Page/#authenticated-user-view","title":"Authenticated User View","text":"<p>When <code>login</code> is <code>true</code>, the template renders at views/index.ejs L13-L17</p> <p>:</p> <pre><code>\n</code></pre> <p>Components:</p> <ul> <li>User's name displayed in <code>&lt;strong&gt;</code> tags</li> <li>POST form targeting <code>/logout</code> endpoint (handled by routes/auth.js )</li> <li>Bootstrap-styled button with <code>btn btn-primary mt-3</code> classes</li> </ul>"},{"location":"Landing-Page/#guest-user-view","title":"Guest User View","text":"<p>When <code>login</code> is <code>false</code>, the template renders at views/index.ejs L18-L21</p> <p>:</p> <pre><code>\n</code></pre> <p>Components:</p> <ul> <li>Welcome message with double fallback: <code>name || 'Invitado'</code></li> <li>Hyperlink to <code>/login</code> route styled as Bootstrap button</li> <li>Same visual styling as authenticated view for consistency</li> </ul> <p>Sources: views/index.ejs L12-L22</p>"},{"location":"Landing-Page/#conditional-rendering-logic","title":"Conditional Rendering Logic","text":"<p>The landing page implements state-dependent rendering:</p> <p>Sources: routes/index.js L6-L15</p> <p>views/index.ejs L12-L22</p>"},{"location":"Landing-Page/#styling-architecture","title":"Styling Architecture","text":"<p>The landing page CSS at public/css/index.css L1-L129</p> <p>implements a gradient-based design with interactive hover effects.</p>"},{"location":"Landing-Page/#core-layout-styles","title":"Core Layout Styles","text":"<p>The body element at public/css/index.css L9-L20</p> <p>establishes the page foundation:</p> Property Value Purpose <code>font-family</code> 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif Cross-platform typography <code>background</code> linear-gradient(135deg, #1e3c72, #2a5298) Blue gradient backdrop <code>display</code> flex Flexbox layout <code>flex-direction</code> column Vertical stacking <code>align-items</code> center Horizontal centering <code>justify-content</code> center Vertical centering <code>min-height</code> 100vh Full viewport height <code>animation</code> fadeIn 1s ease-out Entrance animation <p>Sources: public/css/index.css L9-L20</p>"},{"location":"Landing-Page/#heading-styles","title":"Heading Styles","text":"<p>The <code>&lt;h2&gt;</code> styling at public/css/index.css L23-L33</p> <p>includes:</p> <pre><code>\n</code></pre> <p>Interactive features:</p> <ul> <li>Scale transformation on hover (110% size)</li> <li>Color change to gold (#ffd700)</li> <li>Text shadow for depth perception</li> </ul> <p>Sources: public/css/index.css L23-L33</p>"},{"location":"Landing-Page/#paragraph-interactive-effects","title":"Paragraph Interactive Effects","text":"<p>Paragraph elements at public/css/index.css L36-L50</p> <p>implement hover overlays:</p> <p>This creates a semi-transparent white background when users hover over text content.</p> <p>Sources: public/css/index.css L36-L50</p>"},{"location":"Landing-Page/#navigation-bar","title":"Navigation Bar","text":"<p>The fixed navbar at public/css/index.css L53-L64</p> <p>uses:</p> <ul> <li><code>position: fixed</code> with <code>top: 0</code> for persistent visibility</li> <li><code>z-index: 1000</code> to overlay page content</li> <li>Gradient background from #4f46e5 to #3b82f6</li> <li>Flexbox with <code>space-between</code> for logo and links separation</li> </ul> <p>Navigation links at public/css/index.css L77-L98</p> <p>feature animated underlines using <code>::after</code> pseudo-elements:</p> <pre><code>\n</code></pre> <p>Sources: public/css/index.css L53-L99</p>"},{"location":"Landing-Page/#data-flow-mapping","title":"Data Flow Mapping","text":"<p>The complete request-response cycle maps to specific code entities:</p> <p>Sources: routes/index.js L6-L15</p> <p>views/index.ejs L1-L22</p> <p>public/css/index.css L1-L129</p>"},{"location":"Landing-Page/#template-variables-reference","title":"Template Variables Reference","text":"<p>All variables passed from routes/index.js L9-L14</p> <p>to the EJS renderer:</p> Variable Name Data Type Source Code Default/Fallback Usage in Template <code>nombre</code> String Hardcoded \"THOT\" N/A views/index.ejs L7   in <code>&lt;h1&gt;</code> <code>experiencia</code> String Hardcoded tagline N/A views/index.ejs L8   in <code>&lt;p&gt;</code> <code>login</code> Boolean <code>req.session.loggedin \\|\\| false</code> <code>false</code> views/index.ejs L13   conditional <code>name</code> String <code>usuario ? usuario.nombre : \"Invitado\"</code> <code>\"Invitado\"</code> views/index.ejs L14-L19   display <p>Sources: routes/index.js L9-L14</p> <p>views/index.ejs L6-L22</p>"},{"location":"Landing-Page/#integration-points","title":"Integration Points","text":""},{"location":"Landing-Page/#session-system-dependency","title":"Session System Dependency","text":"<p>The landing page requires <code>express-session</code> middleware configured in the main application. Session data must be populated by:</p> <ul> <li>routes/auth.js  during login (see User Login)</li> <li>Session middleware restoring cookies on subsequent requests (see Session Management)</li> </ul>"},{"location":"Landing-Page/#authentication-endpoints","title":"Authentication Endpoints","text":"<p>The template links to authentication routes:</p> Element Action Target Route HTTP Method Handler Location Login link Navigate <code>/login</code> GET routes/auth.js Logout form Submit <code>/logout</code> POST routes/auth.js <p>Sources: views/index.ejs L16-L20</p>"},{"location":"Landing-Page/#partial-templates","title":"Partial Templates","text":"<p>The landing page includes shared partials that provide consistent layout across the application:</p> <ol> <li><code>partials/head</code> - HTML metadata and Bootstrap CDN links</li> <li><code>partials/header</code> - Site-wide navigation bar</li> </ol> <p>For complete documentation on the partial system, see Template System &amp; Partials.</p> <p>Sources: views/index.ejs L1-L3</p>"},{"location":"Landing-Page/#security-considerations","title":"Security Considerations","text":"<p>The landing page implements minimal security measures as it displays only non-sensitive public information:</p> <ol> <li>XSS Protection: EJS <code>&lt;%= %&gt;</code> syntax auto-escapes HTML entities by default at views/index.ejs L7-L19</li> <li>No sensitive data exposure: Only displays user's name, never passwords or email</li> <li>CSRF-safe: Logout form at views/index.ejs L15-L17  should include CSRF token in production</li> <li>Session validation: No database queries performed, only session data reading at routes/index.js L7-L13</li> </ol> <p>Sources: routes/index.js L6-L15</p> <p>views/index.ejs L1-L22</p>"},{"location":"Landing-Page/#usage-scenarios","title":"Usage Scenarios","text":""},{"location":"Landing-Page/#scenario-1-first-time-visitor","title":"Scenario 1: First-Time Visitor","text":"<p>Initial Request:</p> <pre><code>GET / HTTP/1.1\nHost: localhost:3000\nCookie: (none)\n</code></pre> <p>Session State:</p> <pre><code>\n</code></pre> <p>Rendered Output:</p> <ul> <li>Heading: \"SOMOS THOT\"</li> <li>Paragraph: \"Es m\u00e1s que una experiencia, Los milagros llegan a tu lado cuando empieces a aprender\"</li> <li>Status: \"Bienvenido, Invitado\"</li> <li>Action: Button styled link to <code>/login</code></li> </ul> <p>Sources: routes/index.js L9-L14</p> <p>views/index.ejs L18-L21</p>"},{"location":"Landing-Page/#scenario-2-authenticated-user","title":"Scenario 2: Authenticated User","text":"<p>Authenticated Request:</p> <pre><code>GET / HTTP/1.1\nHost: localhost:3000\nCookie: connect.sid=s%3A...\n</code></pre> <p>Session State:</p> <pre><code>\n</code></pre> <p>Rendered Output:</p> <ul> <li>Heading: \"SOMOS THOT\"</li> <li>Paragraph: \"Es m\u00e1s que una experiencia, Los milagros llegan a tu lado cuando empieces a aprender\"</li> <li>Status: \"Usuario Conectado: Mar\u00eda Garc\u00eda\"</li> <li>Action: POST form with \"Cerrar sesi\u00f3n\" button</li> </ul> <p>Sources: routes/index.js L7-L14</p> <p>views/index.ejs L13-L17</p>"},{"location":"Landing-Page/#extension-guidelines","title":"Extension Guidelines","text":"<p>To modify landing page behavior:</p>"},{"location":"Landing-Page/#change-branding-content","title":"Change Branding Content","text":"<p>Update static strings at routes/index.js L10-L11</p> <p>:</p>"},{"location":"Landing-Page/#add-role-specific-content","title":"Add Role-Specific Content","text":"<p>Extend conditional logic to differentiate admin vs registered users:</p> <p>Then add conditional in views/index.ejs</p> <p>:</p>"},{"location":"Landing-Page/#modify-visual-design","title":"Modify Visual Design","text":"<p>Edit gradient colors at public/css/index.css L11</p> <p>:</p> <p>Sources: routes/index.js L6-L15</p> <p>views/index.ejs L1-L22</p> <p>public/css/index.css L9-L20</p>"},{"location":"Overview/","title":"Overview","text":"<p>Relevant source files * app.js * package.json * routes/courses.js</p>"},{"location":"Overview/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides a high-level introduction to the course management system located at https://github.com/Lourdes12587/Week06. It explains the system's purpose, architecture, core features, and technology stack. For detailed setup instructions, see Getting Started. For in-depth technical details about specific subsystems, refer to Architecture Overview, Authentication &amp; Authorization, Course Management System, and Frontend Architecture.</p>"},{"location":"Overview/#system-purpose","title":"System Purpose","text":"<p>The course management system is a role-based web application built with Node.js and Express that enables course creation, management, and enrollment. The system implements three distinct user roles with different capabilities:</p> Role Access Level Key Capabilities <code>publico</code> Guest View public courses, register, login <code>registrado</code> Authenticated User View all courses, enroll in courses, view personal profile <code>admin</code> Administrator Full CRUD on courses, view statistics, manage visibility <p>The application stores data in a MySQL database with three tables (<code>usuarios</code>, <code>cursos</code>, <code>inscripciones</code>) and implements comprehensive security through password hashing, session management, and role-based access control middleware.</p> <p>Sources: app.js L1-L41</p> <p>routes/courses.js L8-L33</p> <p>package.json L1-L26</p>"},{"location":"Overview/#high-level-architecture","title":"High-Level Architecture","text":"<p>The system follows a three-tier architecture with clear separation of concerns:</p> <pre><code>flowchart TD\n\nviews[\"views/*.ejs&lt;br&gt;EJS Templates\"]\ncss[\"public/css/*.css&lt;br&gt;Stylesheets\"]\nresources[\"public/resources/&lt;br&gt;Static Assets\"]\nappjs[\"app.js&lt;br&gt;Express Server\"]\nindexRoute[\"routes/index.js\"]\nauthRoute[\"routes/auth.js\"]\ncoursesRoute[\"routes/courses.js\"]\ncontroller[\"src/controller.js&lt;br&gt;CRUD Operations\"]\ncursoController[\"src/cursoController.js&lt;br&gt;Enrollment Logic\"]\nestaAutenticado[\"estaAutenticado()&lt;br&gt;Authentication Check\"]\nisAdmin[\"isAdmin()&lt;br&gt;Admin Role Check\"]\nisRegistrado[\"isRegistrado()&lt;br&gt;Registered Role Check\"]\nexpressSession[\"express-session&lt;br&gt;Session Storage\"]\ndbConfig[\"config/db.js&lt;br&gt;Connection Pool\"]\nmysql[\"MySQL Database&lt;br&gt;usuarios&lt;br&gt;cursos&lt;br&gt;inscripciones\"]\nenv[\".env&lt;br&gt;Environment Variables\"]\npackagejson[\"package.json&lt;br&gt;Dependencies\"]\n\nappjs --&gt; views\nappjs --&gt; css\nappjs --&gt; resources\ncoursesRoute --&gt; dbConfig\nauthRoute --&gt; dbConfig\ncontroller --&gt; dbConfig\ncursoController --&gt; dbConfig\nenv --&gt; appjs\nenv --&gt; dbConfig\npackagejson --&gt; appjs\n\nsubgraph Configuration [\"Configuration\"]\n    env\n    packagejson\nend\n\nsubgraph subGraph5 [\"Data Layer\"]\n    dbConfig\n    mysql\n    dbConfig --&gt; mysql\nend\n\nsubgraph subGraph4 [\"Application Layer\"]\n    appjs\n    appjs --&gt; indexRoute\n    appjs --&gt; authRoute\n    appjs --&gt; coursesRoute\n    appjs --&gt; expressSession\n    coursesRoute --&gt; estaAutenticado\n    coursesRoute --&gt; isAdmin\n    coursesRoute --&gt; isRegistrado\n    coursesRoute --&gt; controller\n    coursesRoute --&gt; cursoController\n\nsubgraph Middleware [\"Middleware\"]\n    estaAutenticado\n    isAdmin\n    isRegistrado\n    expressSession\nend\n\nsubgraph Controllers [\"Controllers\"]\n    controller\n    cursoController\nend\n\nsubgraph Routes [\"Routes\"]\n    indexRoute\n    authRoute\n    coursesRoute\nend\nend\n\nsubgraph subGraph0 [\"Presentation Layer\"]\n    views\n    css\n    resources\nend</code></pre> <p>Application Flow:</p> <ol> <li>Entry Point: app.js L1-L41  initializes the Express server, configures middleware, and mounts route handlers</li> <li>Route Handlers: Modular routers in <code>routes/</code> directory handle HTTP requests and apply middleware chains</li> <li>Middleware: Functions like <code>estaAutenticado</code>, <code>isAdmin</code>, and <code>isRegistrado</code> enforce authentication and authorization</li> <li>Controllers: Business logic in <code>src/controller.js</code> and <code>src/cursoController.js</code> process requests and interact with database</li> <li>Database: config/db.js  manages MySQL connection pool and query execution</li> <li>Views: EJS templates render dynamic HTML responses</li> </ol> <p>Sources: app.js L1-L41</p> <p>routes/courses.js L1-L187</p> <p>package.json L13-L25</p>"},{"location":"Overview/#core-features-by-user-role","title":"Core Features by User Role","text":""},{"location":"Overview/#public-users-rol-publico","title":"Public Users (rol: 'publico')","text":"<p>Public users can interact with the system without authentication:</p> <ul> <li>View landing page at <code>/</code></li> <li>Browse courses with <code>visibilidad='publico'</code> at <code>GET /courses</code></li> <li>Register new account at <code>GET/POST /register</code></li> <li>Login at <code>GET/POST /login</code></li> </ul> <p>The course visibility filter is applied at routes/courses.js L40-L42</p> <p>:</p> <pre><code>if (rol === 'publico') {\n  sql += \" WHERE visibilidad='publico'\";\n}\n</code></pre>"},{"location":"Overview/#registered-users-rol-registrado","title":"Registered Users (rol: 'registrado')","text":"<p>Protected by <code>estaAutenticado</code> and <code>isRegistrado</code> middleware:</p> <ul> <li>View all courses (no visibility restrictions)</li> <li>Enroll in courses via <code>GET/POST /inscribir/:id</code> routes/courses.js L106-L149</li> <li>View personal profile with enrolled courses at <code>GET /perfil</code> routes/courses.js L152-L169</li> <li>Duplicate enrollment prevention routes/courses.js L121-L133</li> </ul>"},{"location":"Overview/#administrators-rol-admin","title":"Administrators (rol: 'admin')","text":"<p>Protected by <code>estaAutenticado</code> and <code>isAdmin</code> middleware:</p> <ul> <li>Create courses: <code>GET /create</code> routes/courses.js L64-L67 <code>POST /save</code> routes/courses.js L70</li> <li>Edit courses: <code>GET /edit/:id</code> routes/courses.js L73-L84 <code>POST /update</code> routes/courses.js L103</li> <li>Delete courses: <code>GET /delete/:id</code> routes/courses.js L87-L98</li> <li>View admin dashboard with statistics at <code>GET /admin/perfil</code> routes/courses.js L172-L185</li> </ul> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L35-L62</p> <p>routes/courses.js L64-L185</p>"},{"location":"Overview/#technology-stack","title":"Technology Stack","text":"Category Technology Version Purpose Runtime Node.js - JavaScript runtime environment Framework Express 5.1.0 Web application framework Template Engine EJS 3.1.10 Server-side HTML rendering Database MySQL - Relational data storage Database Driver mysql2 3.14.3 MySQL client with connection pooling Authentication bcryptjs 3.0.2 Password hashing Authentication jsonwebtoken 9.0.2 JWT token generation Session Management express-session 1.18.2 Server-side session storage Validation express-validator 7.2.1 Input validation and sanitization Real-time socket.io 4.8.1 WebSocket support (future use) Configuration dotenv 17.2.1 Environment variable management Frontend Bootstrap 5.3.7 CSS framework (CDN) Icons Boxicons - Icon library (CDN) Alerts SweetAlert2 - User notification modals (CDN) <p>Sources: package.json L13-L25</p>"},{"location":"Overview/#request-flow-and-middleware-pipeline","title":"Request Flow and Middleware Pipeline","text":"<p>The following diagram illustrates how HTTP requests flow through the middleware pipeline and route handlers:</p> <pre><code>sequenceDiagram\n  participant Client Browser\n  participant app.js\n  participant Express Server\n  participant express-session\n  participant Middleware\n  participant routes/courses.js\n  participant Router\n  participant estaAutenticado()\n  participant isAdmin() / isRegistrado()\n  participant src/controller.js\n  participant Business Logic\n  participant config/db.js\n  participant MySQL Pool\n  participant views/*.ejs\n  participant Templates\n\n  Client Browser-&gt;&gt;app.js: \"GET/POST Request\"\n  app.js-&gt;&gt;express-session: \"Check/Initialize Session\"\n  express-session-&gt;&gt;app.js: \"req.session populated\"\n  loop [Redirect Response]\n    app.js-&gt;&gt;Client Browser: \"Serve from /public\"\n    app.js-&gt;&gt;routes/courses.js: \"Route to handler\"\n    routes/courses.js-&gt;&gt;estaAutenticado(): \"estaAutenticado()\"\n    estaAutenticado()-&gt;&gt;Client Browser: \"redirect('/login')\"\n    estaAutenticado()-&gt;&gt;isAdmin() / isRegistrado(): \"Check role\"\n    isAdmin() / isRegistrado()-&gt;&gt;Client Browser: \"redirect('/login')\"\n    isAdmin() / isRegistrado()-&gt;&gt;src/controller.js: \"Execute business logic\"\n    src/controller.js-&gt;&gt;config/db.js: \"db.query()\"\n    config/db.js-&gt;&gt;src/controller.js: \"Return results\"\n    src/controller.js-&gt;&gt;Client Browser: \"res.redirect()\"\n    src/controller.js-&gt;&gt;views/*.ejs: \"res.render()\"\n    views/*.ejs-&gt;&gt;Client Browser: \"HTML Response\"\n  end</code></pre> <p>Middleware Functions:</p> <ol> <li><code>estaAutenticado(req, res, next)</code> routes/courses.js L8-L14  - Verifies <code>req.session.loggedin</code> is <code>true</code></li> <li><code>isAdmin(req, res, next)</code> routes/courses.js L16-L24  - Checks <code>req.session.rol === 'admin'</code></li> <li><code>isRegistrado(req, res, next)</code> routes/courses.js L26-L33  - Checks <code>req.session.rol === 'registrado'</code></li> </ol> <p>All middleware functions redirect to <code>/login</code> on authorization failure.</p> <p>Sources: app.js L4-L13</p> <p>app.js L24-L31</p> <p>routes/courses.js L8-L33</p>"},{"location":"Overview/#database-schema","title":"Database Schema","text":"<p>The MySQL database consists of three tables implementing a many-to-many relationship between users and courses:</p> <pre><code>#mermaid-5akmlkvl2ub{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-5akmlkvl2ub .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-5akmlkvl2ub .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-5akmlkvl2ub .error-icon{fill:#dddddd;}#mermaid-5akmlkvl2ub .error-text{fill:#222222;stroke:#222222;}#mermaid-5akmlkvl2ub .edge-thickness-normal{stroke-width:1px;}#mermaid-5akmlkvl2ub .edge-thickness-thick{stroke-width:3.5px;}#mermaid-5akmlkvl2ub .edge-pattern-solid{stroke-dasharray:0;}#mermaid-5akmlkvl2ub .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-5akmlkvl2ub .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-5akmlkvl2ub .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-5akmlkvl2ub .marker{fill:#999;stroke:#999;}#mermaid-5akmlkvl2ub .marker.cross{stroke:#999;}#mermaid-5akmlkvl2ub svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-5akmlkvl2ub p{margin:0;}#mermaid-5akmlkvl2ub .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-5akmlkvl2ub .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-5akmlkvl2ub .relationshipLabelBox rect{opacity:0.5;}#mermaid-5akmlkvl2ub .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-5akmlkvl2ub .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-5akmlkvl2ub .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-5akmlkvl2ub .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-5akmlkvl2ub .node rect,#mermaid-5akmlkvl2ub .node circle,#mermaid-5akmlkvl2ub .node ellipse,#mermaid-5akmlkvl2ub .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-5akmlkvl2ub .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-5akmlkvl2ub .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-5akmlkvl2ub :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}enrollscontainsusuariosintidPKvarcharnombrevarcharemailvarcharpasswordenumrolinscripcionesintid_usuarioFKintid_cursoFKcursosintidPKvarchartitulotextdescripcionvarcharcategoriaenumvisibilidad\n</code></pre> <p>Table Descriptions:</p> Table Purpose Key Fields <code>usuarios</code> Stores user accounts <code>id</code>, <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), <code>rol</code> ('publico', 'registrado', 'admin') <code>cursos</code> Stores course information <code>id</code>, <code>titulo</code>, <code>descripcion</code>, <code>categoria</code>, <code>visibilidad</code> ('publico', 'registrado') <code>inscripciones</code> Junction table for enrollments <code>id_usuario</code> (FK), <code>id_curso</code> (FK) <p>Database Operations:</p> <ul> <li>All queries use parameterized statements for SQL injection prevention</li> <li>Connection pooling managed by config/db.js</li> <li>Example query: routes/courses.js L77  - <code>SELECT * FROM cursos WHERE id = ?</code></li> </ul> <p>Sources: routes/courses.js L77</p> <p>routes/courses.js L91</p> <p>routes/courses.js L109</p> <p>routes/courses.js L121-L137</p> <p>routes/courses.js L155-L160</p> <p>routes/courses.js L176</p>"},{"location":"Overview/#session-and-authentication-model","title":"Session and Authentication Model","text":"<p>The application maintains user state through server-side sessions configured in app.js L6-L13</p> <p>:</p> <p>Session Configuration:</p> <pre><code>session({\n    secret: \"secret\", \n    resave: false, \n    saveUninitialized: false\n})\n</code></pre> <p>Session Variables:</p> <ul> <li><code>req.session.loggedin</code> - Boolean indicating authentication status</li> <li><code>req.session.usuario</code> - User object with <code>id</code>, <code>nombre</code>, <code>email</code></li> <li><code>req.session.rol</code> - String: <code>'publico'</code>, <code>'registrado'</code>, or <code>'admin'</code></li> </ul> <p>These session variables are used throughout the application:</p> <ul> <li>routes/courses.js L9  - Authentication check</li> <li>routes/courses.js L17  - Admin role check</li> <li>routes/courses.js L27  - Registered role check</li> <li>routes/courses.js L36  - Visibility filtering</li> <li>routes/courses.js L119  - User identification for enrollment</li> </ul> <p>Sources: app.js L4-L13</p> <p>routes/courses.js L8-L33</p> <p>routes/courses.js L36</p> <p>routes/courses.js L49-L51</p> <p>routes/courses.js L119</p>"},{"location":"Overview/#application-entry-point","title":"Application Entry Point","text":"<p>The app.js L1-L41</p> <p>file serves as the application entry point and performs the following initialization:</p> <ol> <li>Express Server Setup: app.js L1-L2</li> <li>Environment Configuration: app.js L3  - Loads <code>.env</code> file from <code>./env/.env</code></li> <li>Session Middleware: app.js L4-L13  - Configures express-session</li> <li>Static Assets: app.js L19  - Serves files from <code>/public</code> at <code>/resources</code> path</li> <li>View Engine: app.js L21  - Sets EJS as template engine</li> <li>Body Parsing: app.js L25-L26  - URL-encoded and JSON body parsing</li> <li>Route Mounting: app.js L29-L31  - Mounts three routers: * <code>routes/index.js</code> - Landing page * <code>routes/auth.js</code> - Authentication endpoints * <code>routes/courses.js</code> - Course management and enrollment</li> </ol> <p>Sources: app.js L1-L41</p>"},{"location":"Overview/#key-routes-and-endpoints","title":"Key Routes and Endpoints","text":""},{"location":"Overview/#public-endpoints","title":"Public Endpoints","text":"<ul> <li><code>GET /</code> - Landing page (routes/index.js )</li> <li><code>GET /login</code> - Login form (routes/auth.js )</li> <li><code>GET /register</code> - Registration form (routes/auth.js )</li> <li><code>POST /auth</code> - Process login (routes/auth.js )</li> <li><code>POST /register</code> - Process registration (routes/auth.js )</li> <li><code>GET /courses</code> - Course listing with visibility filtering routes/courses.js L35-L62</li> </ul>"},{"location":"Overview/#protected-endpoints-registered-users","title":"Protected Endpoints (Registered Users)","text":"<ul> <li><code>GET /inscribir/:id</code> - Enrollment confirmation routes/courses.js L106-L114</li> <li><code>POST /inscribir/:id</code> - Process enrollment routes/courses.js L117-L149</li> <li><code>GET /perfil</code> - User profile with enrolled courses routes/courses.js L152-L169</li> </ul>"},{"location":"Overview/#protected-endpoints-administrators","title":"Protected Endpoints (Administrators)","text":"<ul> <li><code>GET /create</code> - Course creation form routes/courses.js L64-L67</li> <li><code>POST /save</code> - Save new course routes/courses.js L70</li> <li><code>GET /edit/:id</code> - Course edit form routes/courses.js L73-L84</li> <li><code>POST /update</code> - Update existing course routes/courses.js L103</li> <li><code>GET /delete/:id</code> - Delete course routes/courses.js L87-L98</li> <li><code>GET /admin/perfil</code> - Admin dashboard routes/courses.js L172-L185</li> </ul> <p>Sources: routes/courses.js L35-L187</p>"},{"location":"Overview/#navigation-to-related-documentation","title":"Navigation to Related Documentation","text":"<p>This overview provides a foundation for understanding the system. For detailed information on specific subsystems:</p> <ul> <li>Getting Started - Installation, dependencies, database setup, and running the application</li> <li>Architecture Overview - Deep dive into system architecture, technology stack, and design patterns</li> <li>Authentication &amp; Authorization - User registration, login flow, password hashing, and role-based access control</li> <li>Course Management System - CRUD operations, visibility control, and enrollment logic</li> <li>Frontend Architecture - EJS templates, partials, styling system, and user interface</li> <li>API Reference - Complete endpoint documentation with request/response specifications</li> <li>Development Guide - Project structure, adding features, and best practices</li> </ul> <p>Sources: app.js L1-L41</p> <p>routes/courses.js L1-L187</p> <p>package.json L1-L26</p>"},{"location":"Profile-Endpoints/","title":"Profile Endpoints","text":"<p>Relevant source files * routes/courses.js * views/adminperfil.ejs * views/perfil.ejs</p>"},{"location":"Profile-Endpoints/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document provides reference documentation for the profile-related HTTP endpoints in the course management system. These endpoints serve role-specific dashboard views: regular users view their enrolled courses, while administrators view system statistics.</p> <p>For authentication and authorization mechanisms, see Authentication &amp; Authorization. For course enrollment functionality, see Enrollment Endpoints. For the general user profile system architecture, see User Profiles.</p>"},{"location":"Profile-Endpoints/#overview","title":"Overview","text":"<p>The system implements two distinct profile endpoints based on user role:</p> Endpoint Role Required Middleware Chain Purpose <code>GET /perfil</code> <code>registrado</code> <code>estaAutenticado</code>, <code>isRegistrado</code> Display enrolled courses for registered users <code>GET /admin/perfil</code> <code>admin</code> <code>estaAutenticado</code>, <code>isAdmin</code> Display system statistics and management links <p>Both endpoints require active session authentication but differ in role-based access control and data presentation.</p> <p>Sources: routes/courses.js L152-L185</p>"},{"location":"Profile-Endpoints/#user-profile-endpoint","title":"User Profile Endpoint","text":""},{"location":"Profile-Endpoints/#route-definition","title":"Route Definition","text":"<pre><code>GET /perfil\n</code></pre> <p>Middleware: <code>estaAutenticado</code></p> <p><code>isRegistrado</code></p> <p>Authentication: Required - session must contain <code>loggedin: true</code> and <code>rol: 'registrado'</code></p> <p>Implementation: routes/courses.js L152-L169</p>"},{"location":"Profile-Endpoints/#request-processing-flow","title":"Request Processing Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant routes/courses.js\n  participant estaAutenticado\n  participant isRegistrado\n  participant MySQL Database\n  participant views/perfil.ejs\n\n  Client-&gt;&gt;routes/courses.js: \"GET /perfil\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check authentication\"\n  loop [\"rol !== 'registrado'\"]\n    estaAutenticado-&gt;&gt;Client: \"Redirect to /login\"\n    estaAutenticado-&gt;&gt;isRegistrado: \"Check role\"\n    isRegistrado-&gt;&gt;Client: \"Redirect to /login\"\n    isRegistrado-&gt;&gt;routes/courses.js: \"Proceed\"\n    routes/courses.js-&gt;&gt;MySQL Database: \"SELECT c.* FROM cursos c JOIN inscripciones i\"\n    MySQL Database-&gt;&gt;routes/courses.js: \"Return enrolled courses\"\n    routes/courses.js-&gt;&gt;views/perfil.ejs: \"Render with courses, usuario, rol, msg\"\n    views/perfil.ejs-&gt;&gt;Client: \"HTML response\"\n  end</code></pre> <p>Sources: routes/courses.js L8-L14</p> <p>routes/courses.js L26-L33</p> <p>routes/courses.js L152-L169</p>"},{"location":"Profile-Endpoints/#database-query","title":"Database Query","text":"<p>The endpoint executes a JOIN query to retrieve all courses the user is enrolled in:</p> <pre><code>SELECT c.* \nFROM cursos c\nJOIN inscripciones i ON c.id = i.id_curso\nWHERE i.id_usuario = ?\n</code></pre> <p>The <code>idUsuario</code> parameter is extracted from <code>req.session.usuario.id</code> at routes/courses.js L154</p> <p>Sources: routes/courses.js L155-L160</p>"},{"location":"Profile-Endpoints/#response-data-structure","title":"Response Data Structure","text":"<p>The endpoint renders the <code>perfil</code> view with the following context object:</p> Property Type Source Description <code>cursos</code> Array Database query results Array of course objects the user is enrolled in <code>usuario</code> Object <code>req.session.usuario</code> Current user object from session <code>rol</code> String <code>req.session.rol</code> User role (always <code>'registrado'</code> for this endpoint) <code>msg</code> String <code>req.query.msg</code> Optional query parameter for flash messages <p>Sources: routes/courses.js L162-L167</p>"},{"location":"Profile-Endpoints/#view-template-structure","title":"View Template Structure","text":"<p>The <code>perfil.ejs</code> template displays:</p> <ul> <li>Greeting message with <code>usuario.nombre</code> views/perfil.ejs L6</li> <li>Table of enrolled courses showing <code>titulo</code>, <code>categoria</code>, <code>descripcion</code> views/perfil.ejs L12-L29</li> <li>Empty state message if <code>cursos.length === 0</code> views/perfil.ejs L9-L10</li> <li>Link to <code>/courses</code> for browsing additional courses views/perfil.ejs L32</li> </ul> <p>Sources: views/perfil.ejs L1-L35</p>"},{"location":"Profile-Endpoints/#authorization-failure","title":"Authorization Failure","text":"<p>If the user is not authenticated or does not have <code>rol === 'registrado'</code>, the middleware chain redirects to <code>/login</code> routes/courses.js L31</p>"},{"location":"Profile-Endpoints/#admin-profile-endpoint","title":"Admin Profile Endpoint","text":""},{"location":"Profile-Endpoints/#route-definition_1","title":"Route Definition","text":"<pre><code>GET /admin/perfil\n</code></pre> <p>Middleware: <code>estaAutenticado</code></p> <p><code>isAdmin</code></p> <p>Authentication: Required - session must contain <code>loggedin: true</code> and <code>rol: 'admin'</code></p> <p>Implementation: routes/courses.js L172-L185</p>"},{"location":"Profile-Endpoints/#request-processing-flow_1","title":"Request Processing Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant routes/courses.js\n  participant estaAutenticado\n  participant isAdmin\n  participant MySQL Database\n  participant views/adminPerfil.ejs\n\n  Client-&gt;&gt;routes/courses.js: \"GET /admin/perfil\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check authentication\"\n  loop [\"rol !== 'admin'\"]\n    estaAutenticado-&gt;&gt;Client: \"Redirect to /login\"\n    estaAutenticado-&gt;&gt;isAdmin: \"Check admin role\"\n    isAdmin-&gt;&gt;Client: \"Redirect to /login\"\n    isAdmin-&gt;&gt;routes/courses.js: \"Proceed\"\n    routes/courses.js-&gt;&gt;MySQL Database: \"SELECT COUNT(*) AS totalCursos FROM cursos\"\n    MySQL Database-&gt;&gt;routes/courses.js: \"Return count\"\n    routes/courses.js-&gt;&gt;views/adminPerfil.ejs: \"Render with usuario, totalCursos\"\n    views/adminPerfil.ejs-&gt;&gt;Client: \"HTML response\"\n  end</code></pre> <p>Sources: routes/courses.js L16-L24</p> <p>routes/courses.js L172-L185</p>"},{"location":"Profile-Endpoints/#database-query_1","title":"Database Query","text":"<p>The endpoint retrieves aggregate statistics from the database:</p> <pre><code>SELECT COUNT(*) AS totalCursos FROM cursos\n</code></pre> <p>This query counts all courses in the system regardless of visibility or enrollment status routes/courses.js L176</p> <p>Sources: routes/courses.js L176</p>"},{"location":"Profile-Endpoints/#error-handling","title":"Error Handling","text":"<p>If the database query fails, the endpoint gracefully degrades by rendering the view with <code>totalCursos: 0</code> routes/courses.js L179</p> <p>Sources: routes/courses.js L177-L180</p>"},{"location":"Profile-Endpoints/#response-data-structure_1","title":"Response Data Structure","text":"<p>The endpoint renders the <code>adminPerfil</code> view with:</p> Property Type Source Description <code>usuario</code> Object <code>req.session.usuario</code> Current admin user object from session <code>totalCursos</code> Number Database aggregation Total count of all courses in system <p>Sources: routes/courses.js L183</p>"},{"location":"Profile-Endpoints/#view-template-structure_1","title":"View Template Structure","text":"<p>The <code>adminPerfil.ejs</code> template displays:</p> <ul> <li>Welcome message with admin designation: <code>\"Bienvenido, &lt;%= usuario.nombre %&gt; (Administrador)\"</code> views/adminperfil.ejs L6</li> <li>System statistics: <code>\"Total de cursos en el sistema: &lt;%= totalCursos %&gt;\"</code> views/adminperfil.ejs L8</li> <li>Navigation links to <code>/courses</code> for course management views/adminperfil.ejs L18</li> <li>Navigation link to <code>/</code> home page views/adminperfil.ejs L19</li> </ul> <p>Sources: views/adminperfil.ejs L1-L29</p>"},{"location":"Profile-Endpoints/#profile-endpoint-access-control","title":"Profile Endpoint Access Control","text":""},{"location":"Profile-Endpoints/#middleware-implementation","title":"Middleware Implementation","text":"<p>Both profile endpoints share the <code>estaAutenticado</code> middleware but diverge at role-checking:</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nAuth[\"estaAutenticado&lt;br&gt;(routes/courses.js:8-14)\"]\nRoleCheck[\"Role?\"]\nRegCheck[\"isRegistrado&lt;br&gt;(routes/courses.js:26-33)\"]\nAdminCheck[\"isAdmin&lt;br&gt;(routes/courses.js:16-24)\"]\nRegHandler[\"GET /perfil handler&lt;br&gt;(routes/courses.js:152-169)\"]\nAdminHandler[\"GET /admin/perfil handler&lt;br&gt;(routes/courses.js:172-185)\"]\nLoginRedirect[\"/login redirect\"]\n\nRequest --&gt; Auth\nAuth --&gt; LoginRedirect\nAuth --&gt; RoleCheck\nRoleCheck --&gt; RegCheck\nRoleCheck --&gt; AdminCheck\nRegCheck --&gt; RegHandler\nRegCheck --&gt; LoginRedirect\nAdminCheck --&gt; AdminHandler\nAdminCheck --&gt; LoginRedirect</code></pre> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L152-L185</p>"},{"location":"Profile-Endpoints/#session-requirements","title":"Session Requirements","text":"<p>Both endpoints require specific session properties:</p> Session Property Required Value Checked By Location <code>req.session.loggedin</code> <code>true</code> <code>estaAutenticado</code> routes/courses.js L9 <code>req.session.rol</code> <code>'registrado'</code> or <code>'admin'</code> <code>isRegistrado</code> / <code>isAdmin</code> routes/courses.js L17 routes/courses.js L27 <code>req.session.usuario</code> User object Handler functions routes/courses.js L154 routes/courses.js L173 <code>req.session.usuario.id</code> User ID <code>/perfil</code> handler only routes/courses.js L154 <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L152-L185</p>"},{"location":"Profile-Endpoints/#data-flow-comparison","title":"Data Flow Comparison","text":""},{"location":"Profile-Endpoints/#user-profile-data-flow","title":"User Profile Data Flow","text":"<pre><code>flowchart TD\n\nSession[\"req.session.usuario.id\"]\nQuery[\"JOIN query on inscripciones\"]\nCourses[\"Array of enrolled courses\"]\nView[\"perfil.ejs template\"]\nResponse[\"HTML: course table\"]\n\nSession --&gt; Query\nQuery --&gt; Courses\nCourses --&gt; View\nView --&gt; Response</code></pre> <p>Sources: routes/courses.js L154-L168</p>"},{"location":"Profile-Endpoints/#admin-profile-data-flow","title":"Admin Profile Data Flow","text":"<pre><code>flowchart TD\n\nSession[\"req.session.usuario\"]\nQuery[\"COUNT query on cursos\"]\nStats[\"totalCursos number\"]\nView[\"adminPerfil.ejs template\"]\nResponse[\"HTML: dashboard stats\"]\n\nSession --&gt; View\nQuery --&gt; Stats\nStats --&gt; View\nView --&gt; Response</code></pre> <p>Sources: routes/courses.js L173-L184</p>"},{"location":"Profile-Endpoints/#query-parameter-support","title":"Query Parameter Support","text":"<p>The <code>/perfil</code> endpoint supports an optional <code>msg</code> query parameter for displaying flash messages routes/courses.js L166</p> <p>This parameter is commonly used after enrollment operations to provide user feedback.</p> <p>Example: <code>GET /perfil?msg=enrolled</code></p> <p>The <code>/admin/perfil</code> endpoint does not accept query parameters.</p> <p>Sources: routes/courses.js L166</p>"},{"location":"Project-Structure/","title":"Project Structure","text":"<p>Relevant source files * app.js * config/db.js * routes/index.js * src/controller.js</p>"},{"location":"Project-Structure/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the physical organization of the codebase, explaining the purpose of each directory and how files are organized within the system. It maps the folder structure to the architectural layers and explains the conventions used for organizing routes, controllers, views, and configuration files.</p> <p>For information about the overall architecture and how these components interact, see Architecture Overview. For guidance on adding new functionality to the codebase, see Adding New Routes.</p>"},{"location":"Project-Structure/#directory-structure-overview","title":"Directory Structure Overview","text":"<p>The project follows a modular organization pattern that separates concerns by file type and responsibility. The structure promotes maintainability by grouping related files together and establishing clear boundaries between presentation, application logic, and configuration.</p>"},{"location":"Project-Structure/#high-level-directory-layout","title":"High-Level Directory Layout","text":"<pre><code>flowchart TD\n\nRoot[\"/ (Project Root)\"]\nAppJS[\"app.js\"]\nPackageJSON[\"package.json\"]\nEnvDir[\"env/\"]\nRoutesDir[\"routes/\"]\nViewsDir[\"views/\"]\nPublicDir[\"public/\"]\nSrcDir[\"src/\"]\nConfigDir[\"config/\"]\nIndexRoute[\"index.js\"]\nAuthRoute[\"auth.js\"]\nCoursesRoute[\"courses.js\"]\nController[\"controller.js\"]\nCursoController[\"cursoController.js\"]\nDBConfig[\"db.js\"]\nPartialsDir[\"partials/\"]\nEJSFiles[\"*.ejs\"]\nCSSDir[\"css/\"]\nResourcesDir[\"resources/\"]\nEnvFile[\".env\"]\n\nRoot --&gt; AppJS\nRoot --&gt; PackageJSON\nRoot --&gt; EnvDir\nRoot --&gt; RoutesDir\nRoot --&gt; ViewsDir\nRoot --&gt; PublicDir\nRoot --&gt; SrcDir\nRoot --&gt; ConfigDir\nRoutesDir --&gt; IndexRoute\nRoutesDir --&gt; AuthRoute\nRoutesDir --&gt; CoursesRoute\nSrcDir --&gt; Controller\nSrcDir --&gt; CursoController\nConfigDir --&gt; DBConfig\nViewsDir --&gt; PartialsDir\nViewsDir --&gt; EJSFiles\nPublicDir --&gt; CSSDir\nPublicDir --&gt; ResourcesDir\nEnvDir --&gt; EnvFile</code></pre> <p>Directory Mapping to Architectural Layers:</p> Directory Architectural Layer Purpose <code>routes/</code> Application Layer HTTP endpoint definitions and request routing <code>src/</code> Application Layer Business logic controllers and data manipulation <code>config/</code> Data Layer Database connection and configuration management <code>views/</code> Presentation Layer EJS templates for HTML rendering <code>public/</code> Presentation Layer Static assets (CSS, images, client-side resources) <code>env/</code> Configuration Environment variables and secrets <p>Sources: app.js L1-L41</p> <p>High-Level System Architecture Diagram</p>"},{"location":"Project-Structure/#root-directory-files","title":"Root Directory Files","text":""},{"location":"Project-Structure/#appjs-application-entry-point","title":"app.js - Application Entry Point","text":"<p>The <code>app.js</code> file serves as the main application entry point and orchestrates the entire Express application.</p> <p>Key Responsibilities:</p> <ul> <li>Express application initialization (app.js L1-L2 )</li> <li>Environment configuration loading (app.js L3 )</li> <li>Session middleware setup (app.js L6-L13 )</li> <li>Static file serving configuration (app.js L19 )</li> <li>View engine configuration (app.js L21 )</li> <li>Body parsing middleware (app.js L25-L26 )</li> <li>Route mounting (app.js L29-L31 )</li> </ul> <pre><code>flowchart TD\n\nRequireExpress[\"require('express')\"]\nCreateApp[\"express()\"]\nLoadDotEnv[\"dotenv.config()\"]\nConfigSession[\"session middleware&lt;br&gt;app.use(session())\"]\nConfigStatic[\"static files&lt;br&gt;app.use('/resources')\"]\nConfigEJS[\"view engine&lt;br&gt;app.set('view engine')\"]\nConfigParsers[\"body parsers&lt;br&gt;urlencoded + json\"]\nMountIndex[\"app.use('/', index)\"]\nMountAuth[\"app.use('/', auth)\"]\nMountCourses[\"app.use('/', courses)\"]\n\nsubgraph subGraph0 [\"app.js Initialization Flow\"]\n    RequireExpress\n    CreateApp\n    LoadDotEnv\n    ConfigSession\n    ConfigStatic\n    ConfigEJS\n    ConfigParsers\n    MountIndex\n    MountAuth\n    MountCourses\n    RequireExpress --&gt; CreateApp\n    LoadDotEnv --&gt; ConfigSession\n    ConfigSession --&gt; ConfigStatic\n    ConfigStatic --&gt; ConfigEJS\n    ConfigEJS --&gt; ConfigParsers\n    ConfigParsers --&gt; MountIndex\n    MountIndex --&gt; MountAuth\n    MountAuth --&gt; MountCourses\nend</code></pre> <p>Sources: app.js L1-L41</p>"},{"location":"Project-Structure/#packagejson-dependency-manifest","title":"package.json - Dependency Manifest","text":"<p>The <code>package.json</code> file defines all npm dependencies and project metadata. Key dependencies include:</p> Dependency Version Purpose <code>express</code> 5.1.0 Web application framework <code>ejs</code> 3.1.10 Template engine for views <code>mysql2</code> 3.14.3 MySQL database driver <code>bcryptjs</code> 3.0.2 Password hashing <code>jsonwebtoken</code> 9.0.2 JWT token generation <code>express-session</code> 1.18.2 Session management <code>express-validator</code> 7.2.1 Input validation <code>dotenv</code> 17.2.1 Environment variable loading <p>Sources: Module Dependency &amp; Technology Stack Diagram</p>"},{"location":"Project-Structure/#routes-directory-routes","title":"Routes Directory (routes/)","text":"<p>The <code>routes/</code> directory contains modular route handlers that define HTTP endpoints and delegate business logic to controllers. Each file represents a logical grouping of related endpoints.</p>"},{"location":"Project-Structure/#route-organization-pattern","title":"Route Organization Pattern","text":"<pre><code>flowchart TD\n\nIndexJS[\"index.js&lt;br&gt;Landing page routes\"]\nAuthJS[\"auth.js&lt;br&gt;Authentication routes\"]\nCoursesJS[\"courses.js&lt;br&gt;Course management routes\"]\nGET_Root[\"GET /&lt;br&gt;Landing page\"]\nGET_Login[\"GET /login&lt;br&gt;Login form\"]\nPOST_Auth[\"POST /auth&lt;br&gt;Authenticate\"]\nGET_Register[\"GET /register&lt;br&gt;Register form\"]\nPOST_Register[\"POST /register&lt;br&gt;Create account\"]\nPOST_Logout[\"POST /logout&lt;br&gt;Destroy session\"]\nGET_Courses[\"GET /courses&lt;br&gt;Course listing\"]\nGET_Create[\"GET /create&lt;br&gt;Course form\"]\nPOST_Save[\"POST /save&lt;br&gt;Create course\"]\nGET_Edit[\"GET /edit/:id&lt;br&gt;Edit form\"]\nPOST_Update[\"POST /update&lt;br&gt;Update course\"]\nGET_Delete[\"GET /delete/:id&lt;br&gt;Delete course\"]\nGET_Inscribir[\"GET /inscribir/:id&lt;br&gt;Enrollment confirm\"]\nPOST_Inscribir[\"POST /inscribir/:id&lt;br&gt;Process enrollment\"]\nGET_Perfil[\"GET /perfil&lt;br&gt;User profile\"]\nGET_AdminPerfil[\"GET /admin/perfil&lt;br&gt;Admin dashboard\"]\n\nIndexJS --&gt; GET_Root\nAuthJS --&gt; GET_Login\nAuthJS --&gt; POST_Auth\nAuthJS --&gt; GET_Register\nAuthJS --&gt; POST_Register\nAuthJS --&gt; POST_Logout\nCoursesJS --&gt; GET_Courses\nCoursesJS --&gt; GET_Create\nCoursesJS --&gt; POST_Save\nCoursesJS --&gt; GET_Edit\nCoursesJS --&gt; POST_Update\nCoursesJS --&gt; GET_Delete\nCoursesJS --&gt; GET_Inscribir\nCoursesJS --&gt; POST_Inscribir\nCoursesJS --&gt; GET_Perfil\nCoursesJS --&gt; GET_AdminPerfil\n\nsubgraph subGraph1 [\"Mounted Routes\"]\n    GET_Root\n    GET_Login\n    POST_Auth\n    GET_Register\n    POST_Register\n    POST_Logout\n    GET_Courses\n    GET_Create\n    POST_Save\n    GET_Edit\n    POST_Update\n    GET_Delete\n    GET_Inscribir\n    POST_Inscribir\n    GET_Perfil\n    GET_AdminPerfil\nend\n\nsubgraph subGraph0 [\"routes/ Directory Structure\"]\n    IndexJS\n    AuthJS\n    CoursesJS\nend</code></pre>"},{"location":"Project-Structure/#indexjs-landing-page-routes","title":"index.js - Landing Page Routes","text":"<p>File Purpose: Handles the root endpoint and renders the landing page with dynamic content based on session state.</p> <p>Key Features:</p> <ul> <li>Session-aware rendering (routes/index.js L7 )</li> <li>Dynamic user greeting (routes/index.js L13 )</li> <li>Login status tracking (routes/index.js L12 )</li> </ul> <p>Sources: routes/index.js L1-L18</p>"},{"location":"Project-Structure/#authjs-authentication-routes","title":"auth.js - Authentication Routes","text":"<p>File Purpose: Manages user registration, login, and logout functionality.</p> <p>Typical Route Structure:</p> <ul> <li>Form display routes (GET)</li> <li>Form submission routes (POST)</li> <li>Input validation middleware</li> <li>Password hashing integration</li> <li>Session creation/destruction</li> </ul> <p>Sources: Authentication &amp; Authorization System Diagram, Architecture Overview</p>"},{"location":"Project-Structure/#coursesjs-course-management-routes","title":"courses.js - Course Management Routes","text":"<p>File Purpose: Handles all course-related operations including CRUD operations, enrollment, and profile views.</p> <p>Route Categories:</p> <ul> <li>Public routes: Course listing</li> <li>Admin-only routes: Create, edit, update, delete courses</li> <li>Registered user routes: Enrollment, user profile</li> <li>Admin dashboard routes: Admin profile, statistics</li> </ul> <p>Sources: HTTP Request Flow &amp; Routing Architecture Diagram</p>"},{"location":"Project-Structure/#controllers-directory-src","title":"Controllers Directory (src/)","text":"<p>The <code>src/</code> directory contains controller modules that implement business logic for data manipulation and database operations. Controllers are invoked by route handlers to process requests.</p>"},{"location":"Project-Structure/#controller-organization","title":"Controller Organization","text":"<pre><code>flowchart TD\n\nControllerJS[\"controller.js&lt;br&gt;Course CRUD operations\"]\nCursoControllerJS[\"cursoController.js&lt;br&gt;Enrollment logic\"]\nSaveFunc[\"exports.save&lt;br&gt;INSERT course\"]\nUpdateFunc[\"exports.update&lt;br&gt;UPDATE course\"]\nEnrollFunc[\"exports.inscribir&lt;br&gt;INSERT enrollment\"]\nDBInsert[\"db.query('INSERT INTO cursos')\"]\nDBUpdate[\"db.query('UPDATE cursos')\"]\nDBEnroll[\"db.query('INSERT INTO inscripciones')\"]\n\nControllerJS --&gt; SaveFunc\nControllerJS --&gt; UpdateFunc\nCursoControllerJS --&gt; EnrollFunc\nSaveFunc --&gt; DBInsert\nUpdateFunc --&gt; DBUpdate\nEnrollFunc --&gt; DBEnroll\n\nsubgraph subGraph2 [\"Database Operations\"]\n    DBInsert\n    DBUpdate\n    DBEnroll\nend\n\nsubgraph subGraph1 [\"Exported Functions\"]\n    SaveFunc\n    UpdateFunc\n    EnrollFunc\nend\n\nsubgraph subGraph0 [\"src/ Directory\"]\n    ControllerJS\n    CursoControllerJS\nend</code></pre>"},{"location":"Project-Structure/#controllerjs-course-crud-controller","title":"controller.js - Course CRUD Controller","text":"<p>File Purpose: Implements create and update operations for courses.</p> <p>Exported Functions:</p> Function Purpose Database Operation <code>exports.save</code> Create new course <code>INSERT INTO cursos</code> (src/controller.js L9-L10  ) <code>exports.update</code> Modify existing course <code>UPDATE cursos SET ? WHERE id = ?</code> (src/controller.js L36  ) <p>Pattern Used:</p> <ol> <li>Extract request body parameters (src/controller.js L5-L7 )</li> <li>Execute parameterized database query</li> <li>Handle errors and redirect (src/controller.js L17-L23 )</li> </ol> <p>Sources: src/controller.js L1-L53</p>"},{"location":"Project-Structure/#cursocontrollerjs-enrollment-controller","title":"cursoController.js - Enrollment Controller","text":"<p>File Purpose: Manages course enrollment operations including duplicate prevention and database transactions.</p> <p>Key Functionality:</p> <ul> <li>Enrollment validation</li> <li>Duplicate enrollment checking</li> <li>Junction table insertion (<code>inscripciones</code>)</li> </ul> <p>Sources: Data Architecture &amp; Entity Relationships Diagram</p>"},{"location":"Project-Structure/#configuration-directory-config","title":"Configuration Directory (config/)","text":"<p>The <code>config/</code> directory contains configuration modules that set up external service connections and system-wide settings.</p>"},{"location":"Project-Structure/#dbjs-database-connection-module","title":"db.js - Database Connection Module","text":"<p>File Purpose: Establishes and exports a single MySQL database connection that is shared across the application.</p> <pre><code>flowchart TD\n\nRequireMySQL[\"require('mysql2')\"]\nCreateConnection[\"mysql.createConnection()\"]\nEnvVars[\"Environment Variables&lt;br&gt;DB_HOST, DB_USER&lt;br&gt;DB_PASS, DB_NAME\"]\nConnectDB[\"conexion.connect()\"]\nExportConnection[\"module.exports = conexion\"]\nRoutes[\"routes/auth.js&lt;br&gt;routes/courses.js\"]\nControllers[\"src/controller.js&lt;br&gt;src/cursoController.js\"]\n\nExportConnection --&gt; Routes\nExportConnection --&gt; Controllers\n\nsubgraph subGraph1 [\"Used By\"]\n    Routes\n    Controllers\nend\n\nsubgraph subGraph0 [\"config/db.js Module\"]\n    RequireMySQL\n    CreateConnection\n    EnvVars\n    ConnectDB\n    ExportConnection\n    RequireMySQL --&gt; CreateConnection\n    EnvVars --&gt; CreateConnection\n    CreateConnection --&gt; ConnectDB\n    ConnectDB --&gt; ExportConnection\nend</code></pre> <p>Configuration Pattern:</p> <ul> <li>Connection parameters sourced from environment variables (config/db.js L4-L7 )</li> <li>Singleton connection instance (config/db.js L3 )</li> <li>Connection test on initialization (config/db.js L11-L17 )</li> <li>Exported for use across application (config/db.js L19 )</li> </ul> <p>Database Configuration:</p> Parameter Environment Variable Purpose <code>host</code> <code>process.env.DB_HOST</code> MySQL server hostname <code>user</code> <code>process.env.DB_USER</code> Database username <code>password</code> <code>process.env.DB_PASS</code> Database password <code>database</code> <code>process.env.DB_NAME</code> Database name <p>Sources: config/db.js L1-L20</p>"},{"location":"Project-Structure/#views-directory-views","title":"Views Directory (views/)","text":"<p>The <code>views/</code> directory contains EJS template files that generate HTML responses. Templates use embedded JavaScript to render dynamic content based on data passed from route handlers.</p>"},{"location":"Project-Structure/#view-organization-structure","title":"View Organization Structure","text":"<pre><code>flowchart TD\n\nIndexEJS[\"index.ejs&lt;br&gt;Landing page\"]\nPartialsDir[\"partials/\"]\nHeadPartial[\"head.ejs&lt;br&gt;HTML head + meta tags\"]\nHeaderPartial[\"header.ejs&lt;br&gt;Navigation bar\"]\nLoginEJS[\"login.ejs&lt;br&gt;Login form\"]\nCoursesEJS[\"courses.ejs&lt;br&gt;Course listing\"]\nRegisterEJS[\"register.ejs&lt;br&gt;Registration form\"]\nCreateEJS[\"create.ejs&lt;br&gt;Course creation form\"]\nEditEJS[\"edit.ejs&lt;br&gt;Course edit form\"]\nInscribirEJS[\"inscribir.ejs&lt;br&gt;Enrollment confirmation\"]\nPerfilEJS[\"perfil.ejs&lt;br&gt;User profile\"]\nAdminPerfilEJS[\"adminPerfil.ejs&lt;br&gt;Admin dashboard\"]\n\nsubgraph subGraph0 [\"views/ Directory\"]\n    IndexEJS\n    PartialsDir\n    HeadPartial\n    HeaderPartial\n    LoginEJS\n    CoursesEJS\n    RegisterEJS\n    CreateEJS\n    EditEJS\n    InscribirEJS\n    PerfilEJS\n    AdminPerfilEJS\n    PartialsDir --&gt; HeadPartial\n    PartialsDir --&gt; HeaderPartial\n    IndexEJS --&gt; HeadPartial\n    IndexEJS --&gt; HeaderPartial\n    LoginEJS --&gt; HeadPartial\n    LoginEJS --&gt; HeaderPartial\n    CoursesEJS --&gt; HeadPartial\n    CoursesEJS --&gt; HeaderPartial\nend</code></pre>"},{"location":"Project-Structure/#template-categories","title":"Template Categories","text":"Template Type Files Purpose Landing <code>index.ejs</code> Home page with conditional content Authentication <code>login.ejs</code>, <code>register.ejs</code> User authentication forms Course Management <code>courses.ejs</code>, <code>create.ejs</code>, <code>edit.ejs</code> Course CRUD interfaces Enrollment <code>inscribir.ejs</code> Two-step enrollment confirmation Profiles <code>perfil.ejs</code>, <code>adminPerfil.ejs</code> User and admin dashboards Shared Partials <code>partials/head.ejs</code>, <code>partials/header.ejs</code> Reusable template fragments <p>Rendering Pattern: Route handlers call <code>res.render()</code> with template name and data object:</p> <pre><code>res.render(\"index\", {\n    nombre: \"THOT\",\n    login: req.session.loggedin || false,\n    name: usuario ? usuario.nombre : \"Invitado\"\n});\n</code></pre> <p>Sources: routes/index.js L9-L14</p> <p>Frontend Architecture Diagram</p>"},{"location":"Project-Structure/#public-directory-public","title":"Public Directory (public/)","text":"<p>The <code>public/</code> directory contains static assets served directly to clients without processing. The directory is mounted at the <code>/resources</code> URL path (app.js L19</p> <p>).</p>"},{"location":"Project-Structure/#static-asset-organization","title":"Static Asset Organization","text":"<pre><code>flowchart TD\n\nCSSDir[\"css/\"]\nStyleCSS[\"style.css&lt;br&gt;Global styles\"]\nLoginCSS[\"login.css&lt;br&gt;Login page styles\"]\nRegisterCSS[\"register.css&lt;br&gt;Registration styles\"]\nCoursesCSS[\"courses.css&lt;br&gt;Course listing styles\"]\nCreateCSS[\"create.css&lt;br&gt;Course form styles\"]\nEditCSS[\"edit.css&lt;br&gt;Edit form styles\"]\nInscribirCSS[\"inscribir.css&lt;br&gt;Enrollment styles\"]\nPerfilCSS[\"perfil.css&lt;br&gt;Profile styles\"]\nAdminPerfilCSS[\"adminPerfil.css&lt;br&gt;Admin dashboard styles\"]\nResourcesDir[\"resources/\"]\nImages[\"images/&lt;br&gt;Static images\"]\nIcons[\"icons/&lt;br&gt;Icon assets\"]\n\nsubgraph subGraph0 [\"public/ Directory Structure\"]\n    CSSDir\n    StyleCSS\n    LoginCSS\n    RegisterCSS\n    CoursesCSS\n    CreateCSS\n    EditCSS\n    InscribirCSS\n    PerfilCSS\n    AdminPerfilCSS\n    ResourcesDir\n    Images\n    Icons\n    CSSDir --&gt; StyleCSS\n    CSSDir --&gt; LoginCSS\n    CSSDir --&gt; RegisterCSS\n    CSSDir --&gt; CoursesCSS\n    CSSDir --&gt; CreateCSS\n    CSSDir --&gt; EditCSS\n    CSSDir --&gt; InscribirCSS\n    CSSDir --&gt; PerfilCSS\n    CSSDir --&gt; AdminPerfilCSS\n    ResourcesDir --&gt; Images\n    ResourcesDir --&gt; Icons\nend</code></pre>"},{"location":"Project-Structure/#static-file-serving-configuration","title":"Static File Serving Configuration","text":"<p>URL Mapping:</p> <ul> <li>File path: <code>public/css/style.css</code></li> <li>Served at: <code>/resources/css/style.css</code></li> <li>Configuration: app.js L19</li> </ul> <p>Asset Categories:</p> Directory Content Type Examples <code>css/</code> Stylesheets Page-specific CSS, global styles <code>resources/</code> Media files Images, icons, fonts <p>Styling Strategy: Each major view has a dedicated stylesheet that imports or extends global styles, providing page-specific visual customization while maintaining consistency.</p> <p>Sources: app.js L19</p> <p>Styling System Section</p>"},{"location":"Project-Structure/#environment-configuration-env","title":"Environment Configuration (env/)","text":"<p>The <code>env/</code> directory contains environment-specific configuration files that store sensitive credentials and deployment-specific settings.</p>"},{"location":"Project-Structure/#env-file-structure","title":".env File Structure","text":"<p>File Path: <code>env/.env</code> Loading: app.js L3</p> <p>Required Variables:</p> Variable Purpose Used By <code>DB_HOST</code> MySQL server address config/db.js L4 <code>DB_USER</code> Database username config/db.js L5 <code>DB_PASS</code> Database password config/db.js L6 <code>DB_NAME</code> Database name config/db.js L7 <p>Security Note: This file should never be committed to version control. It contains sensitive credentials that must be kept secret.</p> <p>Sources: app.js L3</p> <p>config/db.js L4-L7</p>"},{"location":"Project-Structure/#file-organization-patterns","title":"File Organization Patterns","text":""},{"location":"Project-Structure/#naming-conventions","title":"Naming Conventions","text":"<p>Route Files:</p> <ul> <li>Named after the resource or feature area (e.g., <code>auth.js</code>, <code>courses.js</code>)</li> <li>Use lowercase</li> <li>Export an Express Router instance</li> </ul> <p>Controller Files:</p> <ul> <li>Suffixed with <code>Controller.js</code> (e.g., <code>cursoController.js</code>) or just descriptive (e.g., <code>controller.js</code>)</li> <li>Export functions as properties of <code>exports</code> object</li> <li>Functions named after their operations (e.g., <code>save</code>, <code>update</code>, <code>inscribir</code>)</li> </ul> <p>View Files:</p> <ul> <li>Named after the page or action (e.g., <code>login.ejs</code>, <code>create.ejs</code>)</li> <li>Use camelCase for multi-word names</li> <li>Match the template name used in <code>res.render()</code> calls</li> </ul> <p>CSS Files:</p> <ul> <li>Named to match their corresponding view (e.g., <code>login.css</code> for <code>login.ejs</code>)</li> <li>Global styles in <code>style.css</code></li> </ul>"},{"location":"Project-Structure/#module-import-pattern","title":"Module Import Pattern","text":"<p>The codebase uses CommonJS module syntax:</p> <pre><code>// Importing modules\nconst express = require('express');\nconst db = require(\"../config/db\");\n\n// Exporting modules\nmodule.exports = router;        // Single export\nexports.save = (req, res) =&gt; {}; // Multiple exports\n</code></pre> <p>Sources: app.js L1-L2</p> <p>routes/index.js L2-L4</p> <p>config/db.js L1</p> <p>src/controller.js L1</p>"},{"location":"Project-Structure/#dependency-flow-between-directories","title":"Dependency Flow Between Directories","text":"<pre><code>flowchart TD\n\nAppJS[\"app.js\"]\nIndexRoute[\"routes/index.js\"]\nAuthRoute[\"routes/auth.js\"]\nCoursesRoute[\"routes/courses.js\"]\nController[\"src/controller.js\"]\nCursoController[\"src/cursoController.js\"]\nDBConfig[\"config/db.js\"]\nEnvConfig[\"env/.env\"]\nViews[\"views/*.ejs\"]\nCSS[\"public/css/*.css\"]\n\nAppJS --&gt; IndexRoute\nAppJS --&gt; AuthRoute\nAppJS --&gt; CoursesRoute\nAppJS --&gt; DBConfig\nAppJS --&gt; EnvConfig\nIndexRoute --&gt; DBConfig\nAuthRoute --&gt; DBConfig\nCoursesRoute --&gt; DBConfig\nCoursesRoute --&gt; Controller\nCoursesRoute --&gt; CursoController\nController --&gt; DBConfig\nCursoController --&gt; DBConfig\nIndexRoute --&gt; Views\nAuthRoute --&gt; Views\nCoursesRoute --&gt; Views\n\nsubgraph subGraph4 [\"Presentation Layer\"]\n    Views\n    CSS\n    Views --&gt; CSS\nend\n\nsubgraph subGraph3 [\"Configuration Layer\"]\n    DBConfig\n    EnvConfig\n    DBConfig --&gt; EnvConfig\nend\n\nsubgraph subGraph2 [\"Controllers Layer\"]\n    Controller\n    CursoController\nend\n\nsubgraph subGraph1 [\"Routes Layer\"]\n    IndexRoute\n    AuthRoute\n    CoursesRoute\nend\n\nsubgraph subGraph0 [\"Application Entry\"]\n    AppJS\nend</code></pre> <p>Import Hierarchy:</p> <ol> <li>Top Level: <code>app.js</code> loads environment config and mounts routes</li> <li>Route Level: Routes require database config and controllers</li> <li>Controller Level: Controllers require database config</li> <li>Data Level: Database config reads environment variables</li> </ol> <p>Key Principle: Each layer only imports from its own level or lower layers, maintaining unidirectional dependency flow.</p> <p>Sources: app.js L1-L31</p> <p>routes/index.js L2-L4</p> <p>src/controller.js L1</p> <p>config/db.js L1-L3</p>"},{"location":"Project-Structure/#summary","title":"Summary","text":"<p>The project structure follows a layered architecture with clear separation of concerns:</p> <ul> <li>Root files (<code>app.js</code>, <code>package.json</code>) orchestrate the application</li> <li><code>routes/</code> defines HTTP endpoints and request handling</li> <li><code>src/</code> implements business logic and data manipulation</li> <li><code>config/</code> manages external service connections</li> <li><code>views/</code> contains presentation templates</li> <li><code>public/</code> serves static client-side assets</li> <li><code>env/</code> stores environment-specific configuration</li> </ul> <p>This organization promotes maintainability by grouping related functionality, enforces architectural boundaries through directory structure, and makes the codebase navigable by establishing consistent naming and organization conventions.</p> <p>For details on how to extend this structure with new features, see Adding New Routes. For information about the database schema accessed by these modules, see Database Architecture.</p>"},{"location":"Role-Based-Access-Control/","title":"Role-Based Access Control","text":"<p>Relevant source files * routes/auth.js * routes/courses.js</p>"},{"location":"Role-Based-Access-Control/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the role-based access control (RBAC) system that governs user permissions throughout the application. The system defines three distinct user roles and implements middleware functions that restrict access to routes based on authentication status and assigned roles. This page focuses on the middleware implementation and role enforcement mechanisms. For information about the login and authentication process, see User Login. For session storage details, see Session Management.</p>"},{"location":"Role-Based-Access-Control/#the-three-user-roles","title":"The Three User Roles","text":"<p>The application defines three user roles with escalating privileges:</p> Role Database Value Description Assignment Method Public <code>'publico'</code> Unauthenticated visitors Default for non-logged-in users Registered <code>'registrado'</code> Authenticated regular users Default role during registration Administrator <code>'admin'</code> Authenticated administrators Manual assignment in database or during registration <p>The role is stored in the <code>usuarios</code> table as an enum field and is loaded into the session upon successful authentication routes/auth.js L100-L104</p> <p>Sources: routes/auth.js, routes/courses.js</p>"},{"location":"Role-Based-Access-Control/#authentication-middleware-functions","title":"Authentication Middleware Functions","text":"<p>The system implements three middleware functions in <code>routes/courses.js</code> that enforce access control at the route level:</p>"},{"location":"Role-Based-Access-Control/#estaautenticado-middleware","title":"estaAutenticado Middleware","text":"<pre><code>function estaAutenticado(req, res, next)\n</code></pre> <p>This middleware verifies that a user is logged in by checking for an active session. It serves as the base authentication check for all protected routes.</p> <p>Implementation: routes/courses.js L8-L14</p> <p>Logic:</p> <ul> <li>Checks if <code>req.session.loggedin</code> is truthy</li> <li>If authenticated, calls <code>next()</code> to proceed to the next middleware or route handler</li> <li>If not authenticated, redirects to <code>/login</code></li> </ul> <p>Usage: Applied to all routes that require any level of authentication, including both registered user and admin routes.</p>"},{"location":"Role-Based-Access-Control/#isadmin-middleware","title":"isAdmin Middleware","text":"<pre><code>function isAdmin(req, res, next)\n</code></pre> <p>This middleware enforces administrator-only access by verifying both authentication status and role.</p> <p>Implementation: routes/courses.js L16-L24</p> <p>Logic:</p> <ul> <li>Checks if <code>req.session.loggedin</code> is truthy AND <code>req.session.rol === 'admin'</code></li> <li>If both conditions are met, calls <code>next()</code></li> <li>If either condition fails, redirects to <code>/login</code></li> </ul> <p>Usage: Applied to all course management CRUD operations (create, edit, update, delete) and the admin profile route.</p>"},{"location":"Role-Based-Access-Control/#isregistrado-middleware","title":"isRegistrado Middleware","text":"<pre><code>function isRegistrado(req, res, next)\n</code></pre> <p>This middleware restricts access to registered users, excluding administrators from routes meant specifically for regular users.</p> <p>Implementation: routes/courses.js L26-L33</p> <p>Logic:</p> <ul> <li>Checks if <code>req.session.loggedin</code> is truthy AND <code>req.session.rol === 'registrado'</code></li> <li>If both conditions are met, calls <code>next()</code></li> <li>If either condition fails, redirects to <code>/login</code></li> </ul> <p>Usage: Applied to enrollment routes and the regular user profile page.</p> <p>Sources: routes/courses.js:8-33</p>"},{"location":"Role-Based-Access-Control/#middleware-chain-diagram","title":"Middleware Chain Diagram","text":"<p>Diagram: Authentication Middleware Flow</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nRouteHandler[\"Route Handler\"]\nCheckProtection[\"Route Protected?\"]\nPublicRoute[\"Execute Route&lt;br&gt;Handler Directly\"]\nEstaAutenticado[\"estaAutenticado()&lt;br&gt;[courses.js:8-14]\"]\nSessionCheck[\"req.session.loggedin&lt;br&gt;exists?\"]\nRedirectLogin1[\"res.redirect('/login')\"]\nRoleRequired[\"Role-Specific&lt;br&gt;Middleware?\"]\nExecuteHandler[\"Execute Route Handler\"]\nCheckAdmin[\"isAdmin()&lt;br&gt;[courses.js:16-24]\"]\nCheckRegistrado[\"isRegistrado()&lt;br&gt;[courses.js:26-33]\"]\nAdminCheck[\"req.session.rol&lt;br&gt;=== 'admin'?\"]\nRedirectLogin2[\"res.redirect('/login')\"]\nExecuteAdminHandler[\"Execute Admin&lt;br&gt;Route Handler\"]\nRegisteredCheck[\"req.session.rol&lt;br&gt;=== 'registrado'?\"]\nRedirectLogin3[\"res.redirect('/login')\"]\nExecuteRegisteredHandler[\"Execute Registered&lt;br&gt;User Route Handler\"]\n\nRequest --&gt; RouteHandler\nRouteHandler --&gt; CheckProtection\nCheckProtection --&gt; PublicRoute\nCheckProtection --&gt; EstaAutenticado\nEstaAutenticado --&gt; SessionCheck\nSessionCheck --&gt; RedirectLogin1\nSessionCheck --&gt; RoleRequired\nRoleRequired --&gt; ExecuteHandler\nRoleRequired --&gt; CheckAdmin\nRoleRequired --&gt; CheckRegistrado\nCheckAdmin --&gt; AdminCheck\nAdminCheck --&gt; RedirectLogin2\nAdminCheck --&gt; ExecuteAdminHandler\nCheckRegistrado --&gt; RegisteredCheck\nRegisteredCheck --&gt; RedirectLogin3\nRegisteredCheck --&gt; ExecuteRegisteredHandler</code></pre> <p>Sources: routes/courses.js:8-33</p>"},{"location":"Role-Based-Access-Control/#role-assignment-process","title":"Role Assignment Process","text":""},{"location":"Role-Based-Access-Control/#during-registration","title":"During Registration","text":"<p>When a user registers, their role is assigned in the database insertion operation:</p> <p>Implementation: routes/auth.js L43-L52</p> <pre><code>rol: rol || 'registrado'\n</code></pre> <p>The system defaults to <code>'registrado'</code> if no role is explicitly provided in the registration form, though the standard registration form does not expose role selection to users.</p>"},{"location":"Role-Based-Access-Control/#during-login","title":"During Login","text":"<p>Upon successful authentication, the user's role is loaded from the database and stored in the session:</p> <p>Implementation: routes/auth.js L100-L104</p> <p>The session object is populated with:</p> <ul> <li><code>req.session.loggedin = true</code></li> <li><code>req.session.usuario = results[0]</code> (full user object)</li> <li><code>req.session.rol = usuario.rol</code> (extracted role value)</li> </ul> <p>This role value persists throughout the user's session and is checked by middleware on each protected route request.</p> <p>Sources: routes/auth.js:43-52, routes/auth.js:100-104</p>"},{"location":"Role-Based-Access-Control/#route-protection-patterns","title":"Route Protection Patterns","text":"<p>Diagram: Routes by Access Level</p> <pre><code>flowchart TD\n\nADM1[\"GET /create&lt;br&gt;(routes/courses.js:64)\"]\nADM2[\"POST /save&lt;br&gt;(routes/courses.js:70)\"]\nADM3[\"GET /edit/:id&lt;br&gt;(routes/courses.js:73)\"]\nADM4[\"POST /update&lt;br&gt;(routes/courses.js:103)\"]\nADM5[\"GET /delete/:id&lt;br&gt;(routes/courses.js:87)\"]\nADM6[\"GET /admin/perfil&lt;br&gt;(routes/courses.js:172)\"]\nU1[\"GET /inscribir/:id&lt;br&gt;(routes/courses.js:106)\"]\nU2[\"POST /inscribir/:id&lt;br&gt;(routes/courses.js:117)\"]\nU3[\"GET /perfil&lt;br&gt;(routes/courses.js:152)\"]\nA1[\"POST /logout&lt;br&gt;(routes/auth.js:134)\"]\nR1[\"GET /&lt;br&gt;(routes/index.js)\"]\nR2[\"GET /login&lt;br&gt;(routes/auth.js:8)\"]\nR3[\"GET /register&lt;br&gt;(routes/auth.js:12)\"]\nR4[\"POST /auth&lt;br&gt;(routes/auth.js:75)\"]\nR5[\"POST /register&lt;br&gt;(routes/auth.js:17)\"]\nR6[\"GET /courses*&lt;br&gt;(routes/courses.js:35)\"]\n\nsubgraph Admin [\"Admin Routes (estaAutenticado + isAdmin)\"]\n    ADM1\n    ADM2\n    ADM3\n    ADM4\n    ADM5\n    ADM6\nend\n\nsubgraph Registered [\"Registered User Routes (estaAutenticado + isRegistrado)\"]\n    U1\n    U2\n    U3\nend\n\nsubgraph Authenticated [\"Authenticated Routes (estaAutenticado)\"]\n    A1\nend\n\nsubgraph Public [\"Public Routes (No Middleware)\"]\n    R1\n    R2\n    R3\n    R4\n    R5\n    R6\nend</code></pre> <p>Sources: routes/auth.js, routes/courses.js</p>"},{"location":"Role-Based-Access-Control/#detailed-route-protection-examples","title":"Detailed Route Protection Examples","text":""},{"location":"Role-Based-Access-Control/#public-access-example-course-listing","title":"Public Access Example: Course Listing","text":"<p>The <code>/courses</code> route is publicly accessible but implements role-based content filtering:</p> <p>Implementation: routes/courses.js L35-L62</p> <pre><code>const rol = req.session?.rol || 'publico';\n</code></pre> <ul> <li>Public users (<code>'publico'</code>): SQL query filtered with <code>WHERE visibilidad='publico'</code></li> <li>Registered and admin users: No WHERE clause, all courses visible</li> </ul>"},{"location":"Role-Based-Access-Control/#registered-user-access-example-enrollment","title":"Registered User Access Example: Enrollment","text":"<p>The enrollment routes require both authentication and the <code>'registrado'</code> role:</p> <p>Implementation: routes/courses.js L106-L114</p> <p>and routes/courses.js L117-L149</p> <p>Middleware Chain:</p> <pre><code>router.get(\"/inscribir/:id\", estaAutenticado, isRegistrado, (req, res) =&gt; { ... })\nrouter.post(\"/inscribir/:id\", estaAutenticado, isRegistrado, (req, res) =&gt; { ... })\n</code></pre> <p>The middleware chain executes left to right:</p> <ol> <li><code>estaAutenticado</code> verifies session exists</li> <li><code>isRegistrado</code> verifies <code>req.session.rol === 'registrado'</code></li> <li>Route handler executes only if both checks pass</li> </ol>"},{"location":"Role-Based-Access-Control/#administrator-access-example-course-creation","title":"Administrator Access Example: Course Creation","text":"<p>All CRUD operations require both authentication and the <code>'admin'</code> role:</p> <p>Implementation: routes/courses.js L64-L66</p> <p>for the form, routes/courses.js L70</p> <p>for saving</p> <p>Middleware Chain:</p> <pre><code>router.get('/create', estaAutenticado, isAdmin, (req, res) =&gt; { ... })\nrouter.post('/save', estaAutenticado, isAdmin, crud.save)\n</code></pre> <p>Sources: routes/courses.js:35-185</p>"},{"location":"Role-Based-Access-Control/#access-control-decision-table","title":"Access Control Decision Table","text":"<p>The following table summarizes route accessibility by role:</p> Route Pattern Public Registered Admin Middleware Applied <code>/</code>, <code>/login</code>, <code>/register</code> \u2713 \u2713 \u2713 None <code>POST /auth</code>, <code>POST /register</code> \u2713 \u2713 \u2713 None <code>GET /courses</code> \u2713 (filtered) \u2713 (all) \u2713 (all) None <code>POST /logout</code> \u2717 \u2713 \u2713 <code>estaAutenticado</code> <code>/inscribir/:id</code> (GET/POST) \u2717 \u2713 \u2717 <code>estaAutenticado</code>, <code>isRegistrado</code> <code>/perfil</code> \u2717 \u2713 \u2717 <code>estaAutenticado</code>, <code>isRegistrado</code> <code>/create</code>, <code>/save</code> \u2717 \u2717 \u2713 <code>estaAutenticado</code>, <code>isAdmin</code> <code>/edit/:id</code>, <code>/update</code> \u2717 \u2717 \u2713 <code>estaAutenticado</code>, <code>isAdmin</code> <code>/delete/:id</code> \u2717 \u2717 \u2713 <code>estaAutenticado</code>, <code>isAdmin</code> <code>/admin/perfil</code> \u2717 \u2717 \u2713 <code>estaAutenticado</code>, <code>isAdmin</code> <p>Sources: routes/auth.js, routes/courses.js</p>"},{"location":"Role-Based-Access-Control/#session-based-role-storage","title":"Session-Based Role Storage","text":"<p>Diagram: Role Data Flow from Database to Middleware</p> <pre><code>flowchart TD\n\nDB[\"MySQL Database&lt;br&gt;usuarios table&lt;br&gt;rol column\"]\nQuery[\"SELECT * FROM usuarios&lt;br&gt;WHERE email = ?&lt;br&gt;[auth.js:82-83]\"]\nResults[\"results[0]&lt;br&gt;(user object)\"]\nSessionAssign[\"req.session.usuario = results[0]&lt;br&gt;req.session.rol = usuario.rol&lt;br&gt;req.session.loggedin = true&lt;br&gt;[auth.js:102-104]\"]\nSessionStore[\"Express Session Store&lt;br&gt;(express-session middleware)\"]\nNextRequest[\"Subsequent HTTP Request&lt;br&gt;with session cookie\"]\nMiddlewareCheck[\"Middleware Function&lt;br&gt;(estaAutenticado/isAdmin/isRegistrado)\"]\nRolCheck[\"Check req.session.rol&lt;br&gt;against required value\"]\nAllowAccess[\"next() called&lt;br&gt;Route handler executes\"]\nDenyAccess[\"res.redirect('/login')&lt;br&gt;Access denied\"]\n\nDB --&gt; Query\nQuery --&gt; Results\nResults --&gt; SessionAssign\nSessionAssign --&gt; SessionStore\nSessionStore --&gt; NextRequest\nNextRequest --&gt; MiddlewareCheck\nMiddlewareCheck --&gt; RolCheck\nRolCheck --&gt; AllowAccess\nRolCheck --&gt; DenyAccess</code></pre> <p>Sources: routes/auth.js:82-104, routes/courses.js:8-33</p>"},{"location":"Role-Based-Access-Control/#security-considerations","title":"Security Considerations","text":""},{"location":"Role-Based-Access-Control/#middleware-ordering","title":"Middleware Ordering","text":"<p>Middleware functions must be applied in the correct order to ensure proper access control:</p> <ol> <li>Always apply <code>estaAutenticado</code> first before role-specific middleware</li> <li>Apply role middleware second (<code>isAdmin</code> or <code>isRegistrado</code>)</li> <li>Route handler executes last</li> </ol> <p>Incorrect ordering would allow unauthenticated users to bypass authentication checks.</p>"},{"location":"Role-Based-Access-Control/#role-exclusivity","title":"Role Exclusivity","text":"<p>The current implementation makes roles mutually exclusive in protected routes:</p> <ul> <li>Routes with <code>isRegistrado</code> only allow users with role <code>'registrado'</code></li> <li>Routes with <code>isAdmin</code> only allow users with role <code>'admin'</code></li> <li>An administrator cannot access <code>/inscribir/:id</code> or <code>/perfil</code> because these check for <code>rol === 'registrado'</code></li> </ul> <p>This design separates administrative and user workflows completely.</p>"},{"location":"Role-Based-Access-Control/#session-integrity","title":"Session Integrity","text":"<p>The role stored in <code>req.session.rol</code> is considered authoritative for the duration of the session. The system does not re-query the database to verify roles on each request, relying instead on session data integrity. If a user's role is changed in the database, they must log out and log back in for the change to take effect.</p> <p>Sources: routes/courses.js:8-33, routes/auth.js:100-104</p>"},{"location":"Role-Based-Access-Control/#implementation-notes","title":"Implementation Notes","text":""},{"location":"Role-Based-Access-Control/#optional-chaining-for-safety","title":"Optional Chaining for Safety","text":"<p>The middleware functions use optional chaining (<code>?.</code>) to safely access session properties:</p> <pre><code>req.session?.loggedin\nreq.session?.rol\n</code></pre> <p>This prevents runtime errors if the session object is undefined, though in practice the Express session middleware ensures <code>req.session</code> always exists.</p> <p>Implementation: routes/courses.js L17</p> <p>routes/courses.js L27</p>"},{"location":"Role-Based-Access-Control/#default-role-assignment","title":"Default Role Assignment","text":"<p>The course listing route demonstrates defensive programming by defaulting to <code>'publico'</code> when no session exists:</p> <pre><code>const rol = req.session?.rol || 'publico';\n</code></pre> <p>Implementation: routes/courses.js L36</p> <p>This allows the route to handle both authenticated and unauthenticated users gracefully without requiring authentication middleware.</p> <p>Sources: routes/courses.js:17-36</p>"},{"location":"Routing-System/","title":"Routing System","text":"<p>Relevant source files * app.js * routes/auth.js * routes/courses.js * routes/index.js</p>"},{"location":"Routing-System/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the modular routing architecture of the course management application. The routing system is organized into three separate router modules that handle different functional areas: static pages, authentication, and course management. Each router defines HTTP endpoints with associated middleware chains for authentication, authorization, and request handling.</p> <p>For details on authentication middleware implementation, see Authentication &amp; Authorization. For information on how routes integrate with database operations, see Database Architecture. For the application entry point where routers are mounted, see Application Entry Point.</p>"},{"location":"Routing-System/#router-module-structure","title":"Router Module Structure","text":"<p>The application uses Express Router to organize endpoints into three distinct modules, all mounted at the root path in app.js L29-L31</p> <p>:</p> Router Module File Path Mounted At Purpose Index Router <code>routes/index.js</code> <code>/</code> Landing page and static content Auth Router <code>routes/auth.js</code> <code>/</code> User authentication and registration Courses Router <code>routes/courses.js</code> <code>/</code> Course CRUD operations and enrollment <p>All three routers are mounted at the root path (<code>/</code>), meaning routes defined in each module are directly accessible without a prefix. This creates a flat URL structure where authentication routes like <code>/login</code> and course routes like <code>/courses</code> exist at the same hierarchy level.</p> <p>Router Mounting Diagram</p> <pre><code>flowchart TD\n\nAppJS[\"app.js&lt;br&gt;Express Application\"]\nIndexRouter[\"routes/index.js&lt;br&gt;Index Router\"]\nAuthRouter[\"routes/auth.js&lt;br&gt;Auth Router\"]\nCoursesRouter[\"routes/courses.js&lt;br&gt;Courses Router\"]\nR1[\"GET /&lt;br&gt;Landing Page\"]\nR2[\"GET /login&lt;br&gt;Login Form\"]\nR3[\"GET /register&lt;br&gt;Registration Form\"]\nR4[\"POST /register&lt;br&gt;Create Account\"]\nR5[\"POST /auth&lt;br&gt;Authenticate\"]\nR6[\"POST /logout&lt;br&gt;Destroy Session\"]\nR7[\"GET /courses&lt;br&gt;Course Listing\"]\nR8[\"GET /create&lt;br&gt;Course Form\"]\nR9[\"POST /save&lt;br&gt;Save Course\"]\nR10[\"GET /edit/:id&lt;br&gt;Edit Form\"]\nR11[\"POST /update&lt;br&gt;Update Course\"]\nR12[\"GET /delete/:id&lt;br&gt;Delete Course\"]\nR13[\"GET /inscribir/:id&lt;br&gt;Enrollment Confirm\"]\nR14[\"POST /inscribir/:id&lt;br&gt;Process Enrollment\"]\nR15[\"GET /perfil&lt;br&gt;User Profile\"]\nR16[\"GET /admin/perfil&lt;br&gt;Admin Dashboard\"]\n\nAppJS --&gt; IndexRouter\nAppJS --&gt; AuthRouter\nAppJS --&gt; CoursesRouter\nIndexRouter --&gt; R1\nAuthRouter --&gt; R2\nAuthRouter --&gt; R3\nAuthRouter --&gt; R4\nAuthRouter --&gt; R5\nAuthRouter --&gt; R6\nCoursesRouter --&gt; R7\nCoursesRouter --&gt; R8\nCoursesRouter --&gt; R9\nCoursesRouter --&gt; R10\nCoursesRouter --&gt; R11\nCoursesRouter --&gt; R12\nCoursesRouter --&gt; R13\nCoursesRouter --&gt; R14\nCoursesRouter --&gt; R15\nCoursesRouter --&gt; R16\n\nsubgraph subGraph1 [\"Route Definitions\"]\n    R1\n    R2\n    R3\n    R4\n    R5\n    R6\n    R7\n    R8\n    R9\n    R10\n    R11\n    R12\n    R13\n    R14\n    R15\n    R16\nend\n\nsubgraph subGraph0 [\"Router Modules\"]\n    IndexRouter\n    AuthRouter\n    CoursesRouter\nend</code></pre> <p>Sources: app.js L29-L31</p> <p>routes/index.js L1-L18</p> <p>routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p>"},{"location":"Routing-System/#index-router","title":"Index Router","text":"<p>The index router in routes/index.js</p> <p>provides the application's landing page. This router has minimal complexity with a single route definition.</p>"},{"location":"Routing-System/#route-definition","title":"Route Definition","text":"Method Path Handler Purpose GET <code>/</code> Anonymous function Renders landing page with session context <p>The root route routes/index.js L6-L15</p> <p>accesses session data to personalize the view. It passes several variables to the <code>index.ejs</code> template:</p> <ul> <li><code>login</code>: Boolean indicating if user is authenticated (<code>req.session.loggedin</code>)</li> <li><code>name</code>: User's name from session or \"Invitado\" (Guest)</li> <li>Static content: <code>nombre</code> and <code>experiencia</code> strings</li> </ul> <p>Sources: routes/index.js L1-L18</p>"},{"location":"Routing-System/#authentication-router","title":"Authentication Router","text":"<p>The authentication router in routes/auth.js</p> <p>handles user account lifecycle operations including registration, login, and logout. This router integrates with <code>express-validator</code> for input validation and <code>bcryptjs</code> for password security.</p>"},{"location":"Routing-System/#route-definitions","title":"Route Definitions","text":"Method Path Middleware Handler Purpose GET <code>/login</code> None auth.js L8-L10 Display login form GET <code>/register</code> None auth.js L12-L14 Display registration form POST <code>/register</code> Validation chain auth.js L17-L72 Process new account creation POST <code>/auth</code> None auth.js L75-L131 Authenticate user credentials POST <code>/logout</code> None auth.js L134-L136 Destroy session and redirect"},{"location":"Routing-System/#registration-route-with-validation","title":"Registration Route with Validation","text":"<p>The registration route routes/auth.js L17-L72</p> <p>implements a multi-stage validation pipeline using <code>express-validator</code>:</p> <pre><code>flowchart TD\n\nRequest[\"POST /register\"]\nValidate1[\"body('nombre')&lt;br&gt;min length: 3\"]\nValidate2[\"body('email')&lt;br&gt;isEmail()\"]\nValidate3[\"body('password')&lt;br&gt;min length: 4\"]\nCheckErrors[\"validationResult(req)\"]\nDecision[\"Errors?\"]\nRenderErrors[\"Re-render register&lt;br&gt;with validaciones array\"]\nHashPass[\"bcrypt.hash(password, 8)\"]\nInsertDB[\"INSERT INTO usuarios\"]\nSuccess[\"Render success alert&lt;br&gt;redirect to login\"]\n\nRequest --&gt; Validate1\nValidate1 --&gt; Validate2\nValidate2 --&gt; Validate3\nValidate3 --&gt; CheckErrors\nCheckErrors --&gt; Decision\nDecision --&gt; RenderErrors\nDecision --&gt; HashPass\nHashPass --&gt; InsertDB\nInsertDB --&gt; Success</code></pre> <p>The validation middleware array routes/auth.js L18-L33</p> <p>validates:</p> <ol> <li><code>nombre</code>: Minimum 3 characters</li> <li><code>email</code>: Valid email format</li> <li><code>password</code>: Minimum 4 characters</li> </ol> <p>Sources: routes/auth.js L1-L139</p>"},{"location":"Routing-System/#login-authentication-flow","title":"Login Authentication Flow","text":"<p>The login route routes/auth.js L75-L131</p> <p>implements password verification and session initialization:</p> <ol> <li>Query database for user by email auth.js L81-L84</li> <li>Compare password with bcrypt auth.js L86</li> <li>On success: Set session variables auth.js L102-L104 * <code>req.session.loggedin = true</code> * <code>req.session.usuario = results[0]</code> (entire user object) * <code>req.session.rol = usuario.rol</code> (user's role)</li> <li>Render login page with SweetAlert2 configuration auth.js L106-L115</li> </ol> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"Routing-System/#courses-router","title":"Courses Router","text":"<p>The courses router in routes/courses.js</p> <p>is the most complex router module, handling course CRUD operations, enrollment, and profile views. It defines three custom middleware functions for route protection.</p>"},{"location":"Routing-System/#middleware-functions","title":"Middleware Functions","text":"<p>The courses router defines three middleware functions that implement authentication and role-based authorization:</p> Middleware Lines Check Redirect on Failure <code>estaAutenticado</code> courses.js L8-L14 <code>req.session.loggedin</code> is truthy <code>/login</code> <code>isAdmin</code> courses.js L16-L24 <code>req.session.rol === 'admin'</code> <code>/login</code> <code>isRegistrado</code> courses.js L26-L33 <code>req.session.rol === 'registrado'</code> <code>/login</code> <p>These middleware functions use the <code>next()</code> callback to pass control to the next middleware or route handler when authorization succeeds.</p> <p>Middleware Chain Architecture</p> <pre><code>flowchart TD\n\nRequest[\"HTTP Request\"]\nAuth[\"estaAutenticado&lt;br&gt;Session exists?\"]\nRoleCheck[\"Role Check\"]\nAdmin[\"isAdmin&lt;br&gt;rol === 'admin'\"]\nRegistrado[\"isRegistrado&lt;br&gt;rol === 'registrado'\"]\nHandler[\"Route Handler\"]\nRedirect[\"Redirect to /login\"]\n\nRequest --&gt; Auth\nAuth --&gt; Redirect\nRoleCheck --&gt; Handler\nAdmin --&gt; Handler\nAdmin --&gt; Redirect\nRegistrado --&gt; Handler\nRegistrado --&gt; Redirect\n\nsubgraph subGraph0 [\"Middleware Pipeline\"]\n    Auth\n    RoleCheck\n    Admin\n    Registrado\n    Auth --&gt; RoleCheck\n    RoleCheck --&gt; Admin\n    RoleCheck --&gt; Registrado\nend</code></pre> <p>Sources: routes/courses.js L8-L33</p>"},{"location":"Routing-System/#route-definitions-by-access-level","title":"Route Definitions by Access Level","text":""},{"location":"Routing-System/#public-routes","title":"Public Routes","text":"Method Path Middleware Purpose GET <code>/courses</code> None Display courses filtered by user role courses.js L35-L62 <p>The <code>/courses</code> route implements role-based content filtering. Public users (<code>rol === 'publico'</code>) only see courses with <code>visibilidad='publico'</code>, while authenticated users see all courses courses.js L36-L42</p>"},{"location":"Routing-System/#administrator-routes","title":"Administrator Routes","text":"<p>All administrator routes use the middleware chain: <code>estaAutenticado, isAdmin</code></p> Method Path Handler Type Purpose GET <code>/create</code> Inline Render course creation form courses.js L64-L67 POST <code>/save</code> Controller <code>crud.save</code> - Insert new course courses.js L70 GET <code>/edit/:id</code> Inline Load course data and render edit form courses.js L73-L84 POST <code>/update</code> Controller <code>crud.update</code> - Update course courses.js L103 GET <code>/delete/:id</code> Inline Delete course by ID courses.js L87-L98 GET <code>/admin/perfil</code> Inline Display admin dashboard with statistics courses.js L172-L185"},{"location":"Routing-System/#registered-user-routes","title":"Registered User Routes","text":"<p>All registered user routes use the middleware chain: <code>estaAutenticado, isRegistrado</code></p> Method Path Purpose GET <code>/inscribir/:id</code> Display enrollment confirmation page courses.js L106-L114 POST <code>/inscribir/:id</code> Process enrollment with duplicate check courses.js L117-L149 GET <code>/perfil</code> Display user profile with enrolled courses courses.js L152-L169 <p>Sources: routes/courses.js L35-L187</p>"},{"location":"Routing-System/#parameter-based-routing","title":"Parameter-Based Routing","text":"<p>Several routes use URL parameters (<code>:id</code>) to specify resources:</p> <pre><code>flowchart TD\n\nEditRoute[\"GET /edit/:id\"]\nDeleteRoute[\"GET /delete/:id\"]\nInscribirGetRoute[\"GET /inscribir/:id\"]\nInscribirPostRoute[\"POST /inscribir/:id\"]\nExtractParam[\"req.params.id\"]\nDBQuery1[\"SELECT * FROM cursos WHERE id = ?\"]\nDBQuery2[\"DELETE FROM cursos WHERE id = ?\"]\nDBQuery3[\"SELECT * FROM inscripciones&lt;br&gt;WHERE id_usuario AND id_curso\"]\n\nEditRoute --&gt; ExtractParam\nDeleteRoute --&gt; ExtractParam\nInscribirGetRoute --&gt; ExtractParam\nInscribirPostRoute --&gt; ExtractParam\nExtractParam --&gt; DBQuery1\nExtractParam --&gt; DBQuery2\nExtractParam --&gt; DBQuery3</code></pre> <p>The parameter extraction uses <code>req.params.id</code> to access the route parameter, which is then used in parameterized SQL queries to prevent SQL injection attacks.</p> <p>Sources: routes/courses.js L73-L98</p> <p>routes/courses.js L106-L149</p>"},{"location":"Routing-System/#controller-integration","title":"Controller Integration","text":"<p>Two routes delegate business logic to external controller modules:</p> Route Controller Function Module POST <code>/save</code> <code>crud.save</code> <code>src/controller.js</code> courses.js L70 POST <code>/update</code> <code>crud.update</code> <code>src/controller.js</code> courses.js L103 <p>The courses router imports both controller modules at courses.js L5-L6</p> <p>:</p> <ul> <li><code>crud</code> from <code>../src/controller</code></li> <li><code>cursoController</code> from <code>../src/cursoController</code></li> </ul> <p>However, only the <code>crud</code> controller is actively used in route definitions. The <code>cursoController</code> import appears unused in the current routing configuration.</p> <p>Sources: routes/courses.js L5-L6</p> <p>routes/courses.js L70</p> <p>routes/courses.js L103</p>"},{"location":"Routing-System/#middleware-application-patterns","title":"Middleware Application Patterns","text":"<p>The routing system demonstrates three distinct patterns for applying middleware to routes:</p>"},{"location":"Routing-System/#pattern-1-no-middleware-public-routes","title":"Pattern 1: No Middleware (Public Routes)","text":"<pre><code>router.get('/login', (req, res) =&gt; { ... })\n</code></pre> <p>Used for: Login form, registration form, course listing (with internal role filtering), landing page</p>"},{"location":"Routing-System/#pattern-2-multiple-middleware-chain","title":"Pattern 2: Multiple Middleware Chain","text":"<pre><code>router.get('/create', estaAutenticado, isAdmin, (req, res) =&gt; { ... })\n</code></pre> <p>Middleware executes left-to-right. If any middleware doesn't call <code>next()</code>, the chain stops and subsequent handlers don't execute. This pattern is used for all protected admin and user routes.</p>"},{"location":"Routing-System/#pattern-3-validation-middleware-array","title":"Pattern 3: Validation Middleware Array","text":"<pre><code>router.post(\"/register\", [body(\"nombre\").exists().isLength({min: 3}), ...], handler)\n</code></pre> <p>The registration route uses an array of validation middleware from <code>express-validator</code>, which all execute before the handler function.</p> <p>Complete Middleware Application Map</p> <pre><code>flowchart TD\n\nV1[\"POST /register&lt;br&gt;Validation array\"]\nV2[\"POST /auth&lt;br&gt;No middleware\"]\nV3[\"POST /logout&lt;br&gt;No middleware\"]\nP1[\"GET /&lt;br&gt;No middleware\"]\nP2[\"GET /login&lt;br&gt;No middleware\"]\nP3[\"GET /register&lt;br&gt;No middleware\"]\nP4[\"GET /courses&lt;br&gt;No middleware&lt;br&gt;Internal role check\"]\nA1[\"estaAutenticado\"]\nAD1[\"GET /create&lt;br&gt;estaAutenticado + isAdmin\"]\nAD2[\"POST /save&lt;br&gt;estaAutenticado + isAdmin\"]\nAD3[\"GET /edit/:id&lt;br&gt;estaAutenticado + isAdmin\"]\nAD4[\"POST /update&lt;br&gt;estaAutenticado + isAdmin\"]\nAD5[\"GET /delete/:id&lt;br&gt;estaAutenticado + isAdmin\"]\nAD6[\"GET /admin/perfil&lt;br&gt;estaAutenticado + isAdmin\"]\nU1[\"GET /inscribir/:id&lt;br&gt;estaAutenticado + isRegistrado\"]\nU2[\"POST /inscribir/:id&lt;br&gt;estaAutenticado + isRegistrado\"]\nU3[\"GET /perfil&lt;br&gt;estaAutenticado + isRegistrado\"]\n\nA1 --&gt; AD1\nA1 --&gt; AD2\nA1 --&gt; AD3\nA1 --&gt; AD4\nA1 --&gt; AD5\nA1 --&gt; AD6\nA1 --&gt; U1\nA1 --&gt; U2\nA1 --&gt; U3\n\nsubgraph subGraph4 [\"Registered User Only\"]\n    U1\n    U2\n    U3\nend\n\nsubgraph subGraph3 [\"Admin Only\"]\n    AD1\n    AD2\n    AD3\n    AD4\n    AD5\n    AD6\nend\n\nsubgraph subGraph2 [\"Authentication Required\"]\n    A1\nend\n\nsubgraph subGraph1 [\"Validation Required\"]\n    V1\n    V2\n    V3\nend\n\nsubgraph subGraph0 [\"Public Access\"]\n    P1\n    P2\n    P3\n    P4\nend</code></pre> <p>Sources: routes/index.js L6-L15</p> <p>routes/auth.js L8-L136</p> <p>routes/courses.js L35-L185</p>"},{"location":"Routing-System/#route-handler-response-patterns","title":"Route Handler Response Patterns","text":"<p>The routing system uses three distinct response patterns based on the nature of the operation:</p>"},{"location":"Routing-System/#render-response","title":"Render Response","text":"<p>Used for GET requests that display views:</p> <pre><code>res.render('viewName', { data: values })\n</code></pre> <p>Examples: <code>/login</code>, <code>/create</code>, <code>/edit/:id</code>, <code>/perfil</code></p>"},{"location":"Routing-System/#redirect-response","title":"Redirect Response","text":"<p>Used after successful POST operations (Post-Redirect-Get pattern):</p> <pre><code>res.redirect('/targetPath')\n</code></pre> <p>Examples: After <code>/save</code>, <code>/update</code>, <code>/delete/:id</code>, <code>/inscribir/:id</code>, <code>/logout</code></p>"},{"location":"Routing-System/#render-with-alert-configuration","title":"Render with Alert Configuration","text":"<p>Used to display operation results via SweetAlert2:</p> <pre><code>res.render('viewName', {\n    alert: true,\n    alertTitle: 'Title',\n    alertMessage: 'Message',\n    alertIcon: 'success',\n    ruta: 'redirectPath'\n})\n</code></pre> <p>This pattern is used in routes/auth.js L58-L66</p> <p>(successful registration) and routes/auth.js L88-L97</p> <p>(login errors).</p> <p>Response Type Decision Tree</p> <pre><code>flowchart TD\n\nRequest[\"Route Handler\"]\nCheckType[\"Request Type?\"]\nCheckSuccess[\"Operation&lt;br&gt;Success?\"]\nGetReq[\"GET Request\"]\nPostReq[\"POST Request\"]\nRenderView[\"res.render()&lt;br&gt;Display view\"]\nRedirect[\"res.redirect()&lt;br&gt;PRG pattern\"]\nRenderAlert[\"res.render()&lt;br&gt;with alert config\"]\n\nRequest --&gt; CheckType\nCheckType --&gt; GetReq\nCheckType --&gt; PostReq\nGetReq --&gt; RenderView\nPostReq --&gt; CheckSuccess\nCheckSuccess --&gt; Redirect\nCheckSuccess --&gt; RenderAlert</code></pre> <p>Sources: routes/auth.js L8-L136</p> <p>routes/courses.js L35-L185</p>"},{"location":"Routing-System/#database-query-patterns-in-routes","title":"Database Query Patterns in Routes","text":"<p>Routes interact with the database in two ways:</p>"},{"location":"Routing-System/#direct-query-execution","title":"Direct Query Execution","text":"<p>Routes in the courses router execute SQL queries directly for simpler operations:</p> Route Query Type Example <code>/courses</code> SELECT with conditional WHERE courses.js L38-L42 <code>/edit/:id</code> SELECT by ID courses.js L77 <code>/delete/:id</code> DELETE by ID courses.js L91 <code>/inscribir/:id</code> (GET) SELECT by ID courses.js L109 <code>/inscribir/:id</code> (POST) SELECT + INSERT courses.js L121-L146 <code>/perfil</code> SELECT with JOIN courses.js L155-L160 <code>/admin/perfil</code> SELECT COUNT courses.js L176"},{"location":"Routing-System/#controller-delegation","title":"Controller Delegation","text":"<p>POST routes for course CRUD delegate to controller functions:</p> Route Controller Purpose POST <code>/save</code> <code>crud.save</code> Course creation logic POST <code>/update</code> <code>crud.update</code> Course update logic <p>This separation allows complex business logic and validation to be centralized in controller modules while keeping route handlers focused on request/response coordination.</p> <p>Sources: routes/courses.js L35-L187</p> <p>routes/courses.js L5-L6</p>"},{"location":"Routing-System/#request-flow-example-course-enrollment","title":"Request Flow Example: Course Enrollment","text":"<p>The enrollment process demonstrates the complete routing system capabilities including parameter extraction, middleware chains, database interactions, and duplicate prevention:</p> <pre><code>sequenceDiagram\n  participant Browser\n  participant courses.js router\n  participant estaAutenticado\n  participant isRegistrado\n  participant Database\n\n  note over Browser,Database: Step 1: Display Confirmation Page\n  Browser-&gt;&gt;courses.js router: GET /inscribir/5\n  courses.js router-&gt;&gt;estaAutenticado: Check authentication\n  estaAutenticado-&gt;&gt;isRegistrado: User authenticated\n  isRegistrado-&gt;&gt;courses.js router: Role verified\n  courses.js router-&gt;&gt;Database: SELECT * FROM cursos WHERE id = 5\n  Database-&gt;&gt;courses.js router: Course data\n  courses.js router-&gt;&gt;Browser: Render confirmInscripcion.ejs\n  note over Browser,Database: Step 2: Process Enrollment\n  Browser-&gt;&gt;courses.js router: POST /inscribir/5\n  courses.js router-&gt;&gt;estaAutenticado: Check authentication\n  estaAutenticado-&gt;&gt;isRegistrado: User authenticated\n  isRegistrado-&gt;&gt;courses.js router: Role verified\n  courses.js router-&gt;&gt;Database: SELECT * FROM inscripciones\n  Database-&gt;&gt;courses.js router: WHERE id_usuario = X AND id_curso = 5\n  loop [Already Enrolled]\n    courses.js router-&gt;&gt;Browser: Check results\n    courses.js router-&gt;&gt;Database: Redirect to /perfil\n    Database-&gt;&gt;courses.js router: INSERT INTO inscripciones\n    courses.js router-&gt;&gt;Browser: (id_usuario, id_curso) VALUES (X, 5)\n  end</code></pre> <p>The enrollment implementation at routes/courses.js L117-L149</p> <p>demonstrates:</p> <ol> <li>Parameter extraction: <code>req.params.id</code> for course ID</li> <li>Session access: <code>req.session.usuario.id</code> for user ID</li> <li>Duplicate check: Query before insert to prevent re-enrollment</li> <li>Post-Redirect-Get pattern: Redirects to <code>/perfil</code> after completion</li> </ol> <p>Sources: routes/courses.js L106-L169</p>"},{"location":"Routing-System/#route-to-file-mapping-reference","title":"Route-to-File Mapping Reference","text":"<p>This table maps all application endpoints to their implementation locations:</p> Endpoint Method Router File Lines View Template <code>/</code> GET <code>routes/index.js</code> 6-15 <code>index.ejs</code> <code>/login</code> GET <code>routes/auth.js</code> 8-10 <code>login.ejs</code> <code>/register</code> GET <code>routes/auth.js</code> 12-14 <code>register.ejs</code> <code>/register</code> POST <code>routes/auth.js</code> 17-72 <code>register.ejs</code> (with alert) <code>/auth</code> POST <code>routes/auth.js</code> 75-131 <code>login.ejs</code> (with alert) <code>/logout</code> POST <code>routes/auth.js</code> 134-136 - (redirect) <code>/courses</code> GET <code>routes/courses.js</code> 35-62 <code>courses.ejs</code> <code>/create</code> GET <code>routes/courses.js</code> 64-67 <code>create.ejs</code> <code>/save</code> POST <code>routes/courses.js</code> 70 - (via controller) <code>/edit/:id</code> GET <code>routes/courses.js</code> 73-84 <code>edit.ejs</code> <code>/update</code> POST <code>routes/courses.js</code> 103 - (via controller) <code>/delete/:id</code> GET <code>routes/courses.js</code> 87-98 - (redirect) <code>/inscribir/:id</code> GET <code>routes/courses.js</code> 106-114 <code>confirmInscripcion.ejs</code> <code>/inscribir/:id</code> POST <code>routes/courses.js</code> 117-149 - (redirect) <code>/perfil</code> GET <code>routes/courses.js</code> 152-169 <code>perfil.ejs</code> <code>/admin/perfil</code> GET <code>routes/courses.js</code> 172-185 <code>adminPerfil.ejs</code> <p>Sources: routes/index.js</p> <p>routes/auth.js</p> <p>routes/courses.js</p>"},{"location":"Security-Considerations/","title":"Security Considerations","text":"<p>Relevant source files * package.json * routes/auth.js * routes/courses.js</p>"},{"location":"Security-Considerations/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the security mechanisms implemented in the course management system to protect against common web vulnerabilities. The system employs multiple layers of security including password hashing, input validation, SQL injection prevention, session management, and role-based access control.</p> <p>For information about the authentication flow and user management, see Authentication &amp; Authorization. For details on role-specific middleware implementation, see Role-Based Access Control.</p>"},{"location":"Security-Considerations/#security-architecture-overview","title":"Security Architecture Overview","text":"<p>The system implements defense-in-depth through multiple security layers that work together to protect user data and prevent unauthorized access.</p>"},{"location":"Security-Considerations/#security-layer-stack","title":"Security Layer Stack","text":"<pre><code>flowchart TD\n\nRequest[\"Incoming HTTP Request\"]\nValidator[\"express-validator&lt;br&gt;Input Sanitization\"]\nSession[\"express-session&lt;br&gt;Session Verification\"]\nAuth[\"estaAutenticado&lt;br&gt;Login Check\"]\nRoleCheck[\"isAdmin / isRegistrado&lt;br&gt;Role Verification\"]\nBcrypt[\"bcryptjs&lt;br&gt;Password Hashing\"]\nParameterized[\"Parameterized Queries&lt;br&gt;SQL Injection Prevention\"]\nControllers[\"Controller Functions\"]\nDatabase[\"MySQL Database\"]\n\nRequest --&gt; Validator\nValidator --&gt; Session\nAuth --&gt; RoleCheck\nRoleCheck --&gt; Controllers\nControllers --&gt; Bcrypt\nControllers --&gt; Parameterized\nParameterized --&gt; Database\nBcrypt --&gt; Database\n\nsubgraph subGraph4 [\"Layer 5: Application Logic\"]\n    Controllers\n    Database\nend\n\nsubgraph subGraph3 [\"Layer 4: Data Protection\"]\n    Bcrypt\n    Parameterized\nend\n\nsubgraph subGraph2 [\"Layer 3: Authorization\"]\n    RoleCheck\nend\n\nsubgraph subGraph1 [\"Layer 2: Authentication\"]\n    Session\n    Auth\n    Session --&gt; Auth\nend\n\nsubgraph subGraph0 [\"Layer 1: Input Validation\"]\n    Validator\nend</code></pre> <p>Sources: routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p> <p>package.json L13-L25</p>"},{"location":"Security-Considerations/#password-security-with-bcryptjs","title":"Password Security with bcryptjs","text":"<p>The system uses <code>bcryptjs</code> version 3.0.2 to securely hash passwords before storage, preventing plaintext password exposure in case of database compromise.</p>"},{"location":"Security-Considerations/#password-hashing-implementation","title":"Password Hashing Implementation","text":"Operation Function Salt Rounds Location Registration <code>bcrypt.hash()</code> 8 routes/auth.js L44 Login Verification <code>bcrypt.compare()</code> N/A routes/auth.js L86"},{"location":"Security-Considerations/#registration-password-flow","title":"Registration Password Flow","text":"<pre><code>sequenceDiagram\n  participant User\n  participant POST /register\n  participant routes/auth.js\n  participant bcryptjs.hash()\n  participant MySQL Database\n\n  User-&gt;&gt;POST /register: \"Submit password\"\n  POST /register-&gt;&gt;POST /register: \"Validate input\n  POST /register-&gt;&gt;bcryptjs.hash(): express-validator\"\n  bcryptjs.hash()-&gt;&gt;bcryptjs.hash(): \"hash(password, 8)\"\n  bcryptjs.hash()-&gt;&gt;POST /register: \"Generate salt\n  POST /register-&gt;&gt;MySQL Database: Apply 8 rounds\"\n  MySQL Database-&gt;&gt;POST /register: \"Return hashed password\"\n  POST /register-&gt;&gt;User: \"INSERT usuarios</code></pre> <p>Password Hashing Code:</p> <pre><code>\n</code></pre> <p>Located at routes/auth.js L44</p> <p>Salt Rounds: The system uses 8 salt rounds, which provides a balance between security and performance. This is configured at hash time and cannot be modified without re-hashing all passwords.</p>"},{"location":"Security-Considerations/#login-password-verification","title":"Login Password Verification","text":"<pre><code>flowchart TD\n\nStart[\"POST /auth&lt;br&gt;Login Request\"]\nQuery[\"Query usuarios&lt;br&gt;WHERE email = ?\"]\nCheckExists[\"User exists?\"]\nComparePass[\"bcrypt.compare()&lt;br&gt;plaintext vs hash\"]\nPasswordMatch[\"Passwords match?\"]\nCreateSession[\"Create session&lt;br&gt;req.session.loggedin = true\"]\nSuccess[\"Render success alert&lt;br&gt;Redirect to home\"]\nError[\"Render error alert&lt;br&gt;Usuario y/o contrase\u00f1a incorrectos\"]\n\nStart --&gt; Query\nQuery --&gt; CheckExists\nCheckExists --&gt; Error\nCheckExists --&gt; ComparePass\nComparePass --&gt; PasswordMatch\nPasswordMatch --&gt; Error\nPasswordMatch --&gt; CreateSession\nCreateSession --&gt; Success</code></pre> <p>Password Comparison Code:</p> <pre><code>\n</code></pre> <p>Located at routes/auth.js L85-L87</p> <p>Security Considerations:</p> <ul> <li>Passwords are never stored in plaintext</li> <li>Password hashes are one-way; original passwords cannot be recovered</li> <li>Failed login attempts provide generic error messages to prevent user enumeration</li> <li>Timing attacks are mitigated by bcrypt's constant-time comparison</li> </ul> <p>Sources: routes/auth.js L44</p> <p>routes/auth.js L85-L87</p> <p>package.json L14</p>"},{"location":"Security-Considerations/#input-validation-with-express-validator","title":"Input Validation with express-validator","text":"<p>The system uses <code>express-validator</code> version 7.2.1 to sanitize and validate all user inputs on registration, preventing injection attacks and ensuring data integrity.</p>"},{"location":"Security-Considerations/#validation-rules-configuration","title":"Validation Rules Configuration","text":"<pre><code>flowchart TD\n\nP1[\"body('password')\"]\nInput[\"User Input\"]\nN1[\"body('nombre')\"]\nN2[\"exists()\"]\nN3[\"isLength min: 3\"]\nE1[\"body('email')\"]\nE2[\"exists()\"]\nE3[\"isEmail()\"]\nP2[\"exists()\"]\nP3[\"isLength min: 4\"]\nResult[\"validationResult()\"]\n\nsubgraph subGraph3 [\"Registration Validation Chain\"]\n    Input\n    Result\n    Input --&gt; N1\n    Input --&gt; E1\n    Input --&gt; P1\n    N3 --&gt; Result\n    E3 --&gt; Result\n    P3 --&gt; Result\n\nsubgraph subGraph2 [\"Field: password\"]\n    P1\n    P2\n    P3\n    P1 --&gt; P2\n    P2 --&gt; P3\nend\n\nsubgraph subGraph1 [\"Field: email\"]\n    E1\n    E2\n    E3\n    E1 --&gt; E2\n    E2 --&gt; E3\nend\n\nsubgraph subGraph0 [\"Field: nombre\"]\n    N1\n    N2\n    N3\n    N1 --&gt; N2\n    N2 --&gt; N3\nend\nend</code></pre>"},{"location":"Security-Considerations/#validation-rule-table","title":"Validation Rule Table","text":"Field Validators Constraint Error Message <code>nombre</code> <code>exists()</code>, <code>isLength()</code> min: 3 characters \"El nombre debe tener al menos 3 caracteres\" <code>email</code> <code>exists()</code>, <code>isEmail()</code> Valid email format \"El email debe ser v\u00e1lido\" <code>password</code> <code>exists()</code>, <code>isLength()</code> min: 4 characters \"La contrase\u00f1a debe tener al menos 4 caracteres\" <p>Validation Middleware Chain: Located at routes/auth.js L17-L33</p> <p>Validation Execution:</p> <pre><code>\n</code></pre> <p>Located at routes/auth.js L35-L40</p>"},{"location":"Security-Considerations/#validation-flow","title":"Validation Flow","text":"<pre><code>sequenceDiagram\n  participant Client\n  participant express-validator\n  participant Middleware Array\n  participant Route Handler\n  participant register.ejs\n\n  Client-&gt;&gt;express-validator: \"POST /register\n  express-validator-&gt;&gt;express-validator: with form data\"\n  express-validator-&gt;&gt;express-validator: \"body('nombre').isLength({min:3})\"\n  express-validator-&gt;&gt;express-validator: \"body('email').isEmail()\"\n  express-validator-&gt;&gt;Route Handler: \"body('password').isLength({min:4})\"\n  Route Handler-&gt;&gt;Route Handler: \"Pass to handler\n  loop [\"Validation errors exist\"]\n    Route Handler-&gt;&gt;register.ejs: with results\"\n    register.ejs-&gt;&gt;Client: \"validationResult(req)\"\n    Route Handler-&gt;&gt;Route Handler: \"Render with errors\n  end</code></pre> <p>Security Benefits:</p> <ul> <li>Prevents malformed data from reaching the database</li> <li>Protects against XSS by sanitizing inputs</li> <li>Enforces business logic constraints at the input layer</li> <li>Provides user-friendly error messages without exposing system details</li> </ul> <p>Sources: routes/auth.js L17-L40</p> <p>package.json L21</p>"},{"location":"Security-Considerations/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>All database queries use parameterized queries (prepared statements) to prevent SQL injection attacks. The system never concatenates user input directly into SQL strings.</p>"},{"location":"Security-Considerations/#parameterized-query-pattern","title":"Parameterized Query Pattern","text":"<pre><code>flowchart TD\n\nUserInput[\"User Input&lt;br&gt;e.g., email, id\"]\nUnsafe[\"'SELECT * FROM usuarios&lt;br&gt;WHERE email = ' + email\"]\nUnsafeResult[\"\u274c Vulnerable to SQL Injection\"]\nSafe[\"'SELECT * FROM usuarios&lt;br&gt;WHERE email = ?'\"]\nParams[\"[email]\"]\nSafeResult[\"\u2713 SQL Injection Protected\"]\n\nUserInput --&gt; Unsafe\nUserInput --&gt; Safe\nUserInput --&gt; Params\n\nsubgraph subGraph1 [\"SAFE: Parameterized Query\"]\n    Safe\n    Params\n    SafeResult\n    Safe --&gt; SafeResult\n    Params --&gt; SafeResult\nend\n\nsubgraph subGraph0 [\"UNSAFE: String Concatenation\"]\n    Unsafe\n    UnsafeResult\n    Unsafe --&gt; UnsafeResult\nend</code></pre>"},{"location":"Security-Considerations/#parameterized-query-examples-by-operation","title":"Parameterized Query Examples by Operation","text":"Operation SQL Statement Parameters File Location User Registration <code>INSERT INTO usuarios SET ?</code> <code>{nombre, email, password, rol}</code> routes/auth.js L46-L52 User Authentication <code>SELECT * FROM usuarios WHERE email = ?</code> <code>[email]</code> routes/auth.js L82-L83 Course Retrieval <code>SELECT * FROM cursos WHERE id = ?</code> <code>[id]</code> routes/courses.js L77 Course Deletion <code>DELETE FROM cursos WHERE id = ?</code> <code>[id]</code> routes/courses.js L91 Check Enrollment <code>SELECT * FROM inscripciones WHERE id_usuario = ? AND id_curso = ?</code> <code>[id_usuario, id_curso]</code> routes/courses.js L122-L123 Insert Enrollment <code>INSERT INTO inscripciones (id_usuario, id_curso) VALUES (?, ?)</code> <code>[id_usuario, id_curso]</code> routes/courses.js L136-L137 User Profile Courses <code>SELECT c.* FROM cursos c JOIN inscripciones i ON c.id = i.id_curso WHERE i.id_usuario = ?</code> <code>[idUsuario]</code> routes/courses.js L155-L160"},{"location":"Security-Considerations/#query-execution-pattern","title":"Query Execution Pattern","text":"<p>All queries follow this secure pattern:</p> <p>Example from Authentication:</p> <p>Located at routes/auth.js L81-L84</p> <p>Example from Enrollment Check:</p> <p>Located at routes/courses.js L121-L128</p> <p>Security Benefits:</p> <ul> <li>Database driver automatically escapes parameter values</li> <li>Prevents injection of malicious SQL commands</li> <li>Separates data from code at the protocol level</li> <li>Works with all database operations (SELECT, INSERT, UPDATE, DELETE)</li> </ul> <p>Sources: routes/auth.js L46-L69</p> <p>routes/auth.js L81-L118</p> <p>routes/courses.js L77</p> <p>routes/courses.js L91</p> <p>routes/courses.js L121-L137</p> <p>routes/courses.js L155-L160</p>"},{"location":"Security-Considerations/#session-security","title":"Session Security","text":"<p>The system uses <code>express-session</code> version 1.18.2 for server-side session management, storing sensitive user state on the server rather than in client-side cookies.</p>"},{"location":"Security-Considerations/#session-configuration","title":"Session Configuration","text":"<p>The session is initialized in app.js</p> <p>with the following properties stored:</p> <ul> <li><code>req.session.loggedin</code> - Boolean indicating authentication status</li> <li><code>req.session.usuario</code> - User object containing id, nombre, email, rol</li> <li><code>req.session.rol</code> - User role string ('publico', 'registrado', 'admin')</li> </ul>"},{"location":"Security-Considerations/#session-lifecycle","title":"Session Lifecycle","text":""},{"location":"Security-Considerations/#session-creation-code","title":"Session Creation Code","text":"<p>Login Success:</p> <p>Located at routes/auth.js L100-L104</p> <p>Logout:</p> <p>Located at routes/auth.js L135</p>"},{"location":"Security-Considerations/#session-security-features","title":"Session Security Features","text":"Feature Implementation Security Benefit Server-side storage Session data stored on server Prevents client tampering with session data Session cookies HTTPOnly cookies (via express-session) Prevents XSS attacks from stealing session IDs Session destruction <code>req.session.destroy()</code> Properly terminates sessions on logout Session validation Checked by <code>estaAutenticado</code> middleware Prevents unauthorized access to protected routes <p>Sources: routes/auth.js L100-L104</p> <p>routes/auth.js L135</p> <p>package.json L20</p>"},{"location":"Security-Considerations/#authentication-middleware","title":"Authentication Middleware","text":"<p>The <code>estaAutenticado</code> middleware function enforces authentication requirements on protected routes by verifying session state before allowing access.</p>"},{"location":"Security-Considerations/#authentication-middleware-implementation","title":"Authentication Middleware Implementation","text":"<p>Middleware Code:</p> <p>Located at routes/courses.js L8-L14</p>"},{"location":"Security-Considerations/#protected-routes-using-estaautenticado","title":"Protected Routes Using estaAutenticado","text":"Route Method Additional Middleware Purpose <code>/create</code> GET <code>isAdmin</code> Course creation form <code>/save</code> POST <code>isAdmin</code> Save new course <code>/edit/:id</code> GET <code>isAdmin</code> Course edit form <code>/update</code> POST <code>isAdmin</code> Update course <code>/delete/:id</code> GET <code>isAdmin</code> Delete course <code>/inscribir/:id</code> GET <code>isRegistrado</code> Enrollment confirmation <code>/inscribir/:id</code> POST <code>isRegistrado</code> Process enrollment <code>/perfil</code> GET <code>isRegistrado</code> User profile <code>/admin/perfil</code> GET <code>isAdmin</code> Admin dashboard <p>Example Route Protection:</p> <pre><code>\n</code></pre> <p>Located at routes/courses.js L64-L66</p> <p>Security Benefits:</p> <ul> <li>Centralized authentication logic prevents code duplication</li> <li>Consistent security checks across all protected routes</li> <li>Clear separation between authentication (logged in) and authorization (role check)</li> <li>Graceful redirect to login page for unauthenticated users</li> </ul> <p>Sources: routes/courses.js L8-L14</p> <p>routes/courses.js L64-L103</p> <p>routes/courses.js L106-L149</p> <p>routes/courses.js L152-L185</p>"},{"location":"Security-Considerations/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>The system implements three distinct user roles with progressively higher privileges, enforced through dedicated middleware functions.</p>"},{"location":"Security-Considerations/#role-hierarchy","title":"Role Hierarchy","text":""},{"location":"Security-Considerations/#role-enforcement-middleware","title":"Role Enforcement Middleware","text":"<p>Admin Middleware:</p> <p>Located at routes/courses.js L16-L24</p> <p>Registrado Middleware:</p> <p>Located at routes/courses.js L26-L33</p>"},{"location":"Security-Considerations/#role-assignment","title":"Role Assignment","text":"<p>Roles are assigned during registration with a default fallback:</p> <p>Located at routes/auth.js L46-L52</p> <p>Default Role: Users registered through the normal registration flow receive the <code>'registrado'</code> role by default.</p>"},{"location":"Security-Considerations/#role-based-course-visibility","title":"Role-Based Course Visibility","text":"<p>Dynamic Query Code:</p> <p>Located at routes/courses.js L36-L61</p>"},{"location":"Security-Considerations/#middleware-chain-examples","title":"Middleware Chain Examples","text":"<p>Admin-Only Route:</p> <pre><code>GET /create \u2192 estaAutenticado \u2192 isAdmin \u2192 Route Handler\n</code></pre> <p>Registrado-Only Route:</p> <pre><code>POST /inscribir/:id \u2192 estaAutenticado \u2192 isRegistrado \u2192 Route Handler\n</code></pre> <p>Security Benefits:</p> <ul> <li>Fine-grained access control based on user roles</li> <li>Principle of least privilege: users only access features appropriate to their role</li> <li>Multiple middleware layers prevent authorization bypass</li> <li>Role stored in session prevents client-side tampering</li> <li>Consistent role checking across all protected routes</li> </ul> <p>Sources: routes/courses.js L16-L33</p> <p>routes/courses.js L36-L61</p> <p>routes/courses.js L64-L185</p> <p>routes/auth.js L46-L52</p>"},{"location":"Security-Considerations/#enrollment-security","title":"Enrollment Security","text":"<p>The enrollment system implements duplicate prevention to ensure data integrity and prevent users from enrolling in the same course multiple times.</p>"},{"location":"Security-Considerations/#duplicate-enrollment-prevention-flow","title":"Duplicate Enrollment Prevention Flow","text":"<p>Duplicate Check Code:</p> <p>Located at routes/courses.js L121-L148</p>"},{"location":"Security-Considerations/#enrollment-security-checks","title":"Enrollment Security Checks","text":"Security Check Implementation Purpose Authentication <code>estaAutenticado</code> middleware Verify user is logged in Authorization <code>isRegistrado</code> middleware Verify user has 'registrado' role Session validation <code>req.session.usuario.id</code> Get authenticated user's ID Duplicate prevention <code>SELECT</code> query before <code>INSERT</code> Prevent multiple enrollments Parameterized queries <code>[id_usuario, id_curso]</code> Prevent SQL injection <p>Security Benefits:</p> <ul> <li>Users cannot enroll multiple times in the same course</li> <li>Only authenticated registered users can enroll</li> <li>User ID taken from session, not client input (prevents enrollment as another user)</li> <li>All database operations use parameterized queries</li> <li>Error handling redirects gracefully without exposing system details</li> </ul> <p>Sources: routes/courses.js L106-L149</p>"},{"location":"Security-Considerations/#security-best-practices-summary","title":"Security Best Practices Summary","text":""},{"location":"Security-Considerations/#implemented-security-measures","title":"Implemented Security Measures","text":""},{"location":"Security-Considerations/#security-checklist","title":"Security Checklist","text":"Category Security Measure Status Implementation Passwords Never stored in plaintext \u2713 bcryptjs hashing with 8 rounds Passwords Secure comparison \u2713 <code>bcrypt.compare()</code> constant-time Input All inputs validated \u2713 express-validator on registration Input SQL injection prevention \u2713 Parameterized queries exclusively Sessions Server-side storage \u2713 express-session with secure defaults Sessions Proper logout \u2713 <code>req.session.destroy()</code> Authentication Centralized middleware \u2713 <code>estaAutenticado</code> function Authorization Role-based access \u2713 <code>isAdmin</code>, <code>isRegistrado</code> middleware Authorization Principle of least privilege \u2713 Three-tier role system Data User enumeration prevention \u2713 Generic error messages Data Duplicate prevention \u2713 Check before insert (enrollments) Errors No sensitive info exposure \u2713 Generic user-facing messages"},{"location":"Security-Considerations/#recommended-additional-measures","title":"Recommended Additional Measures","text":"<p>The following security enhancements are recommended for production deployment:</p> <ol> <li>HTTPS Enforcement: Configure Express to redirect HTTP to HTTPS</li> <li>CSRF Protection: Add <code>csurf</code> middleware for state-changing operations</li> <li>Rate Limiting: Implement rate limiting on login and registration routes</li> <li>Helmet.js: Add security headers with <code>helmet</code> middleware</li> <li>Session Configuration: * Set <code>secure: true</code> for session cookies (HTTPS only) * Set <code>httpOnly: true</code> to prevent XSS cookie theft * Configure appropriate <code>maxAge</code> for session expiration</li> <li>Password Policy: Increase minimum password length to 8+ characters</li> <li>Account Lockout: Implement temporary lockout after failed login attempts</li> <li>Audit Logging: Log authentication events and admin actions</li> <li>Input Validation: Extend validation to all routes, not just registration</li> <li>Database Credentials: Ensure database passwords are strong and stored only in environment variables</li> </ol> <p>Sources: routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p> <p>package.json L13-L25</p>"},{"location":"Security-Considerations/#code-entity-reference","title":"Code Entity Reference","text":""},{"location":"Security-Considerations/#security-related-functions","title":"Security-Related Functions","text":"Function Name Purpose Location Parameters <code>estaAutenticado</code> Verify user is logged in routes/courses.js L8-L14 <code>req, res, next</code> <code>isAdmin</code> Verify user has admin role routes/courses.js L16-L24 <code>req, res, next</code> <code>isRegistrado</code> Verify user has registrado role routes/courses.js L26-L33 <code>req, res, next</code> <code>bcrypt.hash</code> Hash password with salt routes/auth.js L44 <code>password, saltRounds</code> <code>bcrypt.compare</code> Compare password with hash routes/auth.js L86 <code>password, hash</code> <code>validationResult</code> Extract validation errors routes/auth.js L35 <code>req</code> <code>req.session.destroy</code> Terminate user session routes/auth.js L135 <code>callback</code>"},{"location":"Security-Considerations/#security-related-modules","title":"Security-Related Modules","text":"Module Version Purpose Configuration Location <code>bcryptjs</code> 3.0.2 Password hashing package.json L14 <code>express-validator</code> 7.2.1 Input validation package.json L21 <code>express-session</code> 1.18.2 Session management package.json L20 <code>jsonwebtoken</code> 9.0.2 JWT token generation package.json L22 <code>cookie-parser</code> 1.4.7 Cookie parsing package.json L15 <code>mysql2</code> 3.14.3 Parameterized queries package.json L23 <p>Sources: routes/auth.js L1-L139</p> <p>routes/courses.js L1-L187</p> <p>package.json L13-L25</p>"},{"location":"Session-Management/","title":"Session Management","text":"<p>Relevant source files * app.js * routes/auth.js * routes/index.js</p>"},{"location":"Session-Management/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the session management implementation in the course management system, explaining how user state is maintained across HTTP requests using the <code>express-session</code> middleware. This includes session configuration, storage, creation during authentication, access patterns in route handlers, and session destruction on logout.</p> <p>For information about the authentication process that creates sessions, see User Login. For details on role-based access control using session data, see Role-Based Access Control.</p>"},{"location":"Session-Management/#session-configuration","title":"Session Configuration","text":"<p>The application configures session management in app.js L4-L13</p> <p>using the <code>express-session</code> middleware. This configuration establishes the foundation for maintaining user state throughout the application.</p> <pre><code>Key Configuration Parameters:\n</code></pre> Parameter Value Purpose <code>secret</code> <code>\"secret\"</code> Cryptographic key used to sign the session ID cookie <code>resave</code> <code>false</code> Prevents session resaving if unmodified <code>saveUninitialized</code> <code>false</code> Prevents storing empty sessions <p>The <code>secret</code> parameter in app.js L8</p> <p>is used to sign the session ID cookie, preventing tampering. In production environments, this should be loaded from environment variables rather than hardcoded. The <code>resave: false</code> configuration in app.js L9</p> <p>prevents unnecessary writes to the session store when session data hasn't changed, improving performance. The <code>saveUninitialized: false</code> setting in app.js L10</p> <p>ensures that sessions are only created when data is actually stored, reducing storage overhead and complying with privacy regulations.</p> <p>Sources: app.js L4-L13</p>"},{"location":"Session-Management/#session-lifecycle","title":"Session Lifecycle","text":"<p>The following diagram illustrates the complete lifecycle of a session from creation through destruction:</p> <p>Session Lifecycle Flow</p> <pre><code>stateDiagram-v2\n    [*] --&gt; NoSession : \"User visits application\"\n    NoSession --&gt; SessionCreated : \"POST /auth (successful login)\"\n    SessionCreated --&gt; SessionActive : \"Session data stored\"\n    SessionActive --&gt; SessionAccessed : \"Session data read/modified\"\n    SessionAccessed --&gt; SessionActive : \"Session data read/modified\"\n    SessionActive --&gt; SessionDestroyed : \"POST /logout\"\n    SessionDestroyed --&gt; [*] : \"Session cleared\"</code></pre> <p>Sources: routes/auth.js L75-L136</p> <p>routes/index.js L6-L14</p>"},{"location":"Session-Management/#session-creation-during-authentication","title":"Session Creation During Authentication","text":"<p>Sessions are created when a user successfully authenticates through the <code>/auth</code> endpoint. The authentication handler in routes/auth.js L75-L131</p> <p>performs credential validation and establishes the session.</p>"},{"location":"Session-Management/#authentication-process","title":"Authentication Process","text":"<p>When a user submits login credentials via <code>POST /auth</code>, the following sequence occurs:</p> <ol> <li>Credential Extraction: Email and password are extracted from <code>req.body</code> in routes/auth.js L77-L78</li> <li>Database Lookup: User record is queried from the <code>usuarios</code> table in routes/auth.js L81-L84</li> <li>Password Verification: The submitted password is compared against the stored hash using <code>bcrypt.compare()</code> in routes/auth.js L86</li> <li>Session Initialization: Upon successful authentication, session properties are set in routes/auth.js L102-L104</li> </ol>"},{"location":"Session-Management/#session-data-storage","title":"Session Data Storage","text":"<p>The session object stores three critical pieces of information:</p> <pre><code>Session Data Structure:\n</code></pre> Property Type Set At Purpose <code>req.session.loggedin</code> <code>boolean</code> routes/auth.js L102 Indicates active authentication status <code>req.session.usuario</code> <code>object</code> routes/auth.js L103 Complete user record from database <code>req.session.rol</code> <code>string</code> routes/auth.js L104 User role ('registrado' or 'admin') <p>The <code>usuario</code> object stored in routes/auth.js L103</p> <p>contains all fields from the <code>usuarios</code> table including <code>id</code>, <code>nombre</code>, <code>email</code>, <code>password</code> (hashed), and <code>rol</code>. This allows routes to access user information without additional database queries.</p> <p>Sources: routes/auth.js L75-L116</p>"},{"location":"Session-Management/#session-access-patterns","title":"Session Access Patterns","text":"<p>Once a session is established, route handlers access session data through the <code>req.session</code> object. This section documents common access patterns throughout the application.</p>"},{"location":"Session-Management/#basic-session-reading","title":"Basic Session Reading","text":"<p>The index route demonstrates simple session access in routes/index.js L6-L14</p> <p>:</p> <p>Session Access Flow in Index Route</p> <pre><code>flowchart TD\n\nA[\"GET / Request\"]\nB[\"Read req.session.usuario\"]\nC[\"usuario exists?\"]\nD[\"Extract usuario.nombre\"]\nE[\"Set name = 'Invitado'\"]\nF[\"Read req.session.loggedin\"]\nG[\"Render index.ejs with data\"]\n\nA --&gt; B\nB --&gt; C\nC --&gt; D\nC --&gt; E\nD --&gt; F\nE --&gt; F\nF --&gt; G</code></pre> <p>The pattern shown in routes/index.js L7</p> <p>demonstrates safe session access using the optional chaining equivalent: <code>const usuario = req.session.usuario;</code>. The ternary operator in routes/index.js L13</p> <p>provides a fallback value when no session exists: <code>name: usuario ? usuario.nombre : \"Invitado\"</code>.</p>"},{"location":"Session-Management/#session-based-conditionals","title":"Session-Based Conditionals","text":"<p>Routes use session data to determine application behavior. The login status check in routes/index.js L12</p> <p>uses the pattern <code>req.session.loggedin || false</code> to provide a default value when the session property is undefined.</p> <p>Sources: routes/index.js L6-L14</p>"},{"location":"Session-Management/#session-persistence-across-requests","title":"Session Persistence Across Requests","text":"<p>The session middleware automatically handles cookie management and session persistence. Each HTTP request includes the session ID cookie, which the middleware uses to retrieve stored session data.</p> <p>Session Request Flow</p> <pre><code>sequenceDiagram\n  participant Browser\n  participant express-session middleware\n  participant Session Store (memory)\n  participant Route Handler\n\n  Browser-&gt;&gt;express-session middleware: \"HTTP Request with session cookie\"\n  express-session middleware-&gt;&gt;Session Store (memory): \"Lookup session by ID\"\n  Session Store (memory)-&gt;&gt;express-session middleware: \"Return session data\"\n  express-session middleware-&gt;&gt;Route Handler: \"Populate req.session\"\n  Route Handler-&gt;&gt;Route Handler: \"Access req.session.usuario\"\n  Route Handler-&gt;&gt;Route Handler: \"Access req.session.loggedin\"\n  Route Handler-&gt;&gt;Route Handler: \"Access req.session.rol\"\n  Route Handler-&gt;&gt;Browser: \"HTTP Response\"\n  Browser-&gt;&gt;Browser: \"Store session cookie\"\n  note over express-session middleware,Session Store (memory): \"Session configured in app.js:6-13\"\n  note over Route Handler: \"Session accessed in routes/index.js:7-13\"</code></pre> <p>The middleware configured in app.js L6-L13</p> <p>intercepts every incoming request before it reaches route handlers. The session ID is extracted from the cookie, the corresponding session data is retrieved from the store, and the data is attached to <code>req.session</code>.</p>"},{"location":"Session-Management/#session-store","title":"Session Store","text":"<p>By default, <code>express-session</code> uses <code>MemoryStore</code>, which stores session data in application memory. This configuration is suitable for development but has limitations:</p> <ul> <li>Session data is lost when the server restarts</li> <li>Does not scale across multiple server instances</li> <li>Memory consumption grows with active sessions</li> </ul> <p>For production deployments, a persistent session store (e.g., Redis, MongoDB) should be configured.</p> <p>Sources: app.js L4-L13</p>"},{"location":"Session-Management/#session-destruction","title":"Session Destruction","text":"<p>Sessions are destroyed when users log out via the <code>POST /logout</code> endpoint defined in routes/auth.js L134-L136</p>"},{"location":"Session-Management/#logout-implementation","title":"Logout Implementation","text":"<p>The logout handler uses a single method call to completely destroy the session:</p> <pre><code>Method: req.session.destroy(callback)\n</code></pre> <p>The implementation in routes/auth.js L135</p> <p>calls <code>req.session.destroy()</code> with a callback that redirects the user to the home page: <code>req.session.destroy(() =&gt; res.redirect('/'))</code>.</p> <p>Logout Flow</p> <pre><code>flowchart TD\n\nA[\"POST /logout Request\"]\nB[\"req.session.destroy()\"]\nC[\"Remove session from store\"]\nD[\"Clear session cookie\"]\nE[\"Execute callback\"]\nF[\"res.redirect('/')\"]\nG[\"User redirected to home\"]\n\nA --&gt; B\nB --&gt; C\nC --&gt; D\nD --&gt; E\nE --&gt; F\nF --&gt; G</code></pre> <p>After <code>req.session.destroy()</code> executes:</p> <ul> <li>All session data is removed from the session store</li> <li>The session cookie is invalidated</li> <li>Subsequent requests will have an empty <code>req.session</code> object</li> <li>The user must authenticate again to create a new session</li> </ul> <p>Sources: routes/auth.js L134-L136</p>"},{"location":"Session-Management/#session-data-structure-reference","title":"Session Data Structure Reference","text":"<p>The following table provides a comprehensive reference of all session properties used throughout the application:</p> Property Path Data Type Possible Values Set By Used By <code>req.session.loggedin</code> <code>boolean</code> <code>true</code>, <code>undefined</code> routes/auth.js L102 routes/index.js L12 <code>req.session.usuario</code> <code>object</code> User record, <code>undefined</code> routes/auth.js L103 routes/index.js L7-L13 <code>req.session.usuario.id</code> <code>number</code> User ID routes/auth.js L103 Role middleware <code>req.session.usuario.nombre</code> <code>string</code> User's name routes/auth.js L103 routes/index.js L13 <code>req.session.usuario.email</code> <code>string</code> User's email routes/auth.js L103 Various routes <code>req.session.usuario.rol</code> <code>string</code> <code>'registrado'</code>, <code>'admin'</code> routes/auth.js L103 Role middleware <code>req.session.rol</code> <code>string</code> <code>'registrado'</code>, <code>'admin'</code>, <code>undefined</code> routes/auth.js L104 Role middleware <p>Note: The <code>req.session.usuario.rol</code> and <code>req.session.rol</code> properties are redundant, as both store the same role value. The latter is set explicitly in routes/auth.js L104</p> <p>for convenience.</p> <p>Sources: routes/auth.js L100-L104</p> <p>routes/index.js L7-L13</p>"},{"location":"Session-Management/#session-security-considerations","title":"Session Security Considerations","text":""},{"location":"Session-Management/#session-secret-management","title":"Session Secret Management","text":"<p>The session secret in app.js L8</p> <p>is currently hardcoded as <code>\"secret\"</code>. In production environments, this should be:</p> <ul> <li>Generated using a cryptographically secure random number generator</li> <li>Stored in environment variables via the <code>.env</code> file</li> <li>Rotated periodically for enhanced security</li> </ul>"},{"location":"Session-Management/#cookie-security","title":"Cookie Security","text":"<p>The current session configuration does not specify cookie security options. Production deployments should configure:</p> <ul> <li><code>cookie.secure: true</code> - Ensures cookies are only sent over HTTPS</li> <li><code>cookie.httpOnly: true</code> - Prevents client-side JavaScript access to cookies</li> <li><code>cookie.maxAge</code> - Sets cookie expiration time</li> <li><code>cookie.sameSite: 'strict'</code> - Protects against CSRF attacks</li> </ul>"},{"location":"Session-Management/#session-fixation-prevention","title":"Session Fixation Prevention","text":"<p>The application does not regenerate session IDs after login. To prevent session fixation attacks, consider implementing <code>req.session.regenerate()</code> after successful authentication.</p> <p>Sources: app.js L6-L13</p>"},{"location":"Session-Management/#integration-with-middleware","title":"Integration with Middleware","text":"<p>Session data is consumed by authentication and authorization middleware throughout the application. These middleware functions check session properties to enforce access control.</p> <p>Middleware Session Dependencies</p> <pre><code>flowchart TD\n\nA[\"express-session middleware\"]\nB[\"req.session populated\"]\nC[\"estaAutenticado middleware\"]\nD[\"isRegistrado middleware\"]\nE[\"isAdmin middleware\"]\nF[\"req.session.loggedin === true?\"]\nG[\"Allow access\"]\nH[\"Redirect to /login\"]\nI[\"req.session.rol === 'registrado'?\"]\nJ[\"Allow access\"]\nK[\"Return 403 Forbidden\"]\nL[\"req.session.rol === 'admin'?\"]\nM[\"Allow access\"]\nN[\"Return 403 Forbidden\"]\n\nA --&gt; B\nB --&gt; C\nB --&gt; D\nB --&gt; E\nC --&gt; F\nF --&gt; G\nF --&gt; H\nD --&gt; I\nI --&gt; J\nI --&gt; K\nE --&gt; L\nL --&gt; M\nL --&gt; N</code></pre> <p>For detailed information on how these middleware functions use session data for access control, see Role-Based Access Control.</p> <p>Sources: app.js L4-L13</p> <p>routes/auth.js L102-L104</p>"},{"location":"Styling-System/","title":"Styling System","text":"<p>Relevant source files * public/css/header.css * public/css/index.css * public/css/inscripcion.css * public/css/login.css * public/css/register.css</p>"},{"location":"Styling-System/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the CSS architecture for the course management system, including the organization of stylesheets, styling patterns, responsive design implementation, and the integration with Bootstrap and Boxicons. The styling system uses page-specific CSS files with shared navigation components and consistent theming across the application.</p> <p>For information about the EJS templates that these styles are applied to, see Template System &amp; Partials. For details on specific page layouts, see Authentication Views and Course Views.</p>"},{"location":"Styling-System/#css-architecture-overview","title":"CSS Architecture Overview","text":"<p>The styling system is organized around page-specific stylesheets with some shared styling patterns, particularly for navigation components. Each major view has its own CSS file in the <code>public/css/</code> directory.</p>"},{"location":"Styling-System/#css-file-structure-diagram","title":"CSS File Structure Diagram","text":"<pre><code>flowchart TD\n\nheader[\"header.css&lt;br&gt;(Navigation + Sections)\"]\nindex[\"index.css&lt;br&gt;(Landing Page)\"]\nlogin[\"login.css&lt;br&gt;(Login Form)\"]\nregister[\"register.css&lt;br&gt;(Registration Form)\"]\ninscripcion[\"inscripcion.css&lt;br&gt;(Enrollment Confirmation)\"]\nindexView[\"views/index.ejs\"]\nloginView[\"views/login.ejs\"]\nregisterView[\"views/register.ejs\"]\ncoursesView[\"views/courses.ejs\"]\ninscribirView[\"views/inscribir.ejs\"]\nbootstrap[\"Bootstrap 5.3.7&lt;br&gt;(CDN)\"]\nboxicons[\"Boxicons&lt;br&gt;(Icon Library)\"]\nsweetalert[\"SweetAlert2&lt;br&gt;(Modals)\"]\n\nindexView --&gt; index\nindexView --&gt; header\nindexView --&gt; bootstrap\nindexView --&gt; boxicons\nloginView --&gt; login\nloginView --&gt; sweetalert\nregisterView --&gt; register\nregisterView --&gt; sweetalert\ncoursesView --&gt; header\ncoursesView --&gt; bootstrap\ninscribirView --&gt; inscripcion\n\nsubgraph subGraph2 [\"External Libraries\"]\n    bootstrap\n    boxicons\n    sweetalert\nend\n\nsubgraph subGraph1 [\"EJS Templates\"]\n    indexView\n    loginView\n    registerView\n    coursesView\n    inscribirView\nend\n\nsubgraph public/css/ [\"public/css/\"]\n    header\n    index\n    login\n    register\n    inscripcion\nend</code></pre> <p>Sources: public/css/header.css L1-L102</p> <p>public/css/index.css L1-L129</p> <p>public/css/login.css L1-L83</p> <p>public/css/register.css L1-L87</p> <p>public/css/inscripcion.css L1-L85</p>"},{"location":"Styling-System/#page-specific-stylesheet-organization","title":"Page-Specific Stylesheet Organization","text":"<p>The system uses a one-stylesheet-per-page pattern for major views, allowing for isolated styling concerns without conflicts.</p>"},{"location":"Styling-System/#stylesheet-mapping-table","title":"Stylesheet Mapping Table","text":"CSS File Purpose Key Elements Linked Views <code>header.css</code> Navigation bar and section layouts <code>.logo</code>, <code>.nav-links</code>, <code>.menu-btn</code> Multiple views <code>index.css</code> Landing page with gradient background <code>body</code>, <code>h2</code>, <code>p</code>, <code>nav</code> <code>views/index.ejs</code> <code>login.css</code> Login form styling <code>.auth-wrapper</code>, <code>.login-container</code> <code>views/login.ejs</code> <code>register.css</code> Registration form styling <code>.registro-container</code>, <code>.form-group</code> <code>views/register.ejs</code> <code>inscripcion.css</code> Enrollment confirmation page <code>.auth-wrapper</code>, <code>.login-container</code>, <code>.register-link</code> <code>views/inscribir.ejs</code> <p>Sources: public/css/header.css L1-L102</p> <p>public/css/index.css L1-L129</p> <p>public/css/login.css L1-L83</p> <p>public/css/register.css L1-L87</p> <p>public/css/inscripcion.css L1-L85</p>"},{"location":"Styling-System/#navigation-styling-system","title":"Navigation Styling System","text":"<p>The navigation bar styling appears in multiple CSS files with consistent patterns. The primary implementation uses a fixed-position gradient navigation bar with responsive behavior.</p>"},{"location":"Styling-System/#navigation-style-components","title":"Navigation Style Components","text":"<pre><code>flowchart TD\n\nnav[\"nav&lt;br&gt;(Container)\"]\nlogo[\".logo&lt;br&gt;(Brand)\"]\nnavLinks[\".nav-links&lt;br&gt;(Link Container)\"]\nmenuBtn[\".menu-btn&lt;br&gt;(Mobile Toggle)\"]\nlinkItems[\"a&lt;br&gt;(Navigation Items)\"]\nhoverEffect[\"a::after&lt;br&gt;(Underline Effect)\"]\n\nnav --&gt; logo\nnav --&gt; navLinks\nnav --&gt; menuBtn\nnavLinks --&gt; linkItems\nlinkItems --&gt; hoverEffect</code></pre>"},{"location":"Styling-System/#navigation-css-pattern","title":"Navigation CSS Pattern","text":"<p>The navigation bar is styled with:</p> <ul> <li>Fixed positioning at the top of the viewport public/css/index.css L56</li> <li>Gradient background from <code>#4f46e5</code> to <code>#3b82f6</code> public/css/index.css L54</li> <li>Flexbox layout for horizontal alignment public/css/index.css L60-L62</li> <li>Box shadow for depth: <code>0 4px 6px rgba(0, 0, 0, 0.1)</code> public/css/index.css L63</li> <li>z-index of 1000 to stay above content public/css/index.css L59</li> </ul>"},{"location":"Styling-System/#navigation-link-hover-effect","title":"Navigation Link Hover Effect","text":"<p>Navigation links implement a custom underline animation using CSS pseudo-elements:</p> <pre><code>.nav-links a::after {\n  content: '';\n  position: absolute;\n  width: 0%;\n  height: 2px;\n  background: white;\n  bottom: -4px;\n  left: 0;\n  transition: width 0.3s;\n}\n\n.nav-links a:hover::after {\n  width: 100%;\n}\n</code></pre> <p>This creates a left-to-right underline that expands on hover.</p> <p>Sources: public/css/index.css L52-L98</p> <p>public/css/header.css L7-L52</p>"},{"location":"Styling-System/#responsive-design-implementation","title":"Responsive Design Implementation","text":"<p>The styling system implements mobile-first responsive patterns using CSS media queries, particularly for navigation collapse.</p>"},{"location":"Styling-System/#responsive-navigation-diagram","title":"Responsive Navigation Diagram","text":"<pre><code>flowchart TD\n\nviewport[\"Screen Width\"]\ndesktop[\"Desktop Layout&lt;br&gt;.nav-links display: flex&lt;br&gt;Horizontal menu\"]\nmobile[\"Mobile Layout&lt;br&gt;.nav-links display: none&lt;br&gt;.menu-btn visible\"]\ntoggle[\"User Clicks .menu-btn\"]\nactive[\".nav-links.active&lt;br&gt;display: flex&lt;br&gt;Vertical menu\"]\nhorizontal[\"Horizontal Navigation&lt;br&gt;gap: 2rem\"]\nvertical[\"Vertical Navigation&lt;br&gt;flex-direction: column&lt;br&gt;Full width\"]\n\nviewport --&gt; desktop\nviewport --&gt; mobile\nmobile --&gt; toggle\ntoggle --&gt; active\ndesktop --&gt; horizontal\nactive --&gt; vertical</code></pre>"},{"location":"Styling-System/#mobile-menu-implementation","title":"Mobile Menu Implementation","text":"<p>At breakpoint <code>max-width: 768px</code>:</p> <ul> <li>Navigation links hidden by default public/css/header.css L69-L70</li> <li>Menu button displayed using flexbox public/css/header.css L84-L86</li> <li>Vertical layout when <code>.active</code> class is added public/css/header.css L71-L77</li> <li>Full-width dropdown positioned below header public/css/header.css L74-L77</li> </ul> <p>The <code>.menu-btn</code> consists of three horizontal bars styled as:</p> <pre><code>.menu-btn div {\n  width: 25px;\n  height: 3px;\n  background: white;\n  margin: 4px 0;\n  transition: 0.3s;\n}\n</code></pre> <p>Sources: public/css/header.css L68-L87</p> <p>public/css/index.css L100-L114</p>"},{"location":"Styling-System/#form-styling-patterns","title":"Form Styling Patterns","text":"<p>Authentication forms (login, registration, enrollment) share consistent styling patterns with centered layouts and card-like containers.</p>"},{"location":"Styling-System/#form-container-pattern","title":"Form Container Pattern","text":"<pre><code>flowchart TD\n\nwrapper[\".auth-wrapper / body&lt;br&gt;(Viewport Container)\"]\ncontainer[\".login-container /&lt;br&gt;.registro-container&lt;br&gt;(Form Card)\"]\nlayout[\"display: flex&lt;br&gt;justify-content: center&lt;br&gt;align-items: center&lt;br&gt;min-height: 100vh\"]\ngradient[\"Gradient Background\"]\ncard[\"background: white&lt;br&gt;padding: 2-2.5rem&lt;br&gt;border-radius: 15px&lt;br&gt;box-shadow\"]\ninputs[\"input fields\"]\nbuttons[\"submit button\"]\ninputStyle[\"padding: 0.75-0.9rem&lt;br&gt;border: 1px solid #ccc&lt;br&gt;border-radius: 8px&lt;br&gt;transition: border-color\"]\nbuttonStyle[\"width: 100%&lt;br&gt;padding: 0.75-0.9rem&lt;br&gt;background: gradient blue&lt;br&gt;border-radius: 8px&lt;br&gt;transition: background\"]\n\nwrapper --&gt; layout\nwrapper --&gt; gradient\ncontainer --&gt; card\ncontainer --&gt; inputs\ncontainer --&gt; buttons\ninputs --&gt; inputStyle\nbuttons --&gt; buttonStyle</code></pre>"},{"location":"Styling-System/#shared-form-styling-characteristics","title":"Shared Form Styling Characteristics","text":"Element Common Styles Purpose Container <code>background: white</code>, <code>border-radius: 15px</code>, <code>box-shadow</code> Card-like appearance Wrapper <code>display: flex</code>, <code>min-height: 100vh</code>, <code>gradient background</code> Full-screen centering Inputs <code>border-radius: 8px</code>, <code>transition: border-color 0.3s</code> Rounded, interactive fields Buttons <code>width: 100%</code>, <code>border-radius: 8px</code>, <code>cursor: pointer</code> Full-width CTAs Focus states <code>border-color</code> changes, <code>outline: none</code> Visual feedback <p>Sources: public/css/login.css L11-L47</p> <p>public/css/register.css L16-L55</p> <p>public/css/inscripcion.css L2-L45</p>"},{"location":"Styling-System/#color-schemes-and-gradients","title":"Color Schemes and Gradients","text":"<p>The application uses consistent color schemes across different pages, with gradient backgrounds being a dominant visual pattern.</p>"},{"location":"Styling-System/#color-palette-table","title":"Color Palette Table","text":"Page Background Gradient Primary Action Color Text Color Landing (<code>index.css</code>) <code>linear-gradient(135deg, #1e3c72, #2a5298)</code> <code>#ffd700</code> (hover) <code>#fff</code> Login (<code>login.css</code>) <code>linear-gradient(135deg, #74ebd5, #9face6)</code> <code>#4a6cf7</code> <code>#333</code> Registration (<code>register.css</code>) <code>linear-gradient(120deg, #3b82f6, #6366f1)</code> <code>#3b82f6</code> <code>#333</code> Enrollment (<code>inscripcion.css</code>) <code>linear-gradient(135deg, #4e73df, #1cc88a)</code> <code>#4e73df</code> <code>#333</code> Navigation (all) <code>linear-gradient(90deg, #4f46e5, #3b82f6)</code> <code>white</code> <code>white</code>"},{"location":"Styling-System/#color-theme-diagram","title":"Color Theme Diagram","text":"<pre><code>flowchart TD\n\nprimary[\"Primary Blue&lt;br&gt;#4a6cf7, #3b82f6, #4e73df\"]\nhover[\"Hover States&lt;br&gt;Darker shades&lt;br&gt;#2e59d9, #2563eb, #1e40af\"]\naccent[\"Accent Gold&lt;br&gt;#ffd700&lt;br&gt;(Landing hover)\"]\nlanding[\"Deep Blue&lt;br&gt;#1e3c72 to #2a5298\"]\nnav[\"Navigation&lt;br&gt;#4f46e5 to #3b82f6\"]\nlogin[\"Login&lt;br&gt;#74ebd5 to #9face6\"]\nregister[\"Register&lt;br&gt;#3b82f6 to #6366f1\"]\nenroll[\"Enrollment&lt;br&gt;#4e73df to #1cc88a\"]\n\nsubgraph subGraph2 [\"Action Colors\"]\n    primary\n    hover\n    accent\nend\n\nsubgraph subGraph1 [\"Landing Page Theme\"]\n    landing\nend\n\nsubgraph subGraph0 [\"Blue Theme Family\"]\n    nav\n    login\n    register\n    enroll\nend</code></pre> <p>Sources: public/css/index.css L11</p> <p>public/css/login.css L4</p> <p>public/css/register.css L8</p> <p>public/css/inscripcion.css L8</p>"},{"location":"Styling-System/#animation-and-transition-patterns","title":"Animation and Transition Patterns","text":"<p>The styling system employs CSS transitions for smooth interactive feedback and one keyframe animation for page load effects.</p>"},{"location":"Styling-System/#transition-usage-table","title":"Transition Usage Table","text":"Element Property Duration Purpose <code>.nav-links a</code> <code>color</code> <code>0.3s ease</code> Link color change <code>.nav-links a::after</code> <code>width</code> <code>0.3s</code> Underline expansion Input focus <code>border-color</code> <code>0.3s ease</code> Focus indicator Buttons <code>background-color</code> <code>0.3s</code> Hover state <code>h2</code> (landing) <code>transform</code> <code>0.3s</code> Scale on hover <code>p</code> (landing) <code>opacity</code> <code>0.3s ease</code> Opacity change Menu button bars <code>all</code> <code>0.3s</code> Hamburger animation"},{"location":"Styling-System/#landing-page-animation","title":"Landing Page Animation","text":"<p>The landing page body has a fade-in animation on load:</p> <pre><code>body {\n  animation: fadeIn 1s ease-out;\n}\n</code></pre> <p>This creates a smooth entrance effect when the page loads. The <code>fadeIn</code> animation is declared but not shown in the provided code snippets, suggesting it's either defined elsewhere or handled by external libraries.</p> <p>Interactive Elements Pattern:</p> <p>Most interactive elements follow this transition pattern:</p> <ol> <li>Default state with <code>transition</code> property</li> <li>Hover/focus state with property change</li> <li>0.3s timing for smooth feedback</li> </ol> <p>Example from heading hover public/css/index.css L27-L33</p> <p>:</p> <pre><code>h2 {\n  transition: transform 0.3s;\n}\n\nh2:hover {\n  transform: scale(1.1);\n  color: #ffd700;\n}\n</code></pre> <p>Sources: public/css/index.css L19</p> <p>public/css/index.css L27-L50</p> <p>public/css/login.css L41-L46</p> <p>public/css/register.css L49-L54</p>"},{"location":"Styling-System/#layout-patterns","title":"Layout Patterns","text":"<p>The system uses primarily Flexbox for layout management with consistent centering patterns across pages.</p>"},{"location":"Styling-System/#flexbox-layout-strategy-diagram","title":"Flexbox Layout Strategy Diagram","text":"<pre><code>flowchart TD\n\nfullscreen[\"Full-Screen Centering\"]\nfixedNav[\"Fixed Navigation\"]\nnavLayout[\"Navigation (Horizontal)\"]\nformLayout[\"Form Groups (Vertical)\"]\nflex1[\"display: flex&lt;br&gt;flex-direction: column&lt;br&gt;align-items: center&lt;br&gt;justify-content: center&lt;br&gt;min-height: 100vh\"]\nflex2[\"position: fixed&lt;br&gt;display: flex&lt;br&gt;justify-content: space-between&lt;br&gt;align-items: center\"]\nflex3[\"display: flex&lt;br&gt;gap: 2rem&lt;br&gt;(Horizontal links)\"]\nflex4[\"display: flex&lt;br&gt;flex-direction: column&lt;br&gt;(Stacked inputs)\"]\n\nfullscreen --&gt; flex1\nfixedNav --&gt; flex2\nnavLayout --&gt; flex3\nformLayout --&gt; flex4\n\nsubgraph subGraph1 [\"Component Layouts\"]\n    navLayout\n    formLayout\nend\n\nsubgraph subGraph0 [\"Viewport-Level Layouts\"]\n    fullscreen\n    fixedNav\nend</code></pre>"},{"location":"Styling-System/#common-layout-classes","title":"Common Layout Classes","text":"Pattern Implementation Used In Viewport centering <code>display: flex; align-items: center; justify-content: center; min-height: 100vh</code> Login, Register, Enrollment Fixed header <code>position: fixed; top: 0; width: 100%; z-index: 1000</code> Navigation Horizontal navigation <code>display: flex; gap: 2rem</code> <code>.nav-links</code> Vertical mobile menu <code>flex-direction: column</code> <code>.nav-links</code> (mobile) Form container <code>display: flex; flex-direction: column</code> <code>.login-container</code> <p>Sources: public/css/index.css L13-L18</p> <p>public/css/login.css L6-L8</p> <p>public/css/register.css L10-L13</p> <p>public/css/header.css L14-L16</p>"},{"location":"Styling-System/#section-styling-pattern","title":"Section Styling Pattern","text":"<p>Multiple CSS files include section styling, particularly for the landing page with alternating background colors.</p>"},{"location":"Styling-System/#section-layout","title":"Section Layout","text":"<p>Sections use consistent padding to account for the fixed navigation bar:</p> <pre><code>section {\n  padding: 100px 20px;\n  text-align: center;\n}\n</code></pre> <p>The <code>100px</code> top padding creates space below the fixed navigation public/css/header.css L90-L93</p>"},{"location":"Styling-System/#section-color-scheme","title":"Section Color Scheme","text":"Section ID Background Color Purpose <code>#inicio</code> <code>#e0f2fe</code> (light blue) Landing section <code>#registro</code> <code>#fff</code> (white) Registration section <p>This creates visual separation between different content areas on scrollable pages.</p> <p>Sources: public/css/header.css L89-L101</p> <p>public/css/index.css L115-L127</p>"},{"location":"Styling-System/#reset-and-base-styles","title":"Reset and Base Styles","text":"<p>Some CSS files include CSS resets to ensure consistent rendering across browsers.</p>"},{"location":"Styling-System/#global-reset-pattern","title":"Global Reset Pattern","text":"<pre><code>* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n</code></pre> <p>This universal selector reset appears in:</p> <ul> <li>public/css/index.css L1-L6</li> <li>public/css/register.css L1-L5</li> </ul>"},{"location":"Styling-System/#base-body-styles","title":"Base Body Styles","text":"<p>The body element typically includes:</p> <ul> <li>Font family: <code>'Segoe UI', Tahoma, Geneva, Verdana, sans-serif</code></li> <li>Background: Gradient or solid color</li> <li>Display: Flexbox for centering</li> <li>Min-height: <code>100vh</code> for full viewport height</li> </ul> <p>Sources: public/css/index.css L1-L20</p> <p>public/css/register.css L1-L14</p>"},{"location":"Styling-System/#style-to-view-integration","title":"Style-to-View Integration","text":"<p>The following diagram shows how CSS files are linked to their respective EJS templates:</p> <pre><code>flowchart TD\n\nindexEJS[\"views/index.ejs\"]\nloginEJS[\"views/login.ejs\"]\nregisterEJS[\"views/register.ejs\"]\ncoursesEJS[\"views/courses.ejs\"]\ninscribirEJS[\"views/inscribir.ejs\"]\nperfilEJS[\"views/perfil.ejs\"]\nindexCSS[\"public/css/index.css\"]\nheaderCSS[\"public/css/header.css\"]\nloginCSS[\"public/css/login.css\"]\nregisterCSS[\"public/css/register.css\"]\ninscripcionCSS[\"public/css/inscripcion.css\"]\nbootstrap[\"Bootstrap CDN\"]\nboxicons[\"Boxicons CDN\"]\n\nindexEJS --&gt; indexCSS\nindexEJS --&gt; bootstrap\nindexEJS --&gt; boxicons\nloginEJS --&gt; loginCSS\nregisterEJS --&gt; registerCSS\ninscribirEJS --&gt; inscripcionCSS\ncoursesEJS --&gt; headerCSS\ncoursesEJS --&gt; bootstrap\nperfilEJS --&gt; headerCSS\nperfilEJS --&gt; bootstrap\n\nsubgraph subGraph2 [\"External Resources\"]\n    bootstrap\n    boxicons\nend\n\nsubgraph subGraph1 [\"CSS Files\"]\n    indexCSS\n    headerCSS\n    loginCSS\n    registerCSS\n    inscripcionCSS\nend\n\nsubgraph subGraph0 [\"View Templates\"]\n    indexEJS\n    loginEJS\n    registerEJS\n    coursesEJS\n    inscribirEJS\n    perfilEJS\nend</code></pre> <p>The CSS files are served as static assets through Express's <code>express.static</code> middleware configured in <code>app.js</code> to serve files from the <code>public/</code> directory.</p> <p>Sources: public/css/header.css L1-L102</p> <p>public/css/index.css L1-L129</p> <p>public/css/login.css L1-L83</p> <p>public/css/register.css L1-L87</p> <p>public/css/inscripcion.css L1-L85</p>"},{"location":"Styling-System/#best-practices-and-conventions","title":"Best Practices and Conventions","text":"<p>The styling system follows several consistent patterns:</p>"},{"location":"Styling-System/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Container classes: <code>.auth-wrapper</code>, <code>.login-container</code>, <code>.registro-container</code></li> <li>Component classes: <code>.nav-links</code>, <code>.menu-btn</code>, <code>.form-group</code></li> <li>Action classes: <code>.btn-registrarse</code>, <code>.register-link</code></li> <li>ID selectors: <code>#inicio</code>, <code>#registro</code> (for sections)</li> </ul>"},{"location":"Styling-System/#css-organization-within-files","title":"CSS Organization Within Files","text":"<ol> <li>Reset/Base styles at the top</li> <li>Main container styles (body, wrappers)</li> <li>Component styles (navigation, forms)</li> <li>Responsive rules at the bottom (media queries)</li> </ol>"},{"location":"Styling-System/#sizing-and-spacing-patterns","title":"Sizing and Spacing Patterns","text":"<ul> <li>Padding: Consistent use of <code>rem</code> units (0.75rem, 1rem, 2rem, 2.5rem)</li> <li>Border radius: Predominantly <code>8px</code> to <code>15px</code> for rounded corners</li> <li>Font sizes: <code>1rem</code> for body text, <code>1.3rem</code> to <code>3rem</code> for headings</li> <li>Gaps: <code>2rem</code> spacing in flexbox layouts</li> </ul>"},{"location":"Styling-System/#transition-timing","title":"Transition Timing","text":"<ul> <li>Standard duration: <code>0.3s</code> for most interactive elements</li> <li>Easing: <code>ease</code> or <code>ease-out</code> for natural motion</li> <li>Properties: Usually single-property transitions for performance</li> </ul> <p>Sources: public/css/login.css L1-L83</p> <p>public/css/register.css L1-L87</p> <p>public/css/index.css L1-L129</p>"},{"location":"Technology-Stack/","title":"Technology Stack","text":"<p>Relevant source files * package-lock.json * package.json</p> <p>This document details the core technologies, frameworks, and libraries used in the course management application. It provides an overview of the dependency architecture, version specifications, and the role of each technology component in the system.</p> <p>For information about how these technologies integrate in the application structure, see Architecture Overview. For database-specific implementation details, see Database Architecture.</p>"},{"location":"Technology-Stack/#overview","title":"Overview","text":"<p>The application is built on a modern Node.js stack with Express.js as the core web framework. The technology stack is organized into distinct functional layers: core framework, presentation layer, database connectivity, authentication/security, and real-time communication capabilities.</p> <pre><code>flowchart TD\n\nExpress[\"Unsupported markdown: link&lt;br&gt;Web Framework\"]\nNode[\"Node.js Runtime&lt;br&gt;\u226518\"]\nBodyParser[\"Unsupported markdown: link&lt;br&gt;Request Parsing\"]\nEJS[\"Unsupported markdown: link&lt;br&gt;Template Engine\"]\nStaticServe[\"Unsupported markdown: link&lt;br&gt;Asset Serving\"]\nMySQL2[\"Unsupported markdown: link&lt;br&gt;MySQL Driver\"]\nMySQLDB[\"MySQL Database\"]\nBCrypt[\"Unsupported markdown: link&lt;br&gt;Password Hashing\"]\nJWT[\"Unsupported markdown: link&lt;br&gt;Token Management\"]\nExpressSession[\"Unsupported markdown: link&lt;br&gt;Session Store\"]\nCookieParser[\"Unsupported markdown: link&lt;br&gt;Cookie Handling\"]\nExpressValidator[\"Unsupported markdown: link&lt;br&gt;Input Validation\"]\nSocketIO[\"Unsupported markdown: link&lt;br&gt;WebSocket Server\"]\nEngineIO[\"Unsupported markdown: link&lt;br&gt;Transport Layer\"]\nDotEnv[\"Unsupported markdown: link&lt;br&gt;Environment Variables\"]\n\nExpress --&gt; EJS\nExpress --&gt; StaticServe\nExpress --&gt; MySQL2\nExpress --&gt; BCrypt\nExpress --&gt; JWT\nExpress --&gt; ExpressSession\nExpress --&gt; CookieParser\nExpress --&gt; ExpressValidator\nExpress --&gt; SocketIO\nDotEnv --&gt; Node\n\nsubgraph Configuration [\"Configuration\"]\n    DotEnv\nend\n\nsubgraph subGraph4 [\"Real-Time Communication\"]\n    SocketIO\n    EngineIO\n    SocketIO --&gt; EngineIO\nend\n\nsubgraph subGraph3 [\"Authentication &amp; Security\"]\n    BCrypt\n    JWT\n    ExpressSession\n    CookieParser\n    ExpressValidator\nend\n\nsubgraph subGraph2 [\"Database Layer\"]\n    MySQL2\n    MySQLDB\n    MySQL2 --&gt; MySQLDB\nend\n\nsubgraph subGraph1 [\"Presentation Layer\"]\n    EJS\n    StaticServe\nend\n\nsubgraph subGraph0 [\"Core Framework Layer\"]\n    Express\n    Node\n    BodyParser\n    Node --&gt; Express\n    Express --&gt; BodyParser\nend</code></pre> <p>Sources: package.json L1-L26</p> <p>package-lock.json L1-L1497</p>"},{"location":"Technology-Stack/#core-framework-technologies","title":"Core Framework Technologies","text":""},{"location":"Technology-Stack/#expressjs-510","title":"Express.js 5.1.0","text":"<p>Express serves as the primary web application framework, handling HTTP routing, middleware processing, and request/response management. The application uses Express 5.1.0, which requires Node.js version 18 or higher.</p> <p>Key Dependencies:</p> <ul> <li><code>body-parser@2.2.0</code> - Parses incoming request bodies (JSON, URL-encoded)</li> <li><code>cookie@0.7.2</code> - Cookie parsing and serialization</li> <li><code>router@2.2.0</code> - Advanced routing capabilities</li> <li><code>finalhandler@2.1.0</code> - Final request handler</li> </ul> <p>Express Configuration Points:</p> <ul> <li>Route mounting in app.js</li> <li>Middleware chain setup</li> <li>Error handling configuration</li> <li>Static file serving</li> </ul> <p>Sources: package.json L19</p> <p>package-lock.json L470-L510</p>"},{"location":"Technology-Stack/#ejs-3110","title":"EJS 3.1.10","text":"<p>Embedded JavaScript (EJS) provides server-side template rendering with support for partials and dynamic content injection.</p> <p>Template Locations:</p> <ul> <li>Views directory: <code>views/*.ejs</code></li> <li>Partial templates for reusable components</li> <li>Dynamic data binding from controllers</li> </ul> <p>EJS Dependencies:</p> <ul> <li><code>jake@10.9.4</code> - Build automation tool</li> </ul> <p>Sources: package.json L18</p> <p>package-lock.json L326-L339</p>"},{"location":"Technology-Stack/#database-technology","title":"Database Technology","text":""},{"location":"Technology-Stack/#mysql2-driver-3143","title":"MySQL2 Driver 3.14.3","text":"<p>The <code>mysql2</code> package provides MySQL database connectivity with Promise support, prepared statements, and connection pooling capabilities.</p> <p>MySQL2 Features Used:</p> <ul> <li>Connection pooling for efficient resource management</li> <li>Parameterized queries for SQL injection prevention</li> <li>Async/await support for modern JavaScript patterns</li> </ul> <p>Core Dependencies:</p> Dependency Version Purpose <code>denque</code> 2.1.0 Queue data structure for connection pool <code>iconv-lite</code> 0.6.3 Character encoding conversion <code>named-placeholders</code> 1.1.3 Named parameter binding <code>sqlstring</code> 2.3.3 SQL string escaping <code>lru-cache</code> 7.18.3 Query result caching <p>Database Configuration:</p> <ul> <li>Connection pool managed in config/db.js</li> <li>Environment variables loaded via <code>dotenv</code></li> </ul> <pre><code>flowchart TD\n\nConfigDB[\"config/db.js&lt;br&gt;Connection Pool\"]\nMySQL2[\"Unsupported markdown: link\"]\nDenque[\"Unsupported markdown: link&lt;br&gt;Connection Queue\"]\nLRU[\"Unsupported markdown: link&lt;br&gt;Result Cache\"]\nSQLString[\"Unsupported markdown: link&lt;br&gt;Query Sanitization\"]\nControllers[\"Controllers&lt;br&gt;src/*.js\"]\nRoutes[\"Route Handlers&lt;br&gt;routes/*.js\"]\n\nConfigDB --&gt; MySQL2\nMySQL2 --&gt; Denque\nMySQL2 --&gt; LRU\nMySQL2 --&gt; SQLString\nControllers --&gt; ConfigDB\nRoutes --&gt; ConfigDB</code></pre> <p>Sources: package.json L23</p> <p>package-lock.json L936-L954</p>"},{"location":"Technology-Stack/#authentication-security-stack","title":"Authentication &amp; Security Stack","text":"<p>The application implements a multi-layered security architecture combining password hashing, session management, JWT tokens, and input validation.</p>"},{"location":"Technology-Stack/#security-technology-matrix","title":"Security Technology Matrix","text":"Technology Version Security Function Usage Context <code>bcryptjs</code> 3.0.2 Password hashing with salt User registration, login verification <code>jsonwebtoken</code> 9.0.2 JWT generation/verification Stateless authentication tokens <code>express-session</code> 1.18.2 Server-side session storage User session persistence <code>cookie-parser</code> 1.4.7 Cookie extraction/parsing Session cookie handling <code>express-validator</code> 7.2.1 Input sanitization Form validation, XSS prevention <code>cookie-session</code> 2.1.1 Cookie-based sessions Alternative session storage"},{"location":"Technology-Stack/#bcryptjs-302","title":"bcryptjs 3.0.2","text":"<p>Implements bcrypt password hashing algorithm in pure JavaScript with no native dependencies.</p> <p>Key Features:</p> <ul> <li>Automatic salt generation</li> <li>Configurable cost factor</li> <li>Synchronous and asynchronous API</li> </ul> <p>Implementation Points:</p> <ul> <li>Password hashing during registration in routes/auth.js</li> <li>Password comparison during login</li> <li>No plaintext password storage</li> </ul> <p>Sources: package.json L14</p> <p>package-lock.json L84-L91</p>"},{"location":"Technology-Stack/#jsonwebtoken-902","title":"jsonwebtoken 9.0.2","text":"<p>Provides JSON Web Token (JWT) implementation for stateless authentication.</p> <p>JWT Dependencies:</p> <ul> <li><code>jws@3.2.2</code> - JSON Web Signature implementation</li> <li><code>jwa@1.4.2</code> - JSON Web Algorithms</li> <li><code>semver@7.7.2</code> - Semantic versioning for token compatibility</li> </ul> <p>Token Structure:</p> <ul> <li>Header: Algorithm and token type</li> <li>Payload: User claims (id, role)</li> <li>Signature: HMAC-SHA256 verification</li> </ul> <p>Sources: package.json L22</p> <p>package-lock.json L756-L776</p>"},{"location":"Technology-Stack/#express-session-1182","title":"express-session 1.18.2","text":"<p>Manages server-side session storage with cookie-based session identification.</p> <p>Session Configuration:</p> <ul> <li>Secret key from environment variables</li> <li>Cookie settings (httpOnly, secure, maxAge)</li> <li>Session store (memory-based by default)</li> </ul> <p>Session Dependencies:</p> <ul> <li><code>uid-safe@2.1.5</code> - Cryptographically secure session ID generation</li> <li><code>cookie-signature@1.0.7</code> - Cookie signing for tamper detection</li> </ul> <p>Sources: package.json L20</p> <p>package-lock.json L511-L528</p>"},{"location":"Technology-Stack/#express-validator-721","title":"express-validator 7.2.1","text":"<p>Provides middleware for validating and sanitizing request data.</p> <p>Validation Capabilities:</p> <ul> <li>Email format validation</li> <li>String length constraints</li> <li>Custom validation rules</li> <li>Automatic error message generation</li> </ul> <p>Core Dependency:</p> <ul> <li><code>validator@13.12.0</code> - Validation and sanitization functions</li> <li><code>lodash@4.17.21</code> - Utility functions</li> </ul> <p>Sources: package.json L21</p> <p>package-lock.json L547-L558</p>"},{"location":"Technology-Stack/#real-time-communication-layer","title":"Real-Time Communication Layer","text":""},{"location":"Technology-Stack/#socketio-481","title":"Socket.IO 4.8.1","text":"<p>Provides bidirectional, event-based communication between browser and server using WebSockets as the primary transport with fallback options.</p> <p>Socket.IO Architecture:</p> <pre><code>flowchart TD\n\nSocketIO[\"Unsupported markdown: link&lt;br&gt;Main Server\"]\nEngineIO[\"Unsupported markdown: link&lt;br&gt;Transport Layer\"]\nSocketIOAdapter[\"Unsupported markdown: link&lt;br&gt;Broadcasting\"]\nSocketIOParser[\"Unsupported markdown: link&lt;br&gt;Protocol\"]\nWS[\"Unsupported markdown: link&lt;br&gt;WebSocket Implementation\"]\nCORS[\"Unsupported markdown: link&lt;br&gt;Cross-Origin Support\"]\nAppJS[\"app.js\"]\n\nSocketIO --&gt; EngineIO\nSocketIO --&gt; SocketIOAdapter\nSocketIO --&gt; SocketIOParser\nEngineIO --&gt; WS\nEngineIO --&gt; CORS\nAppJS --&gt; SocketIO</code></pre> <p>Transport Options:</p> <ol> <li>WebSocket (primary)</li> <li>HTTP long-polling (fallback)</li> </ol> <p>Key Dependencies:</p> Package Version Purpose <code>engine.io</code> 6.6.4 Low-level transport abstraction <code>socket.io-adapter</code> 2.5.5 Multi-server broadcasting <code>socket.io-parser</code> 4.2.4 Message encoding/decoding <code>ws</code> 8.17.1 WebSocket client/server <code>cors</code> 2.8.5 CORS policy management <p>Sources: package.json L24</p> <p>package-lock.json L1260-L1276</p>"},{"location":"Technology-Stack/#configuration-management","title":"Configuration Management","text":""},{"location":"Technology-Stack/#dotenv-1721","title":"dotenv 17.2.1","text":"<p>Loads environment variables from <code>.env</code> file into <code>process.env</code>, separating configuration from code.</p> <p>Environment Variables Managed:</p> <ul> <li>Database credentials (host, user, password, database)</li> <li>Server port configuration</li> <li>Session secret keys</li> <li>JWT secret keys</li> <li>Environment mode (development/production)</li> </ul> <p>Usage Pattern:</p> <pre><code>require('dotenv').config()\n</code></pre> <p>Called at application startup in app.js</p> <p>before any configuration-dependent code.</p> <p>Sources: package.json L17</p> <p>package-lock.json L289-L299</p>"},{"location":"Technology-Stack/#middleware-dependencies","title":"Middleware Dependencies","text":"<p>The application relies on several middleware packages for request processing:</p> Middleware Version Function Position in Stack <code>cookie-parser</code> 1.4.7 Parse Cookie header Early middleware <code>body-parser</code> 2.2.0 Parse request body Early middleware <code>express-session</code> 1.18.2 Session management After cookie-parser <code>express-validator</code> 7.2.1 Input validation Route-specific Custom auth middleware N/A Role-based access Route-specific <pre><code>sequenceDiagram\n  participant Client\n  participant Express\n  participant CookieParser[\"cookie-parser\"]\n  participant BodyParser[\"body-parser\"]\n  participant Session[\"express-session\"]\n  participant AuthMiddleware[\"Custom Auth\"]\n  participant RouteHandler[\"Route Handler\"]\n  participant CookieParser\n  participant BodyParser\n  participant Session\n  participant AuthMiddleware\n  participant RouteHandler\n\n  Client-&gt;&gt;Express: \"HTTP Request\"\n  Express-&gt;&gt;CookieParser: \"Parse cookies\"\n  CookieParser-&gt;&gt;BodyParser: \"Parse body\"\n  BodyParser-&gt;&gt;Session: \"Load/create session\"\n  Session-&gt;&gt;AuthMiddleware: \"Check authentication\"\n  AuthMiddleware-&gt;&gt;RouteHandler: \"Execute handler\"\n  RouteHandler-&gt;&gt;Client: \"HTTP Response\"</code></pre> <p>Sources: package.json L13-L25</p> <p>package-lock.json L1-L1497</p>"},{"location":"Technology-Stack/#version-compatibility-matrix","title":"Version Compatibility Matrix","text":""},{"location":"Technology-Stack/#nodejs-version-requirements","title":"Node.js Version Requirements","text":"Package Minimum Node.js Recommended Notes <code>express</code> 18 18+ Express 5.x requirement <code>mysql2</code> 8.0 12+ Promise support from 8+ <code>jsonwebtoken</code> 12 14+ Native crypto APIs <code>socket.io</code> 10.2.0 14+ EventEmitter3 compatibility <code>body-parser</code> 18 18+ Aligned with Express 5 <code>express-validator</code> 8.0.0 12+ Async validation support <p>Application Requirement: Node.js \u226518.0.0</p> <p>Sources: package-lock.json L470-L510</p> <p>package-lock.json L936-L954</p>"},{"location":"Technology-Stack/#build-and-runtime-dependencies","title":"Build and Runtime Dependencies","text":""},{"location":"Technology-Stack/#development-vs-production","title":"Development vs Production","text":"<p>All dependencies in this project are production dependencies (listed in <code>dependencies</code>, not <code>devDependencies</code>). This includes:</p> <p>Runtime Required:</p> <ul> <li>All framework and library packages</li> <li>Database drivers</li> <li>Authentication libraries</li> <li>Template engines</li> </ul> <p>Build-Time Utilities:</p> <ul> <li><code>jake@10.9.4</code> (bundled with EJS for template compilation)</li> <li>No separate build step required</li> </ul> <p>Sources: package.json L13-L25</p>"},{"location":"Technology-Stack/#dependency-graph-overview","title":"Dependency Graph Overview","text":"<pre><code>flowchart TD\n\nApp[\"app.js&lt;br&gt;Main Application\"]\nExpress[\"Unsupported markdown: link\"]\nEJS[\"Unsupported markdown: link\"]\nMySQL2[\"Unsupported markdown: link\"]\nBCrypt[\"Unsupported markdown: link\"]\nJWT[\"Unsupported markdown: link\"]\nSession[\"Unsupported markdown: link\"]\nValidator[\"Unsupported markdown: link\"]\nSocketIO[\"Unsupported markdown: link\"]\nDotEnv[\"Unsupported markdown: link\"]\nCookieParser[\"Unsupported markdown: link\"]\nBodyParser[\"Unsupported markdown: link\"]\nRouter[\"Unsupported markdown: link\"]\nServeStatic[\"Unsupported markdown: link\"]\nCookieSig[\"Unsupported markdown: link\"]\nUIDSafe[\"Unsupported markdown: link\"]\nDenque[\"Unsupported markdown: link\"]\nSQLString[\"Unsupported markdown: link\"]\nJWS[\"Unsupported markdown: link\"]\nSemver[\"Unsupported markdown: link\"]\nEngineIO[\"Unsupported markdown: link\"]\nAdapter[\"Unsupported markdown: link\"]\nValidatorLib[\"Unsupported markdown: link\"]\nLodash[\"Unsupported markdown: link\"]\n\nApp --&gt; Express\nApp --&gt; EJS\nApp --&gt; MySQL2\nApp --&gt; BCrypt\nApp --&gt; JWT\nApp --&gt; Session\nApp --&gt; Validator\nApp --&gt; SocketIO\nApp --&gt; DotEnv\nApp --&gt; CookieParser\nExpress --&gt; BodyParser\nExpress --&gt; Router\nExpress --&gt; ServeStatic\nSession --&gt; CookieSig\nSession --&gt; UIDSafe\nMySQL2 --&gt; Denque\nMySQL2 --&gt; SQLString\nJWT --&gt; JWS\nJWT --&gt; Semver\nSocketIO --&gt; EngineIO\nSocketIO --&gt; Adapter\nValidator --&gt; ValidatorLib\nValidator --&gt; Lodash</code></pre> <p>Sources: package.json L1-L26</p> <p>package-lock.json L1-L1497</p>"},{"location":"Technology-Stack/#summary","title":"Summary","text":"<p>The application leverages a comprehensive technology stack centered around Express.js 5.1.0, with specialized packages for each functional requirement:</p> <ul> <li>Framework: Express.js with EJS templating</li> <li>Database: MySQL via mysql2 driver with connection pooling</li> <li>Security: Multi-layer approach (bcryptjs, JWT, sessions, validation)</li> <li>Real-Time: Socket.IO with WebSocket transport</li> <li>Configuration: Environment-based via dotenv</li> </ul> <p>All packages are production dependencies with no separate build process required. The minimum Node.js version is 18, aligned with Express 5.x requirements.</p>"},{"location":"Template-System-%26-Partials/","title":"Template System &amp; Partials","text":"<p>Relevant source files * views/index.ejs * views/partials/head.ejs * views/partials/header.ejs</p>"},{"location":"Template-System-%26-Partials/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document explains the EJS templating system used throughout the application, focusing on the partial reuse strategy that ensures consistent UI structure across all pages. The system uses two shared partials (<code>head.ejs</code> and <code>header.ejs</code>) that are included in every view, providing consistent HTML structure, CSS dependencies, and navigation elements.</p> <p>For information about specific page implementations that use these partials, see Landing Page, Authentication Views, and Course Views. For the overall frontend architecture, see Frontend Architecture.</p>"},{"location":"Template-System-%26-Partials/#ejs-templating-engine","title":"EJS Templating Engine","text":"<p>The application uses EJS (Embedded JavaScript) version 3.1.10 as its templating engine. EJS is configured in the Express application at app.js L11</p> <p>where the view engine is set:</p> <p>EJS allows embedding JavaScript logic directly in HTML templates using special tags:</p> <ul> <li><code>&lt;% %&gt;</code> - Control flow (conditionals, loops)</li> <li><code>&lt;%= %&gt;</code> - Output escaped values</li> <li><code>&lt;%- %&gt;</code> - Output unescaped values (used for including HTML partials)</li> </ul> <p>Sources: app.js, package.json</p>"},{"location":"Template-System-%26-Partials/#partial-system-overview","title":"Partial System Overview","text":"<p>The application implements a modular template architecture using two core partials that are shared across all views:</p> Partial File Purpose Location <code>head.ejs</code> HTML document structure, meta tags, CSS dependencies views/partials/head.ejs L1-L9 <code>header.ejs</code> Navigation menu, closing head tag, body tag views/partials/header.ejs L1-L26 <p>Every EJS template in the application follows this composition pattern:</p> <pre><code>\n</code></pre> <p>This pattern ensures consistent styling, navigation, and HTML structure without code duplication.</p> <p>Sources: views/index.ejs, views/partials/head.ejs, views/partials/header.ejs</p>"},{"location":"Template-System-%26-Partials/#template-composition-architecture","title":"Template Composition Architecture","text":"<p>Diagram: EJS Partial Inclusion Flow</p> <pre><code>flowchart TD\n\nRoute[\"Route Handler&lt;br&gt;(e.g., routes/index.js)\"]\nRender[\"res.render('index', data)\"]\nIndexEJS[\"views/index.ejs\"]\nHeadPartial[\"views/partials/head.ejs\"]\nHeaderPartial[\"views/partials/header.ejs\"]\nContent[\"Page-Specific Content\"]\nFinalHTML[\"Complete HTML Response\"]\nBrowser[\"Browser Client\"]\n\nRoute --&gt; Render\nRender --&gt; IndexEJS\nIndexEJS --&gt; HeadPartial\nIndexEJS --&gt; HeaderPartial\nIndexEJS --&gt; Content\nHeadPartial --&gt; FinalHTML\nHeaderPartial --&gt; FinalHTML\nContent --&gt; FinalHTML\nFinalHTML --&gt; Browser</code></pre> <p>Sources: views/index.ejs, views/partials/head.ejs, views/partials/header.ejs</p>"},{"location":"Template-System-%26-Partials/#the-headejs-partial","title":"The head.ejs Partial","text":"<p>The <code>head.ejs</code> partial provides the foundational HTML structure and external dependencies for all pages.</p> <p>Diagram: head.ejs Dependency Structure</p> <pre><code>flowchart TD\n\nHeadEJS[\"views/partials/head.ejs\"]\nDOCTYPE[\"\"]\nHTMLTag[\"\"]\nHeadTag[\"\"]\nCharset[\"UTF-8 charset\"]\nViewport[\"Responsive viewport\"]\nIndexCSS[\"index.css&lt;br&gt;/resources/css/index.css\"]\nBoxicons[\"Boxicons CDN&lt;br&gt;Icon Library\"]\nBootstrap[\"Bootstrap 5.3.7 CDN&lt;br&gt;CSS Framework\"]\nTitle[\"\"]\n\nHeadEJS --&gt; DOCTYPE\nHeadEJS --&gt; HTMLTag\nHeadEJS --&gt; HeadTag\nHeadEJS --&gt; Charset\nHeadEJS --&gt; Viewport\nHeadEJS --&gt; IndexCSS\nHeadEJS --&gt; Boxicons\nHeadEJS --&gt; Bootstrap\nHeadEJS --&gt; Title\n\nsubgraph subGraph0 [\"CSS Dependencies\"]\n    IndexCSS\n    Boxicons\n    Bootstrap\nend</code></pre> <p>Structure breakdown:</p> <ul> <li>Document type and language: views/partials/head.ejs L1-L2  defines HTML5 doctype with Spanish language</li> <li>Meta tags: views/partials/head.ejs L4-L5  sets UTF-8 encoding and responsive viewport</li> <li>Base stylesheet: views/partials/head.ejs L6  links the global <code>index.css</code> stylesheet</li> <li>Boxicons: views/partials/head.ejs L7  includes the Boxicons icon font library</li> <li>Bootstrap: views/partials/head.ejs L8  imports Bootstrap 5.3.7 for responsive grid and components</li> <li>Title: views/partials/head.ejs L9  sets the page title to \"THOT\"</li> </ul> <p>Note that the <code>&lt;head&gt;</code> tag is not closed in this partial\u2014it remains open to allow individual templates to inject page-specific CSS before the header partial closes it.</p> <p>Sources: views/partials/head.ejs</p>"},{"location":"Template-System-%26-Partials/#the-headerejs-partial","title":"The header.ejs Partial","text":"<p>The <code>header.ejs</code> partial closes the head section and provides navigation.</p> <p>Structure:</p> <pre><code>&lt;/head&gt;          \u2190 Closes head tag from head.ejs\n&lt;body&gt;           \u2190 Opens body tag\n  &lt;nav&gt;          \u2190 Navigation bar\n    ...\n  &lt;/nav&gt;\n  &lt;script&gt;       \u2190 Menu toggle script\n</code></pre>"},{"location":"Template-System-%26-Partials/#navigation-menu","title":"Navigation Menu","text":"<p>The navigation bar at views/partials/header.ejs L4-L18</p> <p>contains:</p> Link Route Purpose Inicio <code>/</code> Landing page Iniciar sesion <code>/login</code> Login page Registrate <code>/register</code> Registration page Mi perfil <code>/perfil</code> User profile (registered users) Mi perfil (Admin) <code>/admin/perfil</code> Admin dashboard Gesti\u00f3n de Cursos <code>/courses</code> Course listing/management"},{"location":"Template-System-%26-Partials/#responsive-menu-toggle","title":"Responsive Menu Toggle","text":"<p>A mobile-responsive hamburger menu is implemented with:</p> <ul> <li>HTML button: views/partials/header.ejs L6-L10  defines the three-bar menu icon</li> <li>JavaScript function: views/partials/header.ejs L21-L24  toggles the <code>.active</code> class on click</li> </ul> <p>The <code>toggleMenu()</code> function dynamically shows/hides navigation links on mobile devices by manipulating the <code>#navLinks</code> element's class list.</p> <p>Sources: views/partials/header.ejs</p>"},{"location":"Template-System-%26-Partials/#page-specific-css-injection","title":"Page-Specific CSS Injection","text":"<p>Individual templates can inject additional CSS files between the two partials:</p> <p>Example from index.ejs:</p> <p>This pattern at views/index.ejs L1-L3</p> <p>demonstrates:</p> <ol> <li>Include <code>head.ejs</code> (opens head tag)</li> <li>Add page-specific CSS link (<code>header.css</code>)</li> <li>Include <code>header.ejs</code> (closes head tag, opens body)</li> </ol> <p>This architecture allows each page to:</p> <ul> <li>Inherit global styles from <code>index.css</code> (loaded in head.ejs)</li> <li>Add page-specific styles without modifying the shared partial</li> <li>Maintain consistent load order for CSS dependencies</li> </ul> <p>Sources: views/index.ejs</p>"},{"location":"Template-System-%26-Partials/#data-passing-to-views","title":"Data Passing to Views","text":"<p>Diagram: Route to View Data Flow</p>"},{"location":"Template-System-%26-Partials/#data-object-structure","title":"Data Object Structure","text":"<p>Routes pass data to templates as JavaScript objects in the second parameter of <code>res.render()</code>:</p> <pre><code>\n</code></pre> <p>These variables become available in the EJS template for:</p> <ul> <li>Direct output: <code>&lt;%= nombre %&gt;</code> displays the value</li> <li>Conditional logic: <code>&lt;% if (login) { %&gt;</code> controls rendering</li> <li>Expressions: <code>&lt;%= name || 'Invitado' %&gt;</code> provides fallbacks</li> </ul> <p>Sources: views/index.ejs, routes/index.js (implied)</p>"},{"location":"Template-System-%26-Partials/#template-variable-usage-patterns","title":"Template Variable Usage Patterns","text":""},{"location":"Template-System-%26-Partials/#conditional-rendering","title":"Conditional Rendering","text":"<p>The <code>index.ejs</code> template demonstrates two common conditional patterns:</p> <p>Pattern 1: Display data if available at views/index.ejs L6-L9</p> <p>:</p> <pre><code>\n</code></pre> <p>Pattern 2: Authenticated vs. Guest UI at views/index.ejs L13-L21</p> <p>:</p> <pre><code>\n</code></pre>"},{"location":"Template-System-%26-Partials/#variable-escaping","title":"Variable Escaping","text":"<p>EJS provides two output syntaxes:</p> Syntax Purpose Example <code>&lt;%= variable %&gt;</code> Escaped output - Safe for user input, prevents XSS <code>&lt;%= name %&gt;</code> <code>&lt;%- variable %&gt;</code> Unescaped output - For HTML content <code>&lt;%- include('partial') %&gt;</code> <p>The escaped syntax (<code>&lt;%= %&gt;</code>) is used for all user-provided data to prevent cross-site scripting (XSS) attacks.</p> <p>Sources: views/index.ejs</p>"},{"location":"Template-System-%26-Partials/#template-composition-best-practices","title":"Template Composition Best Practices","text":"<p>Summary of patterns used in the codebase:</p> <ol> <li>Consistent partial inclusion order: * Always include <code>head.ejs</code> first * Add page-specific CSS * Include <code>header.ejs</code> second * Add page content</li> <li>Data object conventions: * Pass authentication state as boolean (<code>login</code>) * Provide user name for personalization (<code>name</code>) * Include fallback values in template expressions</li> <li>Separation of concerns: * Global styles in <code>head.ejs</code> \u2192 <code>index.css</code> * Page-specific styles injected between partials * Navigation logic in <code>header.ejs</code> * Content logic in individual templates</li> <li>Security practices: * Use <code>&lt;%= %&gt;</code> for user data (escaped) * Use <code>&lt;%- %&gt;</code> only for trusted HTML (partials)</li> </ol> <p>Sources: views/index.ejs, views/partials/head.ejs, views/partials/header.ejs</p>"},{"location":"Template-System-%26-Partials/#code-entity-reference","title":"Code Entity Reference","text":"<p>Key files and their roles:</p> File Path Purpose Key Lines <code>views/partials/head.ejs</code> HTML structure, CSS dependencies 1-9 <code>views/partials/header.ejs</code> Navigation bar, menu toggle 1-26 <code>views/index.ejs</code> Example of partial usage 1-3   for includes, 6-21   for data usage <code>app.js</code> EJS view engine configuration 11 <p>Template inclusion syntax:</p> <pre><code>\n</code></pre> <p>Data output syntax:</p> <pre><code>\n</code></pre> <p>Sources: views/partials/head.ejs, views/partials/header.ejs, views/index.ejs, app.js</p>"},{"location":"User-Login/","title":"User Login","text":"<p>Relevant source files * public/css/login.css * routes/auth.js * views/login.ejs</p>"},{"location":"User-Login/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the user login functionality, covering the authentication process where existing users provide credentials and gain access to the system. The login process includes credential validation, password verification using bcrypt, session creation, and role-based response handling.</p> <p>For information about creating new user accounts, see User Registration. For details about how roles control access to protected routes, see Role-Based Access Control. For session storage and management, see Session Management.</p>"},{"location":"User-Login/#login-form-presentation","title":"Login Form Presentation","text":"<p>The login form is rendered at the <code>/login</code> endpoint, providing a simple interface for credential submission.</p>"},{"location":"User-Login/#route-handler","title":"Route Handler","text":"<p>The GET <code>/login</code> route is defined in routes/auth.js L8-L10</p> <p>and renders the login view without any additional data:</p> <pre><code>GET /login \u2192 renders views/login.ejs\n</code></pre>"},{"location":"User-Login/#form-structure","title":"Form Structure","text":"<p>The login form in views/login.ejs L8-L13</p> <p>contains two input fields and submits via POST to <code>/auth</code>:</p> Field Type Name Placeholder Email/Username text <code>email</code> \"Ingrese su Usuario\" Password password <code>password</code> \"Ingrese su contrase\u00f1a\" Submit Button submit - \"Ingresar\" <p>The form uses the <code>login-container</code> class and is wrapped in an <code>auth-wrapper</code> for consistent styling. A registration link is provided below the form at views/login.ejs L14-L16</p> <p>Sources: views/login.ejs L1-L34</p> <p>routes/auth.js L8-L10</p>"},{"location":"User-Login/#authentication-flow","title":"Authentication Flow","text":""},{"location":"User-Login/#authentication-flow-diagram","title":"Authentication Flow Diagram","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant POST /auth\n  participant routes/auth.js\n  participant bcryptjs\n  participant MySQL Database\n  participant usuarios table\n  participant req.session\n  participant login.ejs\n\n  Browser-&gt;&gt;POST /auth: \"POST /auth\n  loop [Password Mismatch]\n    POST /auth-&gt;&gt;login.ejs: {email, password}\"\n    login.ejs-&gt;&gt;Browser: \"Render alert:\n    POST /auth-&gt;&gt;MySQL Database: Ingrese el usuario y/o contrase\u00f1a\"\n    MySQL Database-&gt;&gt;POST /auth: \"Show error alert\"\n    POST /auth-&gt;&gt;login.ejs: \"SELECT * FROM usuarios WHERE email = ?\"\n    login.ejs-&gt;&gt;Browser: \"Return user record(s)\"\n    POST /auth-&gt;&gt;bcryptjs: \"Render alert:\n    bcryptjs-&gt;&gt;POST /auth: Usuario y/o contrase\u00f1a incorrectos\"\n    POST /auth-&gt;&gt;login.ejs: \"Show error alert\"\n    login.ejs-&gt;&gt;Browser: \"bcrypt.compare(password, hash)\"\n    POST /auth-&gt;&gt;req.session: \"Return comparison result\"\n    POST /auth-&gt;&gt;login.ejs: \"Render alert:\n    login.ejs-&gt;&gt;Browser: Usuario y/o contrase\u00f1a incorrectos\"\n  end</code></pre> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"User-Login/#request-processing","title":"Request Processing","text":"<p>The POST <code>/auth</code> endpoint in routes/auth.js L75-L131</p> <p>handles authentication. The process begins by extracting credentials from the request body:</p> <pre><code>const email = req.body.email;\nconst password = req.body.password;\n</code></pre> <p>Sources: routes/auth.js L77-L78</p>"},{"location":"User-Login/#credential-validation","title":"Credential Validation","text":"<p>The handler first checks if both email and password are provided routes/auth.js L80</p> <p>If either is missing, an error alert is rendered.</p>"},{"location":"User-Login/#database-query","title":"Database Query","text":"<p>When credentials are present, the system queries the <code>usuarios</code> table routes/auth.js L81-L84</p> <p>:</p> <pre><code>SELECT * FROM usuarios WHERE email = ?\n</code></pre> <p>The email parameter is passed as an array to prevent SQL injection: <code>[email]</code>.</p> <p>Sources: routes/auth.js L81-L84</p>"},{"location":"User-Login/#password-verification","title":"Password Verification","text":"<p>Password verification occurs in routes/auth.js L85-L87</p> <p>using bcrypt's asynchronous compare function:</p> <pre><code>await bcrypt.compare(password, results[0].password)\n</code></pre> <p>The system checks two conditions:</p> <ol> <li>Whether any user records were returned (<code>results.length == 0</code>)</li> <li>Whether the provided password matches the stored hash</li> </ol> <p>If either check fails, authentication is denied.</p> <p>Sources: routes/auth.js L85-L87</p>"},{"location":"User-Login/#session-initialization","title":"Session Initialization","text":"<p>Upon successful authentication routes/auth.js L98-L104</p> <p>the system establishes a session by setting three session variables:</p> Session Variable Source Purpose <code>req.session.loggedin</code> <code>true</code> Indicates authenticated state <code>req.session.usuario</code> <code>results[0]</code> Stores complete user record <code>req.session.rol</code> <code>usuario.rol</code> Stores user role for access control <p>This session data persists across requests and is used by authentication middleware throughout the application.</p> <p>Sources: routes/auth.js L100-L104</p>"},{"location":"User-Login/#response-handling-with-sweetalert2","title":"Response Handling with SweetAlert2","text":""},{"location":"User-Login/#alert-configuration","title":"Alert Configuration","text":"<p>The login process uses SweetAlert2 for user feedback. All responses render the <code>login.ejs</code> template with an <code>alert</code> object containing these properties:</p> Property Type Purpose <code>alert</code> boolean Triggers SweetAlert2 script execution <code>alertTitle</code> string Alert dialog title <code>alertMessage</code> string Alert dialog message text <code>alertIcon</code> string Icon type (success/error/warning) <code>showConfirmButton</code> boolean Whether to show confirm button <code>timer</code> number/false Auto-close timer in milliseconds <code>ruta</code> string Redirect path after alert <p>Sources: views/login.ejs L20-L32</p> <p>routes/auth.js L88-L97</p> <p>routes/auth.js L106-L115</p>"},{"location":"User-Login/#alert-scenarios","title":"Alert Scenarios","text":""},{"location":"User-Login/#missing-credentials","title":"Missing Credentials","text":"<p>routes/auth.js L120-L130</p> <ul> <li> <p>When email or password is not provided:</p> </li> <li> <p>Title: \"Advertencia\"</p> </li> <li>Message: \"Ingrese el usuario y/o contrase\u00f1a\"</li> <li>Icon: error</li> <li>Confirm Button: Shown</li> <li>Timer: No auto-close</li> <li>Redirect: None (stays on login page)</li> </ul>"},{"location":"User-Login/#invalid-credentials","title":"Invalid Credentials","text":"<p>routes/auth.js L88-L97</p> <ul> <li> <p>When email not found or password doesn't match:</p> </li> <li> <p>Title: \"Error\"</p> </li> <li>Message: \"Usuario y/o contrase\u00f1a incorrectos\"</li> <li>Icon: error</li> <li>Confirm Button: Shown</li> <li>Timer: No auto-close</li> <li>Redirect: Stays on <code>/login</code></li> </ul>"},{"location":"User-Login/#successful-authentication","title":"Successful Authentication","text":"<p>routes/auth.js L106-L115</p> <ul> <li> <p>When credentials are valid:</p> </li> <li> <p>Title: \"Conexion exitosa\"</p> </li> <li>Message: \"Has iniciado sesi\u00f3n correctamente\"</li> <li>Icon: success</li> <li>Confirm Button: Hidden</li> <li>Timer: 1500ms (1.5 seconds)</li> <li>Redirect: Root path <code>/</code></li> </ul>"},{"location":"User-Login/#sweetalert2-implementation","title":"SweetAlert2 Implementation","text":"<p>The alert script in views/login.ejs L20-L32</p> <p>executes when the <code>alert</code> variable is defined:</p> <pre><code>Swal.fire({\n  title: '&lt;%= alertTitle %&gt;',\n  text: '&lt;%= alertMessage %&gt;',\n  icon: '&lt;%= alertIcon %&gt;',\n  showConfirmButton: &lt;%= showConfirmButton %&gt;,\n  timer: &lt;%= timer %&gt;\n}).then(() =&gt; {\n  window.location = '/&lt;%= ruta %&gt;'\n})\n</code></pre> <p>The <code>.then()</code> callback redirects the user after the alert is dismissed or the timer expires.</p> <p>Sources: views/login.ejs L18-L32</p>"},{"location":"User-Login/#login-page-styling","title":"Login Page Styling","text":"<p>The login page uses dedicated styles defined in public/css/login.css</p> <p>Key styling features include:</p>"},{"location":"User-Login/#layout-structure","title":"Layout Structure","text":"Element Class Styling Page Background <code>body</code> Gradient background (135deg, #74ebd5 to #9face6), flexbox centering Form Container <code>.auth-wrapper</code> White background, 2.5rem padding, 15px border-radius, box shadow Login Form <code>.login-container</code> Flexbox column layout, full width"},{"location":"User-Login/#form-elements","title":"Form Elements","text":"<ul> <li>Input Fields public/css/login.css L35-L47  - 0.75rem vertical padding, 1rem horizontal padding, 8px border-radius, focus state with #74ebd5 border color</li> <li>Submit Button public/css/login.css L49-L62  - Blue background (#4a6cf7), white text, hover effect darkens to #3f5cd8</li> <li>Register Link public/css/login.css L74-L83  - Blue text (#4a6cf7) matching button color, bold font weight, hover darkening effect</li> </ul> <p>Sources: public/css/login.css L1-L83</p>"},{"location":"User-Login/#code-entity-reference","title":"Code Entity Reference","text":""},{"location":"User-Login/#authentication-route-handler","title":"Authentication Route Handler","text":"<pre><code>flowchart TD\n\nAuthRouter[\"routes/auth.js\"]\nGetLogin[\"GET /login&lt;br&gt;Line 8-10\"]\nPostAuth[\"POST /auth&lt;br&gt;Line 75-131\"]\nExtractCreds[\"Extract email, password&lt;br&gt;Line 77-78\"]\nCheckPresence[\"Check if (email &amp;&amp; password)&lt;br&gt;Line 80\"]\nQueryDB[\"db.query SELECT FROM usuarios&lt;br&gt;Line 81-84\"]\nCheckResults[\"Check results.length&lt;br&gt;Line 85\"]\nComparePass[\"bcrypt.compare&lt;br&gt;Line 86\"]\nSetSession[\"req.session.loggedin = true&lt;br&gt;req.session.usuario = results[0]&lt;br&gt;req.session.rol = usuario.rol&lt;br&gt;Line 102-104\"]\nRenderError1[\"Render login with error alert&lt;br&gt;Line 88-97\"]\nRenderError2[\"Render login with warning alert&lt;br&gt;Line 120-130\"]\nRenderSuccess[\"Render login with success alert&lt;br&gt;Line 106-115\"]\n\nAuthRouter --&gt; GetLogin\nAuthRouter --&gt; PostAuth\nPostAuth --&gt; ExtractCreds\nExtractCreds --&gt; CheckPresence\nCheckPresence --&gt; RenderError2\nCheckPresence --&gt; QueryDB\nQueryDB --&gt; CheckResults\nCheckResults --&gt; ComparePass\nComparePass --&gt; RenderError1\nComparePass --&gt; SetSession\nSetSession --&gt; RenderSuccess</code></pre> <p>Sources: routes/auth.js L8-L131</p>"},{"location":"User-Login/#template-and-view-integration","title":"Template and View Integration","text":"<pre><code>flowchart TD\n\nLoginEJS[\"views/login.ejs\"]\nHead[\"partials/head&lt;br&gt;Line 1\"]\nHeader[\"partials/header&lt;br&gt;Line 3\"]\nCSS[\"public/css/login.css&lt;br&gt;Line 5\"]\nSweetAlert[\"SweetAlert2 CDN&lt;br&gt;Line 18\"]\nForm[\"Form Element&lt;br&gt;action='/auth'&lt;br&gt;method='POST'&lt;br&gt;Line 8\"]\nEmailInput[\"input name='email'&lt;br&gt;Line 10\"]\nPasswordInput[\"input name='password'&lt;br&gt;Line 11\"]\nSubmitBtn[\"button type='submit'&lt;br&gt;Line 12\"]\nAlertScript[\"Conditional SweetAlert2 Script&lt;br&gt;Line 20-32\"]\n\nLoginEJS --&gt; Head\nLoginEJS --&gt; Header\nLoginEJS --&gt; CSS\nLoginEJS --&gt; SweetAlert\nLoginEJS --&gt; Form\nLoginEJS --&gt; AlertScript\nForm --&gt; EmailInput\nForm --&gt; PasswordInput\nForm --&gt; SubmitBtn</code></pre> <p>Sources: views/login.ejs L1-L34</p>"},{"location":"User-Login/#security-considerations","title":"Security Considerations","text":""},{"location":"User-Login/#password-comparison","title":"Password Comparison","text":"<p>The authentication process uses bcrypt's asynchronous <code>compare</code> function routes/auth.js L86</p> <p>rather than plain text comparison. This ensures:</p> <ul> <li>Timing-safe comparison resistant to timing attacks</li> <li>Proper handling of bcrypt's salt verification</li> <li>Asynchronous operation preventing blocking</li> </ul>"},{"location":"User-Login/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<p>The database query uses parameterized queries routes/auth.js L82-L83</p> <p>:</p> <pre><code>db.query(\"SELECT * FROM usuarios WHERE email = ?\", [email], ...)\n</code></pre> <p>The <code>?</code> placeholder with parameter array prevents SQL injection by properly escaping user input.</p>"},{"location":"User-Login/#session-security","title":"Session Security","text":"<p>Session data is stored server-side with only a session ID cookie sent to the client. The session includes:</p> <ul> <li>Full user object access via <code>req.session.usuario</code></li> <li>Role information in <code>req.session.rol</code> for authorization checks</li> <li>Authentication flag in <code>req.session.loggedin</code></li> </ul> <p>For detailed session configuration and security settings, see Session Management.</p> <p>Sources: routes/auth.js L75-L131</p>"},{"location":"User-Login/#integration-points","title":"Integration Points","text":"<p>The login functionality integrates with several other system components:</p> Component Integration Point Purpose Database <code>config/db</code> module Queries <code>usuarios</code> table for credential verification Session <code>req.session</code> object Stores authentication state and user data Registration <code>/register</code> link Allows new users to create accounts Authorization Session variables Provides data for role-based middleware (see Role-Based Access Control) Home Page Redirect on success Returns users to root path after successful login <p>Sources: routes/auth.js L4</p> <p>routes/auth.js L102-L104</p> <p>views/login.ejs L15</p>"},{"location":"User-Profile-Page/","title":"User Profile Page","text":"<p>Relevant source files * public/css/perfil.css * routes/courses.js * views/perfil.ejs</p>"},{"location":"User-Profile-Page/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document details the user profile page (<code>/perfil</code>) designed for registered users (<code>rol: 'registrado'</code>). This page displays a personalized dashboard showing all courses in which the user is currently enrolled, retrieved through a database JOIN operation between the <code>cursos</code> and <code>inscripciones</code> tables.</p> <p>This page is distinct from the administrator dashboard. For information about the admin-specific profile page, see Administrator Dashboard. For details on the enrollment process that populates this profile, see Course Enrollment.</p> <p>Sources: routes/courses.js L152-L169</p> <p>views/perfil.ejs L1-L35</p>"},{"location":"User-Profile-Page/#route-configuration","title":"Route Configuration","text":""},{"location":"User-Profile-Page/#endpoint-definition","title":"Endpoint Definition","text":"<p>The user profile is accessible at the <code>/perfil</code> route and requires two layers of middleware protection:</p> Property Value HTTP Method GET Route Path <code>/perfil</code> Middleware Chain <code>estaAutenticado</code> \u2192 <code>isRegistrado</code> Handler Location routes/courses.js L152-L169 View Template <code>views/perfil.ejs</code> <p>The route definition uses two middleware functions in sequence:</p> <ul> <li><code>estaAutenticado</code> routes/courses.js L8-L14  - Verifies the user has an active session</li> <li><code>isRegistrado</code> routes/courses.js L26-L33  - Ensures the user has the 'registrado' role</li> </ul> <p>Users with the 'admin' role cannot access this route directly; they are redirected to <code>/login</code> by the <code>isRegistrado</code> middleware. Administrators have their own dedicated profile at <code>/admin/perfil</code>.</p> <p>Sources: routes/courses.js L152-L169</p> <p>routes/courses.js L8-L14</p> <p>routes/courses.js L26-L33</p>"},{"location":"User-Profile-Page/#request-flow-architecture","title":"Request Flow Architecture","text":""},{"location":"User-Profile-Page/#profile-page-access-flow","title":"Profile Page Access Flow","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant routes/courses.js\n  participant estaAutenticado\n  participant middleware\n  participant isRegistrado\n  participant MySQL\n  participant cursos &amp; inscripciones\n  participant views/perfil.ejs\n\n  Browser-&gt;&gt;routes/courses.js: \"GET /perfil\"\n  routes/courses.js-&gt;&gt;estaAutenticado: \"Check authentication\"\n  loop [Role != 'registrado']\n    estaAutenticado-&gt;&gt;Browser: \"Redirect to /login\"\n    estaAutenticado-&gt;&gt;isRegistrado: \"Check role\"\n    isRegistrado-&gt;&gt;Browser: \"Redirect to /login\"\n    isRegistrado-&gt;&gt;routes/courses.js: \"Access granted\"\n    note over routes/courses.js: \"Extract id_usuario from\n    routes/courses.js-&gt;&gt;MySQL: \"SELECT c.* FROM cursos c\n    MySQL-&gt;&gt;routes/courses.js: JOIN inscripciones i\n    routes/courses.js-&gt;&gt;views/perfil.ejs: WHERE i.id_usuario = ?\"\n    views/perfil.ejs-&gt;&gt;Browser: \"Return enrolled courses\"\n  end</code></pre> <p>Sources: routes/courses.js L152-L169</p> <p>routes/courses.js L8-L14</p> <p>routes/courses.js L26-L33</p>"},{"location":"User-Profile-Page/#database-query-structure","title":"Database Query Structure","text":""},{"location":"User-Profile-Page/#enrolled-courses-retrieval","title":"Enrolled Courses Retrieval","text":"<p>The profile page executes a SQL JOIN query to fetch all courses in which the authenticated user is enrolled:</p> <p>This query is defined at routes/courses.js L155-L160</p> <p>and uses the user's ID from the session object (<code>req.session.usuario.id</code>).</p>"},{"location":"User-Profile-Page/#query-components","title":"Query Components","text":"Component Purpose Source <code>SELECT c.*</code> Retrieves all columns from the cursos table All course fields (titulo, descripcion, categoria, visibilidad) <code>JOIN inscripciones i</code> Links courses to enrollments Matches on <code>c.id = i.id_curso</code> <code>WHERE i.id_usuario = ?</code> Filters to current user's enrollments Parameterized with <code>idUsuario</code> from session <p>The query results are passed to the view as the <code>cursos</code> array routes/courses.js L162</p> <p>Sources: routes/courses.js L155-L160</p>"},{"location":"User-Profile-Page/#database-entity-relationships","title":"Database Entity Relationships","text":""},{"location":"User-Profile-Page/#profile-data-model","title":"Profile Data Model","text":"<pre><code>#mermaid-psdln5448b{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;fill:#333;}@keyframes edge-animation-frame{from{stroke-dashoffset:0;}}@keyframes dash{to{stroke-dashoffset:0;}}#mermaid-psdln5448b .edge-animation-slow{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 50s linear infinite;stroke-linecap:round;}#mermaid-psdln5448b .edge-animation-fast{stroke-dasharray:9,5!important;stroke-dashoffset:900;animation:dash 20s linear infinite;stroke-linecap:round;}#mermaid-psdln5448b .error-icon{fill:#dddddd;}#mermaid-psdln5448b .error-text{fill:#222222;stroke:#222222;}#mermaid-psdln5448b .edge-thickness-normal{stroke-width:1px;}#mermaid-psdln5448b .edge-thickness-thick{stroke-width:3.5px;}#mermaid-psdln5448b .edge-pattern-solid{stroke-dasharray:0;}#mermaid-psdln5448b .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-psdln5448b .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-psdln5448b .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-psdln5448b .marker{fill:#999;stroke:#999;}#mermaid-psdln5448b .marker.cross{stroke:#999;}#mermaid-psdln5448b svg{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;font-size:16px;}#mermaid-psdln5448b p{margin:0;}#mermaid-psdln5448b .entityBox{fill:#ffffff;stroke:#dddddd;}#mermaid-psdln5448b .relationshipLabelBox{fill:#dddddd;opacity:0.7;background-color:#dddddd;}#mermaid-psdln5448b .relationshipLabelBox rect{opacity:0.5;}#mermaid-psdln5448b .labelBkg{background-color:rgba(221, 221, 221, 0.5);}#mermaid-psdln5448b .edgeLabel .label{fill:#dddddd;font-size:14px;}#mermaid-psdln5448b .label{font-family:ui-sans-serif,-apple-system,system-ui,Segoe UI,Helvetica;color:#333;}#mermaid-psdln5448b .edge-pattern-dashed{stroke-dasharray:8,8;}#mermaid-psdln5448b .node rect,#mermaid-psdln5448b .node circle,#mermaid-psdln5448b .node ellipse,#mermaid-psdln5448b .node polygon{fill:#ffffff;stroke:#dddddd;stroke-width:1px;}#mermaid-psdln5448b .relationshipLine{stroke:#999;stroke-width:1;fill:none;}#mermaid-psdln5448b .marker{fill:none!important;stroke:#999!important;stroke-width:1;}#mermaid-psdln5448b :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}enrolls inhas enrollmentsusuariosintidPKvarcharnombrevarcharemailvarcharpasswordenumrolinscripcionesintid_usuarioFKintid_cursoFKcursosintidPKvarchartitulotextdescripcionvarcharcategoriavarcharvisibilidadnote_for_usuariosUser session provides idnote_for_inscripcionesJOIN table filters enrollmentsnote_for_cursosAll fields displayed in profile table\n</code></pre> <p>The profile page leverages the many-to-many relationship between <code>usuarios</code> and <code>cursos</code> through the <code>inscripciones</code> junction table. The JOIN query at routes/courses.js L155-L160</p> <p>traverses this relationship to retrieve only courses where an enrollment record exists for the authenticated user.</p> <p>Sources: routes/courses.js L155-L160</p>"},{"location":"User-Profile-Page/#view-rendering","title":"View Rendering","text":""},{"location":"User-Profile-Page/#template-structure","title":"Template Structure","text":"<p>The <code>perfil.ejs</code> template views/perfil.ejs L1-L35</p> <p>follows this structure:</p> <pre><code>\n</code></pre> <p>Sources: views/perfil.ejs L1-L35</p>"},{"location":"User-Profile-Page/#data-binding","title":"Data Binding","text":"<p>The route handler passes the following data to the template routes/courses.js L162-L167</p> <p>:</p> Variable Type Source Usage in Template <code>cursos</code> Array Database query results Iterated in table rows views/perfil.ejs L21-L27 <code>usuario</code> Object <code>req.session.usuario</code> Displays name in greeting views/perfil.ejs L6 <code>rol</code> String <code>req.session.rol</code> Available but not displayed <code>msg</code> String <code>req.query.msg</code> Optional query parameter for messages <p>Sources: routes/courses.js L162-L167</p> <p>views/perfil.ejs L6</p> <p>views/perfil.ejs L21-L27</p>"},{"location":"User-Profile-Page/#user-interface-components","title":"User Interface Components","text":""},{"location":"User-Profile-Page/#greeting-section","title":"Greeting Section","text":"<p>The profile begins with a personalized greeting that displays the user's name from the session:</p> <p>This section is rendered at views/perfil.ejs L6-L7</p>"},{"location":"User-Profile-Page/#empty-state","title":"Empty State","text":"<p>When a user has no enrollments (<code>cursos.length === 0</code>), the template displays a message:</p> <pre><code>\n</code></pre> <p>This conditional rendering occurs at views/perfil.ejs L9-L10</p>"},{"location":"User-Profile-Page/#course-table","title":"Course Table","text":"<p>For users with enrollments, courses are displayed in a Bootstrap-styled table:</p> Column Data Field EJS Expression T\u00edtulo Course title <code>&lt;%= curso.titulo %&gt;</code> Categor\u00eda Course category <code>&lt;%= curso.categoria %&gt;</code> Descripci\u00f3n Course description <code>&lt;%= curso.descripcion %&gt;</code> <p>The table structure is defined at views/perfil.ejs L12-L29</p> <p>and uses a <code>forEach</code> loop to iterate over the <code>cursos</code> array views/perfil.ejs L21-L27</p>"},{"location":"User-Profile-Page/#navigation","title":"Navigation","text":"<p>A call-to-action button provides navigation back to the course listing:</p> <p>This link appears at views/perfil.ejs L32</p> <p>and allows users to discover additional courses for enrollment.</p> <p>Sources: views/perfil.ejs L6-L7</p> <p>views/perfil.ejs L9-L10</p> <p>views/perfil.ejs L12-L29</p> <p>views/perfil.ejs L32</p>"},{"location":"User-Profile-Page/#session-data-requirements","title":"Session Data Requirements","text":""},{"location":"User-Profile-Page/#required-session-properties","title":"Required Session Properties","text":"<p>The profile page depends on the following session properties populated during login:</p> <p>The session object is established during the login process documented in User Login. The <code>usuario.id</code> property is critical for the database query routes/courses.js L154</p> <p>while <code>usuario.nombre</code> is used for the personalized greeting views/perfil.ejs L6</p> <p>Sources: routes/courses.js L154</p> <p>routes/courses.js L164</p> <p>views/perfil.ejs L6</p>"},{"location":"User-Profile-Page/#error-handling","title":"Error Handling","text":""},{"location":"User-Profile-Page/#authentication-failures","title":"Authentication Failures","text":"<p>The middleware chain provides automatic redirection for authentication failures:</p> Condition Middleware Action Redirect Target Session not active <code>estaAutenticado</code> routes/courses.js L8-L14 Redirect <code>/login</code> Session exists but <code>loggedin</code> is false <code>estaAutenticado</code> routes/courses.js L8-L14 Redirect <code>/login</code> User role is not 'registrado' <code>isRegistrado</code> routes/courses.js L26-L33 Redirect <code>/login</code>"},{"location":"User-Profile-Page/#database-query-errors","title":"Database Query Errors","text":"<p>The current implementation does not include explicit error handling for the database query at routes/courses.js L161</p> <p>If the query fails, the application will pass an undefined or error value to the view. Production implementations should add error handling:</p> <p>Sources: routes/courses.js L161-L168</p> <p>routes/courses.js L8-L14</p> <p>routes/courses.js L26-L33</p>"},{"location":"User-Profile-Page/#navigation-patterns","title":"Navigation Patterns","text":""},{"location":"User-Profile-Page/#post-enrollment-redirect","title":"Post-Enrollment Redirect","text":"<p>The profile page serves as the destination for successful enrollments. The enrollment POST handler at routes/courses.js L144</p> <p>redirects to <code>/perfil</code> after inserting a new enrollment record. This pattern provides immediate visual feedback showing the newly enrolled course.</p>"},{"location":"User-Profile-Page/#access-points","title":"Access Points","text":"<p>Users can reach the profile page through:</p> <ol> <li>Direct navigation - Authenticated users with 'registrado' role can navigate directly to <code>/perfil</code></li> <li>Post-enrollment redirect - After successfully enrolling in a course routes/courses.js L144</li> <li>Duplicate enrollment redirect - When attempting to enroll in an already-enrolled course routes/courses.js L132</li> </ol> <p>The profile does not appear in the main navigation header but is typically accessed contextually after course-related actions.</p> <p>Sources: routes/courses.js L144</p> <p>routes/courses.js L132</p>"},{"location":"User-Profile-Page/#styling","title":"Styling","text":""},{"location":"User-Profile-Page/#css-file","title":"CSS File","text":"<p>The profile page has an associated stylesheet at <code>public/css/perfil.css</code>, though the file is currently empty public/css/perfil.css L1</p> <p>The page relies on:</p> <ul> <li>Bootstrap classes - <code>container</code>, <code>mt-4</code>, <code>mt-3</code>, <code>table</code>, <code>table-striped</code>, <code>btn</code>, <code>btn-primary</code></li> <li>Shared partials - Common head and header styles from <code>views/partials/</code></li> </ul> <p>The table uses Bootstrap's <code>.table-striped</code> class for alternating row colors, improving readability when multiple courses are displayed.</p> <p>Sources: public/css/perfil.css L1</p> <p>views/perfil.ejs L12</p> <p>views/perfil.ejs L32</p>"},{"location":"User-Profile-Page/#integration-with-course-system","title":"Integration with Course System","text":""},{"location":"User-Profile-Page/#enrollment-workflow-integration","title":"Enrollment Workflow Integration","text":"<p>The profile page is the terminal destination in the enrollment workflow. After a user enrolls in a course through the POST handler at routes/courses.js L117-L149</p> <p>they are redirected to <code>/perfil</code> where the JOIN query immediately includes the newly enrolled course in the results.</p> <p>This creates a seamless user experience where:</p> <ol> <li>User browses courses at <code>/courses</code></li> <li>User confirms enrollment at <code>/inscribir/:id</code> (GET)</li> <li>User submits enrollment at <code>/inscribir/:id</code> (POST)</li> <li>System redirects to <code>/perfil</code> showing updated enrollment list</li> <li>User can return to <code>/courses</code> via the button at views/perfil.ejs L32</li> </ol> <p>Sources: routes/courses.js L117-L149</p> <p>routes/courses.js L144</p> <p>views/perfil.ejs L32</p>"},{"location":"User-Profiles/","title":"User Profiles","text":"<p>Relevant source files * routes/courses.js * views/adminperfil.ejs * views/perfil.ejs</p>"},{"location":"User-Profiles/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the dual profile system implemented in the course management application. The system provides role-specific profile pages: a user profile for registered users displaying their enrolled courses, and an administrator dashboard for administrators showing system statistics and management capabilities.</p> <p>The profile system is tightly integrated with the role-based access control mechanism. For information about user roles and authentication, see Role-Based Access Control. For details about the enrollment process that populates user profiles, see Course Enrollment.</p> <p>Sources: routes/courses.js L152-L185</p>"},{"location":"User-Profiles/#profile-system-architecture","title":"Profile System Architecture","text":"<p>The application implements two distinct profile endpoints based on user role:</p> Endpoint Role Required Middleware Purpose <code>GET /perfil</code> <code>registrado</code> <code>estaAutenticado</code>, <code>isRegistrado</code> Display user's enrolled courses <code>GET /admin/perfil</code> <code>admin</code> <code>estaAutenticado</code>, <code>isAdmin</code> Display system statistics and management links"},{"location":"User-Profiles/#profile-route-flow","title":"Profile Route Flow","text":"<pre><code>flowchart TD\n\nRequest[\"HTTP GET Request\"]\nSessionCheck[\"estaAutenticado()&lt;br&gt;Check session.loggedin\"]\nRoleCheck[\"Role Check\"]\nIsRegistrado[\"isRegistrado()&lt;br&gt;session.rol === 'registrado'\"]\nIsAdmin[\"isAdmin()&lt;br&gt;session.rol === 'admin'\"]\nUserQuery[\"Database Query:&lt;br&gt;SELECT c.* FROM cursos c&lt;br&gt;JOIN inscripciones i&lt;br&gt;WHERE i.id_usuario = ?\"]\nAdminQuery[\"Database Query:&lt;br&gt;SELECT COUNT(*) AS totalCursos&lt;br&gt;FROM cursos\"]\nUserView[\"Render: perfil.ejs&lt;br&gt;Data: cursos[], usuario\"]\nAdminView[\"Render: adminPerfil.ejs&lt;br&gt;Data: totalCursos, usuario\"]\nRedirect[\"Redirect to /login\"]\n\nRequest --&gt; SessionCheck\nSessionCheck --&gt; RoleCheck\nSessionCheck --&gt; Redirect\nRoleCheck --&gt; IsRegistrado\nRoleCheck --&gt; IsAdmin\nRoleCheck --&gt; Redirect\nIsRegistrado --&gt; UserQuery\nIsAdmin --&gt; AdminQuery\nUserQuery --&gt; UserView\nAdminQuery --&gt; AdminView</code></pre> <p>Sources: routes/courses.js L8-L33</p> <p>routes/courses.js L152-L185</p>"},{"location":"User-Profiles/#user-profile-for-registered-users","title":"User Profile for Registered Users","text":"<p>The user profile at <code>GET /perfil</code> displays all courses in which the authenticated user is enrolled. This endpoint is protected by two middleware functions that verify authentication and role.</p>"},{"location":"User-Profiles/#route-definition","title":"Route Definition","text":"<p>The profile route is defined in routes/courses.js L152-L169</p> <p>:</p> <pre><code>GET /perfil\nMiddleware: estaAutenticado, isRegistrado\n</code></pre>"},{"location":"User-Profiles/#middleware-chain","title":"Middleware Chain","text":"Function Location Purpose <code>estaAutenticado</code> routes/courses.js L8-L14 Verifies <code>req.session.loggedin</code> is true <code>isRegistrado</code> routes/courses.js L26-L33 Verifies <code>req.session.rol === 'registrado'</code> <p>If either middleware check fails, the user is redirected to <code>/login</code>.</p>"},{"location":"User-Profiles/#database-query","title":"Database Query","text":"<p>The profile retrieves enrolled courses using a JOIN query routes/courses.js L155-L160</p> <p>:</p> <pre><code>SELECT c.* \nFROM cursos c\nJOIN inscripciones i ON c.id = i.id_curso\nWHERE i.id_usuario = ?\n</code></pre> <p>This query:</p> <ul> <li>Joins the <code>cursos</code> table with <code>inscripciones</code> on course ID</li> <li>Filters by the current user's ID from <code>req.session.usuario.id</code></li> <li>Returns all course fields for enrolled courses</li> </ul>"},{"location":"User-Profiles/#profile-data-flow","title":"Profile Data Flow","text":"<pre><code>sequenceDiagram\n  participant Browser\n  participant routes/courses.js\n  participant isRegistrado\n  participant req.session\n  participant MySQL Database\n  participant perfil.ejs\n\n  Browser-&gt;&gt;routes/courses.js: \"GET /perfil\"\n  routes/courses.js-&gt;&gt;isRegistrado: \"Check role\"\n  isRegistrado-&gt;&gt;req.session: \"Read session.rol\"\n  req.session--&gt;&gt;isRegistrado: \"rol: 'registrado'\"\n  isRegistrado-&gt;&gt;routes/courses.js: \"Authorize\"\n  routes/courses.js-&gt;&gt;req.session: \"Get usuario.id\"\n  req.session--&gt;&gt;routes/courses.js: \"id: 123\"\n  routes/courses.js-&gt;&gt;MySQL Database: \"SELECT c.* FROM cursos c\n  MySQL Database--&gt;&gt;routes/courses.js: JOIN inscripciones i\n  routes/courses.js-&gt;&gt;perfil.ejs: WHERE i.id_usuario = 123\"\n  perfil.ejs--&gt;&gt;Browser: \"results: [{id:1, titulo:..}, {id:5, titulo:..}]\"</code></pre> <p>Sources: routes/courses.js L152-L169</p>"},{"location":"User-Profiles/#view-rendering","title":"View Rendering","text":"<p>The profile view views/perfil.ejs</p> <p>receives three data objects:</p> Variable Type Description <code>cursos</code> Array List of enrolled course objects from database query <code>usuario</code> Object Current user object from <code>req.session.usuario</code> <code>rol</code> String User role from <code>req.session.rol</code> <p>The view displays:</p> <ul> <li>User greeting with <code>usuario.nombre</code> views/perfil.ejs L6</li> <li>Empty state message if no enrollments views/perfil.ejs L9-L10</li> <li>Table of enrolled courses with columns: T\u00edtulo, Categor\u00eda, Descripci\u00f3n views/perfil.ejs L12-L29</li> <li>Link to view all courses views/perfil.ejs L32</li> </ul> <p>Sources: views/perfil.ejs L1-L35</p>"},{"location":"User-Profiles/#administrator-dashboard","title":"Administrator Dashboard","text":"<p>The administrator dashboard at <code>GET /admin/perfil</code> provides system statistics and navigation for course management. This endpoint is restricted to users with the <code>admin</code> role.</p>"},{"location":"User-Profiles/#route-definition_1","title":"Route Definition","text":"<p>The admin profile route is defined in routes/courses.js L172-L185</p> <p>:</p> <pre><code>GET /admin/perfil\nMiddleware: estaAutenticado, isAdmin\n</code></pre>"},{"location":"User-Profiles/#middleware-chain_1","title":"Middleware Chain","text":"Function Location Purpose <code>estaAutenticado</code> routes/courses.js L8-L14 Verifies session is active <code>isAdmin</code> routes/courses.js L16-L24 Verifies <code>req.session.rol === 'admin'</code> <p>Non-admin users attempting to access this route are redirected to <code>/login</code> routes/courses.js L22</p>"},{"location":"User-Profiles/#statistics-query","title":"Statistics Query","text":"<p>The dashboard executes a COUNT query to retrieve system metrics routes/courses.js L176</p> <p>:</p> <pre><code>SELECT COUNT(*) AS totalCursos FROM cursos\n</code></pre> <p>This query returns the total number of courses in the system, which is displayed on the dashboard.</p>"},{"location":"User-Profiles/#admin-dashboard-data-flow","title":"Admin Dashboard Data Flow","text":"<pre><code>flowchart TD\n\nRequest[\"GET /admin/perfil\"]\nAuthMW[\"estaAutenticado\"]\nAdminMW[\"isAdmin\"]\nGetUser[\"req.session.usuario\"]\nQueryDB[\"db.query:&lt;br&gt;SELECT COUNT(*)&lt;br&gt;FROM cursos\"]\nResults[\"results[0].totalCursos\"]\nRender[\"res.render('adminPerfil',&lt;br&gt;{usuario, totalCursos})\"]\n\nRequest --&gt; AuthMW\nAuthMW --&gt; AdminMW\nAdminMW --&gt; GetUser\nGetUser --&gt; QueryDB\nQueryDB --&gt; Results\nResults --&gt; Render</code></pre> <p>Sources: routes/courses.js L172-L185</p>"},{"location":"User-Profiles/#view-structure","title":"View Structure","text":"<p>The admin profile view views/adminperfil.ejs</p> <p>displays:</p> <ol> <li>Welcome Header: Personalized greeting with <code>usuario.nombre</code> and \"(Administrador)\" label views/adminperfil.ejs L6</li> <li>Statistics: Total course count from <code>totalCursos</code> variable views/adminperfil.ejs L8</li> <li>Navigation Menu: Links to course management and home page views/adminperfil.ejs L10-L21</li> </ol> <p>The navigation provides quick access to:</p> <ul> <li><code>/courses</code> - Course listing and management interface</li> <li><code>/</code> - Application home page</li> </ul> <p>Sources: views/adminperfil.ejs L1-L29</p>"},{"location":"User-Profiles/#access-control-implementation","title":"Access Control Implementation","text":"<p>Both profile endpoints implement strict access control through middleware functions. The system enforces a clear separation between user roles.</p>"},{"location":"User-Profiles/#middleware-function-mapping","title":"Middleware Function Mapping","text":"<pre><code>flowchart TD\n\nEstaAuth[\"estaAutenticado()&lt;br&gt;routes/courses.js:8-14\"]\nIsReg[\"isRegistrado()&lt;br&gt;routes/courses.js:26-33\"]\nIsAdm[\"isAdmin()&lt;br&gt;routes/courses.js:16-24\"]\nUserProfile[\"GET /perfil&lt;br&gt;lines 152-169\"]\nAdminProfile[\"GET /admin/perfil&lt;br&gt;lines 172-185\"]\nCheckLogin[\"req.session.loggedin\"]\nCheckRole[\"req.session.rol\"]\nRedirect1[\"Redirect /login\"]\nRedirect2[\"Redirect /login\"]\n\nEstaAuth --&gt; CheckLogin\nIsReg --&gt; CheckRole\nIsAdm --&gt; CheckRole\nCheckLogin --&gt; IsReg\nCheckLogin --&gt; IsAdm\nCheckLogin --&gt; Redirect1\nCheckRole --&gt; UserProfile\nCheckRole --&gt; AdminProfile\nCheckRole --&gt; Redirect2\nIsReg --&gt; UserProfile\nIsAdm --&gt; AdminProfile\n\nsubgraph subGraph3 [\"Session Checks\"]\n    CheckLogin\n    CheckRole\nend\n\nsubgraph subGraph2 [\"Profile Routes\"]\n    UserProfile\n    AdminProfile\nend\n\nsubgraph subGraph1 [\"Role-Based Middleware\"]\n    IsReg\n    IsAdm\nend\n\nsubgraph subGraph0 [\"Authentication Middleware\"]\n    EstaAuth\nend</code></pre>"},{"location":"User-Profiles/#authorization-logic","title":"Authorization Logic","text":"<p><code>estaAutenticado</code> Function routes/courses.js L8-L14</p> <p>:</p> <ul> <li>Checks if <code>req.session.loggedin</code> is truthy</li> <li>Calls <code>next()</code> if authenticated</li> <li>Redirects to <code>/login</code> if not authenticated</li> </ul> <p><code>isRegistrado</code> Function routes/courses.js L26-L33</p> <p>:</p> <ul> <li>Verifies <code>req.session.loggedin &amp;&amp; req.session.rol === 'registrado'</code></li> <li>Calls <code>next()</code> if role matches</li> <li>Redirects to <code>/login</code> if role mismatch</li> </ul> <p><code>isAdmin</code> Function routes/courses.js L16-L24</p> <p>:</p> <ul> <li>Verifies <code>req.session.loggedin &amp;&amp; req.session.rol === 'admin'</code></li> <li>Calls <code>next()</code> if role matches</li> <li>Redirects to <code>/login</code> if role mismatch</li> </ul> <p>Sources: routes/courses.js L8-L33</p>"},{"location":"User-Profiles/#profile-data-structures","title":"Profile Data Structures","text":""},{"location":"User-Profiles/#user-profile-response-data","title":"User Profile Response Data","text":"<p>The <code>GET /perfil</code> endpoint passes the following data structure to the view:</p> <pre><code>{\n  cursos: [\n    {\n      id: number,\n      titulo: string,\n      descripcion: string,\n      categoria: string,\n      visibilidad: string\n    },\n    // ... more courses\n  ],\n  usuario: {\n    id: number,\n    nombre: string,\n    email: string,\n    rol: 'registrado'\n  },\n  rol: 'registrado',\n  msg: string | undefined  // Optional query parameter\n}\n</code></pre> <p>Sources: routes/courses.js L162-L167</p>"},{"location":"User-Profiles/#admin-profile-response-data","title":"Admin Profile Response Data","text":"<p>The <code>GET /admin/perfil</code> endpoint passes the following data structure to the view:</p> <pre><code>{\n  usuario: {\n    id: number,\n    nombre: string,\n    email: string,\n    rol: 'admin'\n  },\n  totalCursos: number  // COUNT(*) result from database\n}\n</code></pre> <p>Sources: routes/courses.js L183</p>"},{"location":"User-Profiles/#profile-interaction-patterns","title":"Profile Interaction Patterns","text":""},{"location":"User-Profiles/#user-profile-workflow","title":"User Profile Workflow","text":"<p>After successful enrollment, users are redirected to <code>/perfil</code> routes/courses.js L144</p> <p>where they can view their updated course list. The profile serves as a confirmation page and central hub for managing enrolled courses.</p> <p>Sources: routes/courses.js L117-L149</p> <p>views/perfil.ejs L32</p>"},{"location":"User-Profiles/#admin-profile-workflow","title":"Admin Profile Workflow","text":"<p>The admin dashboard provides navigation to the course management interface at <code>/courses</code> views/adminperfil.ejs L18</p> <p>where administrators can perform CRUD operations on courses.</p> <p>Sources: views/adminperfil.ejs L10-L21</p>"},{"location":"User-Profiles/#error-handling","title":"Error Handling","text":"<p>Both profile routes implement basic error handling for database operations:</p>"},{"location":"User-Profiles/#user-profile-error-handling","title":"User Profile Error Handling","text":"<p>When the enrollment query fails in <code>GET /perfil</code> routes/courses.js L161</p> <p>the route handler does not explicitly handle the error, relying on implicit error handling. If the query succeeds but returns no results, the view displays an empty state message views/perfil.ejs L9-L10</p>"},{"location":"User-Profiles/#admin-profile-error-handling","title":"Admin Profile Error Handling","text":"<p>The admin profile includes explicit error handling for the statistics query routes/courses.js L177-L180</p> <p>:</p> <pre><code>if (err) {\n  console.error(err);\n  return res.render(\"adminPerfil\", { usuario, totalCursos: 0 });\n}\n</code></pre> <p>On database error, the view is rendered with <code>totalCursos: 0</code> as a fallback value, preventing complete page failure.</p> <p>Sources: routes/courses.js L161-L168</p> <p>routes/courses.js L177-L180</p>"},{"location":"User-Profiles/#session-dependencies","title":"Session Dependencies","text":"<p>Both profile endpoints depend on session data populated during the login process:</p> Session Property Set During Used By <code>req.session.loggedin</code> Login [routes/auth.js] <code>estaAutenticado</code> middleware <code>req.session.rol</code> Login [routes/auth.js] <code>isRegistrado</code>, <code>isAdmin</code> middleware <code>req.session.usuario</code> Login [routes/auth.js] Profile views for user data <code>req.session.usuario.id</code> Login [routes/auth.js] Enrollment queries <p>The profile system assumes these session properties are properly initialized during authentication. For details on session initialization, see User Login.</p> <p>Sources: routes/courses.js L154</p> <p>routes/courses.js L164-L165</p> <p>routes/courses.js L173</p>"},{"location":"User-Registration/","title":"User Registration","text":"<p>Relevant source files * public/css/register.css * routes/auth.js * views/register.ejs</p>"},{"location":"User-Registration/#purpose-and-scope","title":"Purpose and Scope","text":"<p>This document describes the user registration system, covering the registration workflow from form submission through account creation. It details the validation rules, password hashing process, database insertion, and role assignment mechanisms. For information about the login process after registration, see User Login. For details on role-based permissions, see Role-Based Access Control.</p>"},{"location":"User-Registration/#registration-flow-overview","title":"Registration Flow Overview","text":"<p>The registration process follows a two-step workflow: form display and form submission with validation.</p>"},{"location":"User-Registration/#registration-sequence-diagram","title":"Registration Sequence Diagram","text":"<pre><code>sequenceDiagram\n  participant User\n  participant Browser\n  participant routes/auth.js\n  participant express-validator\n  participant bcryptjs\n  participant config/db.js\n  participant usuarios table\n  participant views/register.ejs\n\n  User-&gt;&gt;Browser: \"Navigate to /register\"\n  Browser-&gt;&gt;routes/auth.js: \"GET /register\"\n  routes/auth.js-&gt;&gt;views/register.ejs: \"render('register', {register: true})\"\n  views/register.ejs-&gt;&gt;Browser: \"Display registration form\"\n  Browser-&gt;&gt;User: \"Show form\"\n  User-&gt;&gt;Browser: \"Submit form data\"\n  Browser-&gt;&gt;routes/auth.js: \"POST /register (nombre, email, password, rol)\"\n  routes/auth.js-&gt;&gt;express-validator: \"Validate inputs\"\n  loop [\"Validation fails\"]\n    express-validator-&gt;&gt;routes/auth.js: \"Return errors array\"\n    routes/auth.js-&gt;&gt;views/register.ejs: \"render with validaciones\"\n    views/register.ejs-&gt;&gt;Browser: \"Display errors\"\n    Browser-&gt;&gt;User: \"Show validation messages\"\n    express-validator-&gt;&gt;routes/auth.js: \"Validation passed\"\n    routes/auth.js-&gt;&gt;bcryptjs: \"hash(password, 8)\"\n    bcryptjs-&gt;&gt;routes/auth.js: \"Return passwordHash\"\n    routes/auth.js-&gt;&gt;config/db.js: \"INSERT INTO usuarios\"\n    config/db.js-&gt;&gt;usuarios table: \"Insert record\"\n    usuarios table-&gt;&gt;config/db.js: \"Success\"\n    config/db.js-&gt;&gt;routes/auth.js: \"results\"\n    routes/auth.js-&gt;&gt;views/register.ejs: \"render with alert\"\n    views/register.ejs-&gt;&gt;Browser: \"SweetAlert success\"\n    Browser-&gt;&gt;User: \"Show success, redirect to login\"\n  end</code></pre> <p>Sources: routes/auth.js L12-L72</p> <p>views/register.ejs L9-L71</p>"},{"location":"User-Registration/#routes-and-endpoints","title":"Routes and Endpoints","text":"<p>The registration system exposes two HTTP endpoints in the <code>auth</code> router.</p>"},{"location":"User-Registration/#endpoint-specifications","title":"Endpoint Specifications","text":"Method Route Purpose Middleware Response GET <code>/register</code> Display registration form None Renders <code>register.ejs</code> with <code>register: true</code> POST <code>/register</code> Process registration <code>express-validator</code> validation chain Renders <code>register.ejs</code> with success/error feedback"},{"location":"User-Registration/#get-register","title":"GET /register","text":"<p>Displays the registration form to the user.</p> <pre><code>router.get('/register', (req, res) =&gt; {\n  res.render('register', { register: true});\n});\n</code></pre> <p>routes/auth.js L12-L14</p> <p>The <code>register: true</code> flag is passed to the view to ensure the form is displayed.</p>"},{"location":"User-Registration/#post-register","title":"POST /register","text":"<p>Processes the registration form submission with validation middleware.</p> <p>Request Body Parameters:</p> Field Type Required Validation <code>nombre</code> String Yes Minimum 3 characters <code>email</code> String Yes Valid email format <code>password</code> String Yes Minimum 4 characters <code>rol</code> String No Defaults to <code>'registrado'</code> if not provided <p>Sources: routes/auth.js L8-L14</p> <p>routes/auth.js L17-L72</p>"},{"location":"User-Registration/#input-validation","title":"Input Validation","text":"<p>The registration endpoint uses <code>express-validator</code> to enforce data quality rules before processing.</p>"},{"location":"User-Registration/#validation-chain-architecture","title":"Validation Chain Architecture","text":"<pre><code>flowchart TD\n\nRequest[\"POST /register&lt;br&gt;Request Body\"]\nValidatorChain[\"Validation Chain\"]\nNameValidator[\"body('nombre')&lt;br&gt;.exists()&lt;br&gt;.isLength({min: 3})\"]\nEmailValidator[\"body('email')&lt;br&gt;.exists()&lt;br&gt;.isEmail()\"]\nPasswordValidator[\"body('password')&lt;br&gt;.exists()&lt;br&gt;.isLength({min: 4})\"]\nValidationResult[\"validationResult(req)\"]\nErrorCheck[\"errors.isEmpty()?\"]\nRenderErrors[\"Render register.ejs&lt;br&gt;with validaciones array\"]\nProcessRegistration[\"Continue to&lt;br&gt;password hashing\"]\n\nRequest --&gt; ValidatorChain\nValidatorChain --&gt; NameValidator\nValidatorChain --&gt; EmailValidator\nValidatorChain --&gt; PasswordValidator\nNameValidator --&gt; ValidationResult\nEmailValidator --&gt; ValidationResult\nPasswordValidator --&gt; ValidationResult\nValidationResult --&gt; ErrorCheck\nErrorCheck --&gt; RenderErrors\nErrorCheck --&gt; ProcessRegistration</code></pre>"},{"location":"User-Registration/#validation-rules-implementation","title":"Validation Rules Implementation","text":"<p>The validation chain is defined as middleware before the route handler:</p> <pre><code>[\n  body(\"nombre\")\n    .exists()\n    .isLength({ min: 3 })\n    .withMessage(\"El nombre debe tener al menos 3 caracteres\"),\n\n  body(\"email\")\n    .exists()\n    .isEmail()\n    .withMessage(\"El email debe ser v\u00e1lido\"),\n\n  body(\"password\")\n    .exists()\n    .isLength({ min: 4 })\n    .withMessage(\"La contrase\u00f1a debe tener al menos 4 caracteres\")\n]\n</code></pre> <p>routes/auth.js L17-L33</p>"},{"location":"User-Registration/#error-handling","title":"Error Handling","text":"<p>When validation fails, errors are passed to the view:</p> <pre><code>const errors = validationResult(req); \nif (!errors.isEmpty()) {\n  res.render(\"register\", {\n    validaciones: errors.array(),\n    valores: req.body\n  });\n}\n</code></pre> <p>routes/auth.js L35-L40</p> <p>The <code>validaciones</code> array contains error objects, and <code>valores</code> preserves user input for form repopulation.</p> <p>Sources: routes/auth.js L17-L41</p>"},{"location":"User-Registration/#password-security","title":"Password Security","text":"<p>Passwords are hashed using <code>bcryptjs</code> with a salt round of 8 before storage.</p>"},{"location":"User-Registration/#hashing-process","title":"Hashing Process","text":"<pre><code>flowchart TD\n\nPlainPassword[\"Plain Text Password&lt;br&gt;from req.body.password\"]\nBCryptHash[\"bcrypt.hash(password, 8)\"]\nSalt[\"Salt Rounds = 8\"]\nHashedPassword[\"passwordHash&lt;br&gt;(60-character string)\"]\nDBInsert[\"INSERT INTO usuarios&lt;br&gt;password: passwordHash\"]\n\nPlainPassword --&gt; BCryptHash\nSalt --&gt; BCryptHash\nBCryptHash --&gt; HashedPassword\nHashedPassword --&gt; DBInsert</code></pre>"},{"location":"User-Registration/#implementation","title":"Implementation","text":"<pre><code>const { nombre, email, password, rol } = req.body;\nconst passwordHash = await bcrypt.hash(password, 8);\n</code></pre> <p>routes/auth.js L43-L44</p> <p>The hash function is asynchronous and returns a promise. The salt round value of 8 provides a balance between security and performance for password hashing operations.</p> <p>Sources: routes/auth.js L43-L44</p>"},{"location":"User-Registration/#database-operations","title":"Database Operations","text":"<p>Registration data is inserted into the <code>usuarios</code> table using a parameterized query to prevent SQL injection.</p>"},{"location":"User-Registration/#database-insertion-flow","title":"Database Insertion Flow","text":"<pre><code>flowchart TD\n\nPrepareData[\"Extract data:&lt;br&gt;nombre, email,&lt;br&gt;passwordHash, rol\"]\nDefaultRole[\"rol provided?\"]\nSetDefault[\"Set rol = 'registrado'\"]\nBuildQuery[\"db.query(&lt;br&gt;'INSERT INTO usuarios SET ?',&lt;br&gt;{nombre, email, password, rol})\"]\nExecuteQuery[\"MySQL executes INSERT\"]\nCheckResult[\"Error?\"]\nLogError[\"console.log(error)\"]\nRenderSuccess[\"Render success alert:&lt;br&gt;alertTitle: 'Registro exitoso'&lt;br&gt;ruta: 'login'\"]\n\nPrepareData --&gt; DefaultRole\nDefaultRole --&gt; SetDefault\nDefaultRole --&gt; BuildQuery\nSetDefault --&gt; BuildQuery\nBuildQuery --&gt; ExecuteQuery\nExecuteQuery --&gt; CheckResult\nCheckResult --&gt; LogError\nCheckResult --&gt; RenderSuccess</code></pre>"},{"location":"User-Registration/#insertion-query","title":"Insertion Query","text":"<pre><code>db.query(\n  \"INSERT INTO usuarios SET ?\",\n  {\n    nombre: nombre,\n    email: email,\n    password: passwordHash,\n    rol: rol || 'registrado',\n  },\n  (error, results) =&gt; { \n    if (error) {\n      console.log(error);\n    } else {\n      res.render(\"register\", { \n        alert: true,\n        alertTitle: 'Registro exitoso',\n        alertMessage: 'Tu cuenta fue creada',\n        alertIcon: 'success',\n        showConfirmButton: false,\n        timer: 2500,\n        ruta: 'login' \n      });\n    }\n  }\n);\n</code></pre> <p>routes/auth.js L46-L69</p>"},{"location":"User-Registration/#default-role-assignment","title":"Default Role Assignment","text":"<p>If the <code>rol</code> field is not provided or is empty, it defaults to <code>'registrado'</code> using the logical OR operator:</p> <pre><code>rol: rol || 'registrado',\n</code></pre> <p>routes/auth.js L52</p> <p>This ensures all users have at least basic registered user privileges. For details on role capabilities, see Role-Based Access Control.</p> <p>Sources: routes/auth.js L46-L72</p>"},{"location":"User-Registration/#user-interface","title":"User Interface","text":"<p>The registration form is rendered by <code>register.ejs</code> with conditional display logic for validation errors and success alerts.</p>"},{"location":"User-Registration/#form-structure","title":"Form Structure","text":"<pre><code>flowchart TD\n\nRegisterContainer[\"registro-container&lt;br&gt;(centered white box)\"]\nHeading[\"h2: 'Crear una Cuenta'\"]\nFormElement[\"form action='/register'&lt;br&gt;method='POST'\"]\nNombreField[\"input name='nombre'&lt;br&gt;type='text'\"]\nEmailField[\"input name='email'&lt;br&gt;type='text'\"]\nRolSelect[\"select name='rol'&lt;br&gt;(admin/registrado options)\"]\nPasswordField[\"input name='password'&lt;br&gt;type='password'\"]\nSubmitButton[\"button.btn-registrarse&lt;br&gt;'Registrate'\"]\nValidationAlerts[\"Bootstrap alerts&lt;br&gt;(if validaciones exist)\"]\nSweetAlert[\"SweetAlert2&lt;br&gt;(if alert exists)\"]\n\nRegisterContainer --&gt; Heading\nRegisterContainer --&gt; FormElement\nFormElement --&gt; NombreField\nFormElement --&gt; EmailField\nFormElement --&gt; RolSelect\nFormElement --&gt; PasswordField\nFormElement --&gt; SubmitButton\nFormElement --&gt; ValidationAlerts\nRegisterContainer --&gt; SweetAlert\n\nsubgraph subGraph0 [\"Form Fields\"]\n    NombreField\n    EmailField\n    RolSelect\n    PasswordField\nend</code></pre>"},{"location":"User-Registration/#form-implementation","title":"Form Implementation","text":"<p>The form conditionally displays based on the <code>register</code> flag or presence of <code>validaciones</code>:</p> <pre><code>&lt;% if ((typeof register !== 'undefined' &amp;&amp; register) || typeof validaciones !== 'undefined') { %&gt;\n  &lt;div class=\"registro-container\"&gt;\n    &lt;h2&gt;Crear una Cuenta&lt;/h2&gt;\n    &lt;form action=\"/register\" method=\"POST\"&gt;\n      &lt;!-- form fields --&gt;\n    &lt;/form&gt;\n  &lt;/div&gt;\n&lt;% } %&gt;\n</code></pre> <p>views/register.ejs L9-L55</p>"},{"location":"User-Registration/#role-selection-field","title":"Role Selection Field","text":"<p>The form includes a dropdown for role selection:</p> <pre><code>&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"rol\"&gt;Rol:&lt;/label&gt;\n  &lt;select name=\"rol\"&gt;\n    &lt;option value=\"admin\"&gt;Administrador&lt;/option&gt;\n    &lt;option value=\"registrado\"&gt;Registrado&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n</code></pre> <p>views/register.ejs L26-L32</p> <p>Note: In a production system, this field should not be exposed to public users. Role assignment should be handled server-side or restricted to admin-only workflows.</p>"},{"location":"User-Registration/#value-preservation","title":"Value Preservation","text":"<p>On validation failure, form fields repopulate with submitted values:</p> <pre><code>&lt;input type=\"text\" name=\"nombre\"\n  value=\"&lt;% if (typeof valores !=='undefined') { %&gt; &lt;%= valores.nombre %&gt; &lt;% } %&gt;\"&gt;\n</code></pre> <p>views/register.ejs L16-L17</p> <p>Sources: views/register.ejs L9-L55</p>"},{"location":"User-Registration/#validation-error-display","title":"Validation Error Display","text":"<p>Validation errors are displayed using Bootstrap dismissible alerts.</p>"},{"location":"User-Registration/#error-rendering-logic","title":"Error Rendering Logic","text":"<pre><code>&lt;% if (typeof validaciones != 'undefined') { %&gt;\n  &lt;% validaciones.forEach(validacion=&gt; {%&gt;\n    &lt;div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\"&gt;\n      &lt;strong&gt;\n        &lt;%= validacion.msg %&gt;\n      &lt;/strong&gt; \n      &lt;button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"&gt;&lt;/button&gt;\n    &lt;/div&gt;   \n  &lt;% }); %&gt;\n&lt;% } %&gt;\n</code></pre> <p>views/register.ejs L42-L52</p> <p>Each validation error from <code>express-validator</code> is rendered as a separate Bootstrap alert with the error message from the <code>.withMessage()</code> method.</p> <p>Sources: views/register.ejs L42-L52</p>"},{"location":"User-Registration/#success-feedback","title":"Success Feedback","text":"<p>Upon successful registration, SweetAlert2 displays a modal and redirects to the login page.</p>"},{"location":"User-Registration/#sweetalert-configuration","title":"SweetAlert Configuration","text":"<p>The route handler passes alert configuration to the view:</p> <pre><code>res.render(\"register\", { \n  alert: true,\n  alertTitle: 'Registro exitoso',\n  alertMessage: 'Tu cuenta fue creada',\n  alertIcon: 'success',\n  showConfirmButton: false,\n  timer: 2500,\n  ruta: 'login' \n});\n</code></pre> <p>routes/auth.js L58-L66</p>"},{"location":"User-Registration/#alert-rendering","title":"Alert Rendering","text":"<p>The view conditionally renders a SweetAlert script block:</p> <pre><code>&lt;% if (typeof alert != 'undefined') { %&gt;\n  &lt;script&gt;\n    Swal.fire({\n      title: '&lt;%= alertTitle %&gt;',\n      text: '&lt;%= alertMessage %&gt;',\n      icon: '&lt;%= alertIcon %&gt;',\n      showConfirmButton: &lt;%= showConfirmButton %&gt;,\n      timer: &lt;%= timer %&gt;\n    }).then (()=&gt; {\n      window.location ='/&lt;%= ruta%&gt;'\n    })\n  &lt;/script&gt;\n&lt;% } %&gt;\n</code></pre> <p>views/register.ejs L59-L71</p> <p>The alert automatically closes after 2500ms and redirects to <code>/login</code> for the user to sign in with their new credentials.</p> <p>Sources: routes/auth.js L58-L66</p> <p>views/register.ejs L59-L71</p>"},{"location":"User-Registration/#styling-and-layout","title":"Styling and Layout","text":"<p>The registration page uses a centered card layout with gradient background.</p>"},{"location":"User-Registration/#visual-design-specifications","title":"Visual Design Specifications","text":"Component Style Properties Body Gradient background: <code>linear-gradient(120deg, #3b82f6, #6366f1)</code> Container White background, 15px border radius, 400px max-width Inputs 8px border radius, focus state with blue border (<code>#3b82f6</code>) Submit Button Full width, blue background (<code>#3b82f6</code>), 8px border radius <p>The CSS is defined in public/css/register.css L1-L87</p> <p>and provides:</p> <ul> <li>Flexbox centering for vertical and horizontal alignment</li> <li>Responsive design with max-width constraints</li> <li>Hover and focus states for interactive elements</li> <li>Consistent spacing using margin and padding utilities</li> </ul> <p>Sources: public/css/register.css L1-L87</p>"},{"location":"User-Registration/#security-considerations","title":"Security Considerations","text":""},{"location":"User-Registration/#password-storage","title":"Password Storage","text":"<ul> <li>Passwords are never stored in plain text</li> <li><code>bcryptjs</code> hash function with 8 salt rounds</li> <li>Hashed passwords are 60-character strings stored in the database</li> </ul>"},{"location":"User-Registration/#sql-injection-prevention","title":"SQL Injection Prevention","text":"<ul> <li>Parameterized queries using <code>db.query(\"INSERT INTO usuarios SET ?\", {...})</code></li> <li>No direct string concatenation of user input</li> </ul>"},{"location":"User-Registration/#input-validation_1","title":"Input Validation","text":"<ul> <li>Server-side validation with <code>express-validator</code></li> <li>Client-side HTML5 validation (implicit via input types)</li> <li>Error messages do not expose system internals</li> </ul> <p>Sources: routes/auth.js L43-L44</p> <p>routes/auth.js L46-L49</p>"},{"location":"User-Registration/#integration-points","title":"Integration Points","text":"<p>The registration system integrates with:</p> <ul> <li>Session Management (Session Management): After registration, users must login to create a session</li> <li>Login System (User Login): Successful registration redirects to <code>/login</code></li> <li>Database Layer (Database Architecture): Inserts into <code>usuarios</code> table</li> <li>Role-Based Access (Role-Based Access Control): Assigns default <code>registrado</code> role</li> </ul> <p>Sources: routes/auth.js L12-L72</p>"}]}